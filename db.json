{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/Axe/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/Axe/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/Axe/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/Axe/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/Axe/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/Axe/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/Axe/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/Axe/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/Axe/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/Axe/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/Axe/source/img/bitbug_favicon.ico","path":"img/bitbug_favicon.ico","modified":0,"renderable":1},{"_id":"themes/Axe/source/img/coderwall.png","path":"img/coderwall.png","modified":0,"renderable":1},{"_id":"themes/Axe/source/img/delicious.png","path":"img/delicious.png","modified":0,"renderable":1},{"_id":"themes/Axe/source/img/douban.png","path":"img/douban.png","modified":0,"renderable":1},{"_id":"themes/Axe/source/img/facebook.png","path":"img/facebook.png","modified":0,"renderable":1},{"_id":"themes/Axe/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/Axe/source/img/fuzi.jpg","path":"img/fuzi.jpg","modified":0,"renderable":1},{"_id":"themes/Axe/source/img/github.png","path":"img/github.png","modified":0,"renderable":1},{"_id":"themes/Axe/source/img/google.png","path":"img/google.png","modified":0,"renderable":1},{"_id":"themes/Axe/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/Axe/source/img/linkedin.png","path":"img/linkedin.png","modified":0,"renderable":1},{"_id":"themes/Axe/source/img/mail.png","path":"img/mail.png","modified":0,"renderable":1},{"_id":"themes/Axe/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/Axe/source/img/pinboard.png","path":"img/pinboard.png","modified":0,"renderable":1},{"_id":"themes/Axe/source/img/pinterest.png","path":"img/pinterest.png","modified":0,"renderable":1},{"_id":"themes/Axe/source/img/qq.png","path":"img/qq.png","modified":0,"renderable":1},{"_id":"themes/Axe/source/img/rss.png","path":"img/rss.png","modified":0,"renderable":1},{"_id":"themes/Axe/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/Axe/source/img/search.png","path":"img/search.png","modified":0,"renderable":1},{"_id":"themes/Axe/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":0,"renderable":1},{"_id":"themes/Axe/source/img/twitter.png","path":"img/twitter.png","modified":0,"renderable":1},{"_id":"themes/Axe/source/img/weibo.png","path":"img/weibo.png","modified":0,"renderable":1},{"_id":"themes/Axe/source/img/zhihu.png","path":"img/zhihu.png","modified":0,"renderable":1},{"_id":"themes/Axe/source/js/Counter.js","path":"js/Counter.js","modified":0,"renderable":1},{"_id":"themes/Axe/source/js/instagram.js","path":"js/instagram.js","modified":0,"renderable":1},{"_id":"themes/Axe/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/Axe/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/Axe/source/js/mobile.js","path":"js/mobile.js","modified":0,"renderable":1},{"_id":"themes/Axe/source/js/particles.js","path":"js/particles.js","modified":0,"renderable":1},{"_id":"themes/Axe/source/js/pc.js","path":"js/pc.js","modified":0,"renderable":1},{"_id":"themes/Axe/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/Axe/source/css/fonts/fontawesome-webfont.svgz","path":"css/fonts/fontawesome-webfont.svgz","modified":0,"renderable":1},{"_id":"themes/Axe/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/Axe/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/Axe/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/Axe/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/Axe/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/Axe/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/Axe/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/Axe/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/Axe/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/Axe/README.md","hash":"eab75c2a42ae2cc38f55ed6a8296de820bdbafda","modified":1540895209297},{"_id":"themes/Axe/READMEzh.md","hash":"a82e03df065b233d42a8b9f5f647e957c6575add","modified":1540895209297},{"_id":"themes/Axe/_config.yml","hash":"2eb07380240d123d9727623057a701d73f8d6001","modified":1541580695175},{"_id":"themes/Axe/package.json","hash":"c265b508542d0fbebf146305097e1f53d264fc25","modified":1540895209312},{"_id":"source/_posts/react-native环境配置.md","hash":"b21eb71541bd8e71603388fc444e6cdd40bfc93d","modified":1541672039349},{"_id":"source/_posts/react-native简介.md","hash":"0eeb6a70f7ee76b126b9796ce8506624eb781590","modified":1541407864772},{"_id":"source/_posts/react-native组件的生命周期.md","hash":"566441ab97a21b6f6ac9850bc399c6db1674e6f9","modified":1541672352069},{"_id":"source/aboutMe/index.md","hash":"7275dddb425c843648fc1056de43bfa14c2ec3c6","modified":1541408865554},{"_id":"source/categories/index.md","hash":"65af816a0ef7379e801881f71112cee35acbcee2","modified":1541407640144},{"_id":"source/tags/index.md","hash":"f2bf668259be3144320375338cc2e7ca6ff69379","modified":1541407712435},{"_id":"themes/Axe/layout/.DS_Store","hash":"693e513b44d5241ea897cc90cc71aeba091283b9","modified":1540895209297},{"_id":"themes/Axe/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1540895209312},{"_id":"themes/Axe/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1540895209312},{"_id":"themes/Axe/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1541397757544},{"_id":"themes/Axe/layout/layout.ejs","hash":"acbcab84260ffe7168b898ccc86dab99da2e44cb","modified":1540895209312},{"_id":"themes/Axe/layout/page.ejs","hash":"f910bf24f1da60c97fc59fdcb96b7eabda5f1d9c","modified":1541400477204},{"_id":"themes/Axe/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1541571004453},{"_id":"themes/Axe/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1540895209312},{"_id":"themes/Axe/layout/_partial/.DS_Store","hash":"e32979f5a18bff84e197c13b48f4c54e03796e4a","modified":1540895209297},{"_id":"themes/Axe/layout/_partial/after-footer.ejs","hash":"15bcb523e600f55e8f6cc288cac1e043c8c2ba02","modified":1540895209297},{"_id":"themes/Axe/layout/_partial/archive-post.ejs","hash":"5ad682a62264a8b35dc621f00aa123984d6f1cf2","modified":1540895209297},{"_id":"themes/Axe/layout/_partial/archive.ejs","hash":"fd122e7047fb05fa88948e8bad9febd79b7143fa","modified":1541577572705},{"_id":"themes/Axe/layout/_partial/article.ejs","hash":"1c8e965ef48e6f13bde6494a3d63dba9798bbac1","modified":1541402278941},{"_id":"themes/Axe/layout/_partial/baidu_tongji.ejs","hash":"df67dae10b3d5390ca5ff329bf36ff60082bf664","modified":1540895209297},{"_id":"themes/Axe/layout/_partial/footer.ejs","hash":"007dd3287a11f3b0ec1d2debbf65cb4e5f9e2ce7","modified":1541579569113},{"_id":"themes/Axe/layout/_partial/google_analytics.ejs","hash":"0bd77fcbe30c5bc323222c1cfee592300abfd42f","modified":1540895209312},{"_id":"themes/Axe/layout/_partial/head.ejs","hash":"bcfa5b67ca4f02f40e9ca898a3d2e85f5fa1a523","modified":1540895209312},{"_id":"themes/Axe/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1540895209312},{"_id":"themes/Axe/layout/_partial/left-col.ejs","hash":"4b60cc19c1ac2e261a0906184b1b435697a9c2c6","modified":1541146280059},{"_id":"themes/Axe/layout/_partial/mobile-nav.ejs","hash":"998e065e0ea49852281684fa6e2629780053abec","modified":1541397696454},{"_id":"themes/Axe/layout/_partial/mathjax.ejs","hash":"09f982c283160324de40cc6ae4267b2075edeed1","modified":1540895209312},{"_id":"themes/Axe/layout/_partial/search.ejs","hash":"6250423092d8c69d63e14d390fb3df30c6f77f1c","modified":1540895209312},{"_id":"themes/Axe/layout/_widget/Counter.ejs","hash":"472ca8ac00a7143904689b6ce9ea6defd03f0cfc","modified":1540895209312},{"_id":"themes/Axe/source/css/.DS_Store","hash":"fc5a428fe40854a0ba66b4cea196c6700a57cae7","modified":1540895209312},{"_id":"themes/Axe/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1540895209312},{"_id":"themes/Axe/source/css/_variables.styl","hash":"8b63ea3c7199524b9a1541075c6f8fb2c0d0ea3d","modified":1540895209312},{"_id":"themes/Axe/source/css/style.styl","hash":"7fe190e5e0105fd787d413fbab98a3e15408e026","modified":1540895209328},{"_id":"themes/Axe/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1540895209328},{"_id":"themes/Axe/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1540895209328},{"_id":"themes/Axe/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1540895209328},{"_id":"themes/Axe/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1540895209328},{"_id":"themes/Axe/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1540895209328},{"_id":"themes/Axe/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1540895209328},{"_id":"themes/Axe/source/fancybox/jquery.fancybox.css","hash":"96138eaddfbd305160ddcb98a5f08555ca6cb4ee","modified":1540895209328},{"_id":"themes/Axe/source/fancybox/jquery.fancybox.js","hash":"004bb0812414554ab48067792f09e978603253b6","modified":1540895209328},{"_id":"themes/Axe/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1540895209328},{"_id":"themes/Axe/source/img/bitbug_favicon.ico","hash":"072671fbd93cdfb13ff7c55fcc3de85f0317aea2","modified":1541151726742},{"_id":"themes/Axe/source/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1540895209328},{"_id":"themes/Axe/source/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1540895209328},{"_id":"themes/Axe/source/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1540895209328},{"_id":"themes/Axe/source/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1540895209328},{"_id":"themes/Axe/source/img/favicon.ico","hash":"072671fbd93cdfb13ff7c55fcc3de85f0317aea2","modified":1541580554855},{"_id":"themes/Axe/source/img/fuzi.jpg","hash":"98c6d82e703026617ef3a67c907600398a5798de","modified":1541144348867},{"_id":"themes/Axe/source/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1540895209328},{"_id":"themes/Axe/source/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1540895209328},{"_id":"themes/Axe/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1540895209328},{"_id":"themes/Axe/source/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1540895209328},{"_id":"themes/Axe/source/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1540895209328},{"_id":"themes/Axe/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1540895209328},{"_id":"themes/Axe/source/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1540895209328},{"_id":"themes/Axe/source/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1540895209328},{"_id":"themes/Axe/source/img/qq.png","hash":"93e6e87ec8cef56573a08c8f8fbb0bb53313354a","modified":1540895209328},{"_id":"themes/Axe/source/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1540895209328},{"_id":"themes/Axe/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1540895209328},{"_id":"themes/Axe/source/img/search.png","hash":"1ab76b03297ae2ce61ec59dd9bf8727f1fbbcedd","modified":1540895209343},{"_id":"themes/Axe/source/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1540895209343},{"_id":"themes/Axe/source/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1540895209343},{"_id":"themes/Axe/source/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1540895209343},{"_id":"themes/Axe/source/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1540895209343},{"_id":"themes/Axe/source/js/Counter.js","hash":"ef766189974c8a6bdd5de586e8bd7daf304f617d","modified":1540895209343},{"_id":"themes/Axe/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1540895209343},{"_id":"themes/Axe/source/js/jquery.lazyload.js","hash":"9c34c37b4dca82386648d364da913153d1db902e","modified":1540895209343},{"_id":"themes/Axe/source/js/main.js","hash":"928b4881340e10c1255aef8905b1b3e77aea3d97","modified":1540895209343},{"_id":"themes/Axe/source/js/mobile.js","hash":"387c047e661f04fbb5f5bfc4b2db617023e836ce","modified":1540895209343},{"_id":"themes/Axe/source/js/particles.js","hash":"b17f624ce45ef416cac4b0ca595d9a56149df2dc","modified":1541411887796},{"_id":"themes/Axe/source/js/pc.js","hash":"a5397d34a04084ee089b4b1e26457ab46ecea63e","modified":1540895209343},{"_id":"themes/Axe/layout/_partial/post/category.ejs","hash":"27fab3e6ccc41c075dc4c5ba3ca9e7f3b6247945","modified":1540895209312},{"_id":"themes/Axe/layout/_partial/post/date.ejs","hash":"06d8914b5aef73b5ec2cabb0105e275ff821b321","modified":1540895209312},{"_id":"themes/Axe/layout/_partial/post/nav.ejs","hash":"e1fd94b1e4655b20018be6c90fa1f9c523274a50","modified":1541400111419},{"_id":"themes/Axe/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1540895209312},{"_id":"themes/Axe/layout/_partial/post/share.ejs","hash":"b91ada27deced117d1a6524f7fd406f80281d38f","modified":1540895209312},{"_id":"themes/Axe/layout/_partial/post/tag.ejs","hash":"acf1b9d79ccec172881f9f0080e96667f4178885","modified":1540895209312},{"_id":"themes/Axe/layout/_partial/post/title.ejs","hash":"8fc5f697aed67921327caa275e2787122845f2b7","modified":1540895209312},{"_id":"themes/Axe/layout/_partial/post/viewCounter.ejs","hash":"f23d808e13dfcd1d637c07cc02dc8cf9d371192c","modified":1540895209312},{"_id":"themes/Axe/source/css/_partial/archive.styl","hash":"f8ffdd559619e67213444cace775e2f54e2c40f2","modified":1540895209312},{"_id":"themes/Axe/source/css/_partial/article.styl","hash":"dd58abb551a7a5c1b8650add80b4ad82eb987786","modified":1541671581615},{"_id":"themes/Axe/source/css/_partial/footer.styl","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1540895209312},{"_id":"themes/Axe/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1540895209312},{"_id":"themes/Axe/source/css/_partial/highlight.styl","hash":"8987b455f11a141d8507d722ad48241add1b0bf0","modified":1540895209312},{"_id":"themes/Axe/source/css/_partial/instagram.styl","hash":"8a7b07bf5ea2d3588c0019f722c245bb1a8696af","modified":1540895209312},{"_id":"themes/Axe/source/css/_partial/main.styl","hash":"bc1fb457d4efea4915347547c0457ed7e861f48a","modified":1541578090542},{"_id":"themes/Axe/source/css/_partial/mobile-slider.styl","hash":"e19c7fae6968ad3ea6cfc110900a991f9b5fce31","modified":1540895209312},{"_id":"themes/Axe/source/css/_partial/mobile.styl","hash":"931f3abd229e84b04d66169299fbb086cfc63acf","modified":1540895209312},{"_id":"themes/Axe/source/css/_partial/page.styl","hash":"720b5b169bc28ccba3794efce9b7cd39f243dec7","modified":1540895209312},{"_id":"themes/Axe/source/css/_partial/scroll.styl","hash":"5539a38f9acd603d453a0ea0d8ce10893cf83d22","modified":1540895209312},{"_id":"themes/Axe/source/css/_partial/share.styl","hash":"22697b9a9877ab9f018364feb57aeea4a8313c9a","modified":1540895209312},{"_id":"themes/Axe/source/css/_partial/tagcloud.styl","hash":"255e1ce6480050b5901ee69a2ac1178241f06d2c","modified":1540895209312},{"_id":"themes/Axe/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1540895209312},{"_id":"themes/Axe/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1540895209312},{"_id":"themes/Axe/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1540895209312},{"_id":"themes/Axe/source/css/fonts/fontawesome-webfont.eot","hash":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6","modified":1540895209328},{"_id":"themes/Axe/source/css/fonts/fontawesome-webfont.svgz","hash":"4bfdd33ed702e32ae01399fcc2652377f78e7626","modified":1540895209328},{"_id":"themes/Axe/source/css/fonts/fontawesome-webfont.ttf","hash":"1480b8101b02da9bc4c60341b5e185e63e585064","modified":1540895209328},{"_id":"themes/Axe/source/css/fonts/fontawesome-webfont.woff","hash":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832","modified":1540895209328},{"_id":"themes/Axe/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1540895209328},{"_id":"themes/Axe/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1540895209328},{"_id":"themes/Axe/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1540895209328},{"_id":"themes/Axe/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1540895209328},{"_id":"themes/Axe/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1540895209328},{"_id":"themes/Axe/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1540895209328},{"_id":"themes/Axe/source/css/fonts/fontawesome-webfont.svg","hash":"ba13657479b46daecb6336bfe376f84cef3ae58b","modified":1540895209328},{"_id":"public/categories/index.html","hash":"c11f21be90a66a98d9c49b3301e03a4cdeb397d1","modified":1541672231265},{"_id":"public/aboutMe/index.html","hash":"9dca540fcb2f074c728fa3ef82f7ad865fe235dd","modified":1541672231265},{"_id":"public/tags/index.html","hash":"faefc16a447766c0003e84d9261c5cfed025d687","modified":1541672231266},{"_id":"public/2018/11/07/react-native环境配置/index.html","hash":"a939caa62c3ed7d77abe1bb5f69d905cc2f97f45","modified":1541672231266},{"_id":"public/2018/11/05/react-native简介/index.html","hash":"9a9d07768410e9b25e4c9bd5cfdac0bbd3dbfb19","modified":1541672231266},{"_id":"public/archives/index.html","hash":"a3250236d129dfa27abb3c5e5126c9a47b859dfb","modified":1541672231266},{"_id":"public/archives/2018/index.html","hash":"dc6a1bcf7399b9ab541f7445264c344964d4b836","modified":1541672231266},{"_id":"public/archives/2018/11/index.html","hash":"43ddd3bfe8bb3405ef0f50909433595b9a882af7","modified":1541672231266},{"_id":"public/categories/react-native/index.html","hash":"1c1233f904fdfdfbe302aa54f055e821d77d59c1","modified":1541672231266},{"_id":"public/tags/react-native/index.html","hash":"6df4c767afa6eae2e2cab5150dc42043803e02fd","modified":1541672231266},{"_id":"public/tags/react/index.html","hash":"5bbd185e8b953c6811625a250d909d316c011b6e","modified":1541672231266},{"_id":"public/2018/11/08/react-native组件的生命周期/index.html","hash":"5e8e88942449d0ae628e9fa407cbaea4c810e84d","modified":1541672231266},{"_id":"public/index.html","hash":"ff5b1f2c8ac400a7ceaf7ff2a38431417a96d676","modified":1541672231266},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1541672231273},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1541672231273},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1541672231273},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1541672231274},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1541672231274},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1541672231274},{"_id":"public/img/bitbug_favicon.ico","hash":"072671fbd93cdfb13ff7c55fcc3de85f0317aea2","modified":1541672231274},{"_id":"public/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1541672231274},{"_id":"public/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1541672231274},{"_id":"public/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1541672231274},{"_id":"public/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1541672231274},{"_id":"public/img/favicon.ico","hash":"072671fbd93cdfb13ff7c55fcc3de85f0317aea2","modified":1541672231274},{"_id":"public/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1541672231274},{"_id":"public/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1541672231274},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1541672231274},{"_id":"public/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1541672231274},{"_id":"public/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1541672231274},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1541672231274},{"_id":"public/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1541672231275},{"_id":"public/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1541672231275},{"_id":"public/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1541672231275},{"_id":"public/img/qq.png","hash":"93e6e87ec8cef56573a08c8f8fbb0bb53313354a","modified":1541672231275},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1541672231275},{"_id":"public/img/search.png","hash":"1ab76b03297ae2ce61ec59dd9bf8727f1fbbcedd","modified":1541672231275},{"_id":"public/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1541672231275},{"_id":"public/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1541672231275},{"_id":"public/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1541672231275},{"_id":"public/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1541672231275},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6","modified":1541672231275},{"_id":"public/css/fonts/fontawesome-webfont.svgz","hash":"4bfdd33ed702e32ae01399fcc2652377f78e7626","modified":1541672231275},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"1480b8101b02da9bc4c60341b5e185e63e585064","modified":1541672231275},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832","modified":1541672231275},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1541672231275},{"_id":"public/img/fuzi.jpg","hash":"98c6d82e703026617ef3a67c907600398a5798de","modified":1541672231747},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"ba13657479b46daecb6336bfe376f84cef3ae58b","modified":1541672231747},{"_id":"public/fancybox/jquery.fancybox.css","hash":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20","modified":1541672231750},{"_id":"public/js/Counter.js","hash":"6697d5dfba2700c059722b62d856d4c86c73031a","modified":1541672231750},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1541672231750},{"_id":"public/js/jquery.lazyload.js","hash":"c11a2e7b330d16d06feabd0a8477099adf9d6799","modified":1541672231750},{"_id":"public/js/mobile.js","hash":"b68cc01d24e80973c48205f551da87f3f3427644","modified":1541672231750},{"_id":"public/js/main.js","hash":"5e92a3694111e5ae5aca37c79157218d35f2e63b","modified":1541672231750},{"_id":"public/js/pc.js","hash":"fdbc039fc9ffa70815b5fc4daaa587ae29693f10","modified":1541672231750},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1541672231750},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1541672231750},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1541672231750},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1541672231750},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1541672231750},{"_id":"public/css/style.css","hash":"a6c3a554338f25ea5ec05d3e7786698c51167de2","modified":1541672231750},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1541672231783},{"_id":"public/js/particles.js","hash":"c2e991597d14ab770467aacd299e88ea108c2576","modified":1541672231801},{"_id":"public/fancybox/jquery.fancybox.js","hash":"a82597493d75ea989ca586e09173cff332efe41e","modified":1541672231802}],"Category":[{"name":"react-native","_id":"cjo8fuai90004hgq8vglfhie4"}],"Data":[],"Page":[{"title":"categories","date":"2018-11-05T08:35:31.000Z","_content":"category_map:\n        hexo:hexo\n        react-native:react-native\n        ubuntu:ubuntu\n        computer vision: computer-vision","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-11-05 16:35:31\n---\ncategory_map:\n        hexo:hexo\n        react-native:react-native\n        ubuntu:ubuntu\n        computer vision: computer-vision","updated":"2018-11-05T08:47:20.144Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjo8fuai50001hgq8qgon0n19","content":"<p>category_map:<br>        hexo:hexo<br>        react-native:react-native<br>        ubuntu:ubuntu<br>        computer vision: computer-vision</p>\n","site":{"data":{}},"excerpt":"","more":"<p>category_map:<br>        hexo:hexo<br>        react-native:react-native<br>        ubuntu:ubuntu<br>        computer vision: computer-vision</p>\n"},{"title":"aboutMe","date":"2018-11-05T06:16:20.000Z","_content":"# 关于作者\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"aboutMe/index.md","raw":"---\ntitle: aboutMe\ndate: 2018-11-05 14:16:20\n\n---\n# 关于作者\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","updated":"2018-11-05T09:07:45.554Z","path":"aboutMe/index.html","comments":1,"layout":"page","_id":"cjo8fuai70003hgq88u5pqsnd","content":"<h1 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"tags","date":"2018-11-05T08:31:51.000Z","_content":"tag_map:\n\treact-native:react-native\n\tlinux:linux\n\tubuntu:ubuntu\n\tvim:vim\n\ttmux:tmux\n\thexo:hexo\n\tyolo:yolo\n\topencv:opencv\n\tcomputer vision:computer-vision\n","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-11-05 16:31:51\n---\ntag_map:\n\treact-native:react-native\n\tlinux:linux\n\tubuntu:ubuntu\n\tvim:vim\n\ttmux:tmux\n\thexo:hexo\n\tyolo:yolo\n\topencv:opencv\n\tcomputer vision:computer-vision\n","updated":"2018-11-05T08:48:32.435Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjo8fuaic0007hgq89p6ei0j5","content":"<p>tag_map:<br>    react-native:react-native<br>    linux:linux<br>    ubuntu:ubuntu<br>    vim:vim<br>    tmux:tmux<br>    hexo:hexo<br>    yolo:yolo<br>    opencv:opencv<br>    computer vision:computer-vision</p>\n","site":{"data":{}},"excerpt":"","more":"<p>tag_map:<br>    react-native:react-native<br>    linux:linux<br>    ubuntu:ubuntu<br>    vim:vim<br>    tmux:tmux<br>    hexo:hexo<br>    yolo:yolo<br>    opencv:opencv<br>    computer vision:computer-vision</p>\n"}],"Post":[{"title":"react-native环境配置","date":"2018-11-07T14:41:17.000Z","type":"tags","_content":"\n### react-native window开发环境搭建\n\n一、安装JDK\n\n1. 从 [Java官网](https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html) 下载JDK并安装。\n\n2. 安装成功可以用java -version查看版本信息，或用 java -c 检测是否安装成功\n <!-- more -->\n\n3. 配置Java的环境变量\n\n   * 添加环境变量JAVA_HOME = C:\\Program Files\\Java\\jdk1.8.0_45;\n\n   *  Path+=%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;\n\n   * CLASSPATH+=%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;\n\n\nJAVA_HOME变量：\n\n![JAVA_HOME](http://images2015.cnblogs.com/blog/546421/201607/546421-20160709102408874-1736443714.png)\n\n​\t\n\nCLASSPATH变量\n\n![CLASSPATH变量](http://images2015.cnblogs.com/blog/546421/201607/546421-20160709102528280-1866646025.png)\n\n二、安装 android SDK\n\n1. 下载 android sdk 并安装；\n\n2. 安装完成后根据 react-native官网 安装 SDK Tools;\n\n3. 配置android环境变量\n\n * 添加 ANDROID_HOME 变量\n ![android-home](http://images2015.cnblogs.com/blog/546421/201607/546421-20160709103101952-2112122131.png)\n\n* 在 Path 变量里添加 %ANDROID_HOME%\\tools;%ANDROID_HOME%\\platform-tools;\n\n三、安装node.js git 环境\n\n四、安装react-native 的命令行工具 react-native-cli\n\n```\nnpm install react-native-cli -g\n```\n\n***备注：*** 官网讲需要安装 python 环境，但是个人感觉好像没用，一直也没安装过，所以安不安装看个人；\n\n\n### 创建我们的项目\n\n1. 生成项目\n```\nreact-native init myApp\n```\n\n\n2. 安装项目依赖包\n```\nnpm install\n```\n\n3. 连接真机或者模拟机，在终端运行 adb devices 查看是否连接设备，真机需要打开开发者模式，然后运行 react-native run-android 生成 apk 安装包。\n\n\n4. 运行 package.json ，命令行运行\n\n```\nreact-native start 或者  npm start\n```\n\n\n5. 打开手机上我们安装的app，会出现如下所示的情况 :\n\n![error](http://images2015.cnblogs.com/blog/546421/201607/546421-20160709113415499-1546806111.png)\n\n\n这时候摇一摇手机，点击Dev Settings后，点击Debug server host & port for device,设置IP和端口\n\n![reload](http://images2015.cnblogs.com/blog/546421/201607/546421-20160709114104467-1570314774.jpg)\n\n再次摇一摇手机，选择Reload ，程序就运行起来，出现Welcome to React Native！\n\n![sucess](http://images2015.cnblogs.com/blog/546421/201607/546421-20160709114253046-223755573.png)\n\n现在就可以尽情的写我们的 code 了。。。\n\n","source":"_posts/react-native环境配置.md","raw":"---\ntitle: react-native环境配置\ndate: 2018-11-07 22:41:17\ntype: 'tags'\ntags:                 \n- react-native\ncategories:\n- react-native\n---\n\n### react-native window开发环境搭建\n\n一、安装JDK\n\n1. 从 [Java官网](https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html) 下载JDK并安装。\n\n2. 安装成功可以用java -version查看版本信息，或用 java -c 检测是否安装成功\n <!-- more -->\n\n3. 配置Java的环境变量\n\n   * 添加环境变量JAVA_HOME = C:\\Program Files\\Java\\jdk1.8.0_45;\n\n   *  Path+=%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;\n\n   * CLASSPATH+=%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;\n\n\nJAVA_HOME变量：\n\n![JAVA_HOME](http://images2015.cnblogs.com/blog/546421/201607/546421-20160709102408874-1736443714.png)\n\n​\t\n\nCLASSPATH变量\n\n![CLASSPATH变量](http://images2015.cnblogs.com/blog/546421/201607/546421-20160709102528280-1866646025.png)\n\n二、安装 android SDK\n\n1. 下载 android sdk 并安装；\n\n2. 安装完成后根据 react-native官网 安装 SDK Tools;\n\n3. 配置android环境变量\n\n * 添加 ANDROID_HOME 变量\n ![android-home](http://images2015.cnblogs.com/blog/546421/201607/546421-20160709103101952-2112122131.png)\n\n* 在 Path 变量里添加 %ANDROID_HOME%\\tools;%ANDROID_HOME%\\platform-tools;\n\n三、安装node.js git 环境\n\n四、安装react-native 的命令行工具 react-native-cli\n\n```\nnpm install react-native-cli -g\n```\n\n***备注：*** 官网讲需要安装 python 环境，但是个人感觉好像没用，一直也没安装过，所以安不安装看个人；\n\n\n### 创建我们的项目\n\n1. 生成项目\n```\nreact-native init myApp\n```\n\n\n2. 安装项目依赖包\n```\nnpm install\n```\n\n3. 连接真机或者模拟机，在终端运行 adb devices 查看是否连接设备，真机需要打开开发者模式，然后运行 react-native run-android 生成 apk 安装包。\n\n\n4. 运行 package.json ，命令行运行\n\n```\nreact-native start 或者  npm start\n```\n\n\n5. 打开手机上我们安装的app，会出现如下所示的情况 :\n\n![error](http://images2015.cnblogs.com/blog/546421/201607/546421-20160709113415499-1546806111.png)\n\n\n这时候摇一摇手机，点击Dev Settings后，点击Debug server host & port for device,设置IP和端口\n\n![reload](http://images2015.cnblogs.com/blog/546421/201607/546421-20160709114104467-1570314774.jpg)\n\n再次摇一摇手机，选择Reload ，程序就运行起来，出现Welcome to React Native！\n\n![sucess](http://images2015.cnblogs.com/blog/546421/201607/546421-20160709114253046-223755573.png)\n\n现在就可以尽情的写我们的 code 了。。。\n\n","slug":"react-native环境配置","published":1,"updated":"2018-11-08T10:13:59.349Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo8fuai10000hgq8euj1khj3","content":"<h3 id=\"react-native-window开发环境搭建\"><a href=\"#react-native-window开发环境搭建\" class=\"headerlink\" title=\"react-native window开发环境搭建\"></a>react-native window开发环境搭建</h3><p>一、安装JDK</p>\n<ol>\n<li><p>从 <a href=\"https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"noopener\">Java官网</a> 下载JDK并安装。</p>\n</li>\n<li><p>安装成功可以用java -version查看版本信息，或用 java -c 检测是否安装成功</p>\n<a id=\"more\"></a>\n</li>\n<li><p>配置Java的环境变量</p>\n<ul>\n<li><p>添加环境变量JAVA_HOME = C:\\Program Files\\Java\\jdk1.8.0_45;</p>\n</li>\n<li><p>Path+=%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;</p>\n</li>\n<li><p>CLASSPATH+=%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;</p>\n</li>\n</ul>\n</li>\n</ol>\n<p>JAVA_HOME变量：</p>\n<p><img src=\"http://images2015.cnblogs.com/blog/546421/201607/546421-20160709102408874-1736443714.png\" alt=\"JAVA_HOME\"></p>\n<p>​    </p>\n<p>CLASSPATH变量</p>\n<p><img src=\"http://images2015.cnblogs.com/blog/546421/201607/546421-20160709102528280-1866646025.png\" alt=\"CLASSPATH变量\"></p>\n<p>二、安装 android SDK</p>\n<ol>\n<li><p>下载 android sdk 并安装；</p>\n</li>\n<li><p>安装完成后根据 react-native官网 安装 SDK Tools;</p>\n</li>\n<li><p>配置android环境变量</p>\n<ul>\n<li>添加 ANDROID_HOME 变量<br><img src=\"http://images2015.cnblogs.com/blog/546421/201607/546421-20160709103101952-2112122131.png\" alt=\"android-home\"></li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>在 Path 变量里添加 %ANDROID_HOME%\\tools;%ANDROID_HOME%\\platform-tools;</li>\n</ul>\n<p>三、安装node.js git 环境</p>\n<p>四、安装react-native 的命令行工具 react-native-cli</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install react-native-cli -g</span><br></pre></td></tr></table></figure>\n<p><strong><em>备注：</em></strong> 官网讲需要安装 python 环境，但是个人感觉好像没用，一直也没安装过，所以安不安装看个人；</p>\n<h3 id=\"创建我们的项目\"><a href=\"#创建我们的项目\" class=\"headerlink\" title=\"创建我们的项目\"></a>创建我们的项目</h3><ol>\n<li><p>生成项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-native init myApp</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装项目依赖包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>连接真机或者模拟机，在终端运行 adb devices 查看是否连接设备，真机需要打开开发者模式，然后运行 react-native run-android 生成 apk 安装包。</p>\n</li>\n</ol>\n<ol start=\"4\">\n<li>运行 package.json ，命令行运行</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-native start 或者  npm start</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>打开手机上我们安装的app，会出现如下所示的情况 :</li>\n</ol>\n<p><img src=\"http://images2015.cnblogs.com/blog/546421/201607/546421-20160709113415499-1546806111.png\" alt=\"error\"></p>\n<p>这时候摇一摇手机，点击Dev Settings后，点击Debug server host &amp; port for device,设置IP和端口</p>\n<p><img src=\"http://images2015.cnblogs.com/blog/546421/201607/546421-20160709114104467-1570314774.jpg\" alt=\"reload\"></p>\n<p>再次摇一摇手机，选择Reload ，程序就运行起来，出现Welcome to React Native！</p>\n<p><img src=\"http://images2015.cnblogs.com/blog/546421/201607/546421-20160709114253046-223755573.png\" alt=\"sucess\"></p>\n<p>现在就可以尽情的写我们的 code 了。。。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"react-native-window开发环境搭建\"><a href=\"#react-native-window开发环境搭建\" class=\"headerlink\" title=\"react-native window开发环境搭建\"></a>react-native window开发环境搭建</h3><p>一、安装JDK</p>\n<ol>\n<li><p>从 <a href=\"https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"noopener\">Java官网</a> 下载JDK并安装。</p>\n</li>\n<li><p>安装成功可以用java -version查看版本信息，或用 java -c 检测是否安装成功</p>","more":"</li>\n<li><p>配置Java的环境变量</p>\n<ul>\n<li><p>添加环境变量JAVA_HOME = C:\\Program Files\\Java\\jdk1.8.0_45;</p>\n</li>\n<li><p>Path+=%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;</p>\n</li>\n<li><p>CLASSPATH+=%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;</p>\n</li>\n</ul>\n</li>\n</ol>\n<p>JAVA_HOME变量：</p>\n<p><img src=\"http://images2015.cnblogs.com/blog/546421/201607/546421-20160709102408874-1736443714.png\" alt=\"JAVA_HOME\"></p>\n<p>​    </p>\n<p>CLASSPATH变量</p>\n<p><img src=\"http://images2015.cnblogs.com/blog/546421/201607/546421-20160709102528280-1866646025.png\" alt=\"CLASSPATH变量\"></p>\n<p>二、安装 android SDK</p>\n<ol>\n<li><p>下载 android sdk 并安装；</p>\n</li>\n<li><p>安装完成后根据 react-native官网 安装 SDK Tools;</p>\n</li>\n<li><p>配置android环境变量</p>\n<ul>\n<li>添加 ANDROID_HOME 变量<br><img src=\"http://images2015.cnblogs.com/blog/546421/201607/546421-20160709103101952-2112122131.png\" alt=\"android-home\"></li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>在 Path 变量里添加 %ANDROID_HOME%\\tools;%ANDROID_HOME%\\platform-tools;</li>\n</ul>\n<p>三、安装node.js git 环境</p>\n<p>四、安装react-native 的命令行工具 react-native-cli</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install react-native-cli -g</span><br></pre></td></tr></table></figure>\n<p><strong><em>备注：</em></strong> 官网讲需要安装 python 环境，但是个人感觉好像没用，一直也没安装过，所以安不安装看个人；</p>\n<h3 id=\"创建我们的项目\"><a href=\"#创建我们的项目\" class=\"headerlink\" title=\"创建我们的项目\"></a>创建我们的项目</h3><ol>\n<li><p>生成项目</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-native init myApp</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装项目依赖包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>连接真机或者模拟机，在终端运行 adb devices 查看是否连接设备，真机需要打开开发者模式，然后运行 react-native run-android 生成 apk 安装包。</p>\n</li>\n</ol>\n<ol start=\"4\">\n<li>运行 package.json ，命令行运行</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-native start 或者  npm start</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>打开手机上我们安装的app，会出现如下所示的情况 :</li>\n</ol>\n<p><img src=\"http://images2015.cnblogs.com/blog/546421/201607/546421-20160709113415499-1546806111.png\" alt=\"error\"></p>\n<p>这时候摇一摇手机，点击Dev Settings后，点击Debug server host &amp; port for device,设置IP和端口</p>\n<p><img src=\"http://images2015.cnblogs.com/blog/546421/201607/546421-20160709114104467-1570314774.jpg\" alt=\"reload\"></p>\n<p>再次摇一摇手机，选择Reload ，程序就运行起来，出现Welcome to React Native！</p>\n<p><img src=\"http://images2015.cnblogs.com/blog/546421/201607/546421-20160709114253046-223755573.png\" alt=\"sucess\"></p>\n<p>现在就可以尽情的写我们的 code 了。。。</p>"},{"title":"react-native简介","date":"2018-11-05T07:19:45.000Z","type":"tags","_content":"### 用 React 编写移动应用 React Native <img src='https://www.oschina.net/build/oschina/project/stylesheets/imgs/badge_recommend.svg' width=\"20\" height=\"20\"/>\n**ReactNative ** 可以基于目前大热的开源JavaScript库React.js来开发iOS和Android原生App。而且React Native已经用于生产环境——Facebook Groups iOS 应用就是基于它开发的。\n\n <!-- more -->\n![react-native](http://static.oschina.net/uploads/img/201503/28132016_EqCq.jpg)\n\nReact Native的原理是在JavaScript中用React抽象操作系统原生的UI组件，代替DOM元素来渲染，比如以 `<View>` 取代 `<div>`，以`<Image>`替代`<img>`等。\n\n在幕后，React Native在主线程之外，在另一个背景线程里运行JavaScript引擎，两个线程之间通过一批量化的async消息协议来通信（有一个专门的React插件）。\n\nUI方面React Native提供跨平台的类似Flexbox的布局系统，还支持CSS子集。可以用JSX或者普通JavaScript语言，还有[CoffeeScript](https://coffeescript.org/ 'CoffeeScript') 和 [TypeScript](http://www.typescriptlang.org/ 'TypeScript') 来开发。\n\n更好的是，由于基于Web技术，开发起来可以像在浏览器里那样随时在仿真程序中查看应用运行情况，刷新一下就行，无需编译，爽吧。\n\nReact Native比起标准Web开发或原生开发能够带来的三大好处：\n1.手势识别：基于Web技术（HTML5/JavaScript）构建的移动应用经常被抱怨缺乏及时响应。而基于原生UI的React Native能避免这些问题从而实现实时响应。\n2.原生组件：使用HTML5/JavaScript实现的组件比起原生组件总是让人感觉差一截，而React Native由于采用了原生UI组件自然没有此问题。\n3.样式和布局：iOS、Android和基于Web的应用各自有不同的样式和布局机制。React Native通过一个基于FlexBox的布局引擎在所有移动平台上实现了一致的跨平台样式和布局方案。\n\n触摸事件处理：\n\n```\nimport React, { Component } from 'react';\nimport { ScrollView, TouchableHighlight, Text, StyleSheet } from 'react-native';\n\nclass TouchDemo extends Component{\n  render() {\n    return (\n      <ScrollView>\n        <TouchableHighlight onPress={() => console.log('pressed')}>\n          <Text style={styles.txt}>Proper Touch Handling</Text>\n        </TouchableHighlight>\n      </ScrollView>\n    );\n  },\n};\nconst styles = StyleSheet.create({\n  txt:{\n    fontSize: 14,\n    color: '#333333'\n  }\n})\n\n```\n","source":"_posts/react-native简介.md","raw":"---\ntitle: react-native简介\ndate: 2018-11-05 15:19:45\ntype: 'tags'\ntags:                 \n- react-native\ncategories:\n- react-native\n---\n### 用 React 编写移动应用 React Native <img src='https://www.oschina.net/build/oschina/project/stylesheets/imgs/badge_recommend.svg' width=\"20\" height=\"20\"/>\n**ReactNative ** 可以基于目前大热的开源JavaScript库React.js来开发iOS和Android原生App。而且React Native已经用于生产环境——Facebook Groups iOS 应用就是基于它开发的。\n\n <!-- more -->\n![react-native](http://static.oschina.net/uploads/img/201503/28132016_EqCq.jpg)\n\nReact Native的原理是在JavaScript中用React抽象操作系统原生的UI组件，代替DOM元素来渲染，比如以 `<View>` 取代 `<div>`，以`<Image>`替代`<img>`等。\n\n在幕后，React Native在主线程之外，在另一个背景线程里运行JavaScript引擎，两个线程之间通过一批量化的async消息协议来通信（有一个专门的React插件）。\n\nUI方面React Native提供跨平台的类似Flexbox的布局系统，还支持CSS子集。可以用JSX或者普通JavaScript语言，还有[CoffeeScript](https://coffeescript.org/ 'CoffeeScript') 和 [TypeScript](http://www.typescriptlang.org/ 'TypeScript') 来开发。\n\n更好的是，由于基于Web技术，开发起来可以像在浏览器里那样随时在仿真程序中查看应用运行情况，刷新一下就行，无需编译，爽吧。\n\nReact Native比起标准Web开发或原生开发能够带来的三大好处：\n1.手势识别：基于Web技术（HTML5/JavaScript）构建的移动应用经常被抱怨缺乏及时响应。而基于原生UI的React Native能避免这些问题从而实现实时响应。\n2.原生组件：使用HTML5/JavaScript实现的组件比起原生组件总是让人感觉差一截，而React Native由于采用了原生UI组件自然没有此问题。\n3.样式和布局：iOS、Android和基于Web的应用各自有不同的样式和布局机制。React Native通过一个基于FlexBox的布局引擎在所有移动平台上实现了一致的跨平台样式和布局方案。\n\n触摸事件处理：\n\n```\nimport React, { Component } from 'react';\nimport { ScrollView, TouchableHighlight, Text, StyleSheet } from 'react-native';\n\nclass TouchDemo extends Component{\n  render() {\n    return (\n      <ScrollView>\n        <TouchableHighlight onPress={() => console.log('pressed')}>\n          <Text style={styles.txt}>Proper Touch Handling</Text>\n        </TouchableHighlight>\n      </ScrollView>\n    );\n  },\n};\nconst styles = StyleSheet.create({\n  txt:{\n    fontSize: 14,\n    color: '#333333'\n  }\n})\n\n```\n","slug":"react-native简介","published":1,"updated":"2018-11-05T08:51:04.772Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjo8fuai60002hgq8waus9n8u","content":"<h3 id=\"用-React-编写移动应用-React-Native\"><a href=\"#用-React-编写移动应用-React-Native\" class=\"headerlink\" title=\"用 React 编写移动应用 React Native \"></a>用 React 编写移动应用 React Native <img src=\"https://www.oschina.net/build/oschina/project/stylesheets/imgs/badge_recommend.svg\" width=\"20\" height=\"20\"></h3><p><strong>ReactNative </strong> 可以基于目前大热的开源JavaScript库React.js来开发iOS和Android原生App。而且React Native已经用于生产环境——Facebook Groups iOS 应用就是基于它开发的。</p>\n <a id=\"more\"></a>\n<p><img src=\"http://static.oschina.net/uploads/img/201503/28132016_EqCq.jpg\" alt=\"react-native\"></p>\n<p>React Native的原理是在JavaScript中用React抽象操作系统原生的UI组件，代替DOM元素来渲染，比如以 <code>&lt;View&gt;</code> 取代 <code>&lt;div&gt;</code>，以<code>&lt;Image&gt;</code>替代<code>&lt;img&gt;</code>等。</p>\n<p>在幕后，React Native在主线程之外，在另一个背景线程里运行JavaScript引擎，两个线程之间通过一批量化的async消息协议来通信（有一个专门的React插件）。</p>\n<p>UI方面React Native提供跨平台的类似Flexbox的布局系统，还支持CSS子集。可以用JSX或者普通JavaScript语言，还有<a href=\"https://coffeescript.org/\" title=\"CoffeeScript\" target=\"_blank\" rel=\"noopener\">CoffeeScript</a> 和 <a href=\"http://www.typescriptlang.org/\" title=\"TypeScript\" target=\"_blank\" rel=\"noopener\">TypeScript</a> 来开发。</p>\n<p>更好的是，由于基于Web技术，开发起来可以像在浏览器里那样随时在仿真程序中查看应用运行情况，刷新一下就行，无需编译，爽吧。</p>\n<p>React Native比起标准Web开发或原生开发能够带来的三大好处：<br>1.手势识别：基于Web技术（HTML5/JavaScript）构建的移动应用经常被抱怨缺乏及时响应。而基于原生UI的React Native能避免这些问题从而实现实时响应。<br>2.原生组件：使用HTML5/JavaScript实现的组件比起原生组件总是让人感觉差一截，而React Native由于采用了原生UI组件自然没有此问题。<br>3.样式和布局：iOS、Android和基于Web的应用各自有不同的样式和布局机制。React Native通过一个基于FlexBox的布局引擎在所有移动平台上实现了一致的跨平台样式和布局方案。</p>\n<p>触摸事件处理：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\">import &#123; ScrollView, TouchableHighlight, Text, StyleSheet &#125; from &apos;react-native&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class TouchDemo extends Component&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;ScrollView&gt;</span><br><span class=\"line\">        &lt;TouchableHighlight onPress=&#123;() =&gt; console.log(&apos;pressed&apos;)&#125;&gt;</span><br><span class=\"line\">          &lt;Text style=&#123;styles.txt&#125;&gt;Proper Touch Handling&lt;/Text&gt;</span><br><span class=\"line\">        &lt;/TouchableHighlight&gt;</span><br><span class=\"line\">      &lt;/ScrollView&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">const styles = StyleSheet.create(&#123;</span><br><span class=\"line\">  txt:&#123;</span><br><span class=\"line\">    fontSize: 14,</span><br><span class=\"line\">    color: &apos;#333333&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"用-React-编写移动应用-React-Native\"><a href=\"#用-React-编写移动应用-React-Native\" class=\"headerlink\" title=\"用 React 编写移动应用 React Native \"></a>用 React 编写移动应用 React Native <img src=\"https://www.oschina.net/build/oschina/project/stylesheets/imgs/badge_recommend.svg\" width=\"20\" height=\"20\"></h3><p><strong>ReactNative </strong> 可以基于目前大热的开源JavaScript库React.js来开发iOS和Android原生App。而且React Native已经用于生产环境——Facebook Groups iOS 应用就是基于它开发的。</p>","more":"<p><img src=\"http://static.oschina.net/uploads/img/201503/28132016_EqCq.jpg\" alt=\"react-native\"></p>\n<p>React Native的原理是在JavaScript中用React抽象操作系统原生的UI组件，代替DOM元素来渲染，比如以 <code>&lt;View&gt;</code> 取代 <code>&lt;div&gt;</code>，以<code>&lt;Image&gt;</code>替代<code>&lt;img&gt;</code>等。</p>\n<p>在幕后，React Native在主线程之外，在另一个背景线程里运行JavaScript引擎，两个线程之间通过一批量化的async消息协议来通信（有一个专门的React插件）。</p>\n<p>UI方面React Native提供跨平台的类似Flexbox的布局系统，还支持CSS子集。可以用JSX或者普通JavaScript语言，还有<a href=\"https://coffeescript.org/\" title=\"CoffeeScript\" target=\"_blank\" rel=\"noopener\">CoffeeScript</a> 和 <a href=\"http://www.typescriptlang.org/\" title=\"TypeScript\" target=\"_blank\" rel=\"noopener\">TypeScript</a> 来开发。</p>\n<p>更好的是，由于基于Web技术，开发起来可以像在浏览器里那样随时在仿真程序中查看应用运行情况，刷新一下就行，无需编译，爽吧。</p>\n<p>React Native比起标准Web开发或原生开发能够带来的三大好处：<br>1.手势识别：基于Web技术（HTML5/JavaScript）构建的移动应用经常被抱怨缺乏及时响应。而基于原生UI的React Native能避免这些问题从而实现实时响应。<br>2.原生组件：使用HTML5/JavaScript实现的组件比起原生组件总是让人感觉差一截，而React Native由于采用了原生UI组件自然没有此问题。<br>3.样式和布局：iOS、Android和基于Web的应用各自有不同的样式和布局机制。React Native通过一个基于FlexBox的布局引擎在所有移动平台上实现了一致的跨平台样式和布局方案。</p>\n<p>触摸事件处理：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\">import &#123; ScrollView, TouchableHighlight, Text, StyleSheet &#125; from &apos;react-native&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">class TouchDemo extends Component&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;ScrollView&gt;</span><br><span class=\"line\">        &lt;TouchableHighlight onPress=&#123;() =&gt; console.log(&apos;pressed&apos;)&#125;&gt;</span><br><span class=\"line\">          &lt;Text style=&#123;styles.txt&#125;&gt;Proper Touch Handling&lt;/Text&gt;</span><br><span class=\"line\">        &lt;/TouchableHighlight&gt;</span><br><span class=\"line\">      &lt;/ScrollView&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">const styles = StyleSheet.create(&#123;</span><br><span class=\"line\">  txt:&#123;</span><br><span class=\"line\">    fontSize: 14,</span><br><span class=\"line\">    color: &apos;#333333&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>"},{"title":"react-native组件的生命周期","date":"2018-11-08T09:47:23.000Z","type":"tags","_content":"\n## 概述\n所谓生命周期，就是一个对象从开始生成到最后消亡所经历的状态，理解生命周期，是合理开发的关键。RN 组件的生命周期整理如下图：\n\n<!--more-->\n\n![生命周期](https://img.race604.com/3-3-component-lifecycle.jpg)\n\n如图，可以把组件生命周期大致分为三个阶段：\n\n* 第一阶段：是组件第一次绘制阶段，如图中的上面虚线框内，在这里完成了组件的加载和初始化；\n* 第二阶段：是组件在运行和交互阶段，如图中左下角虚线框，这个阶段组件可以处理用户交互，或者接收事件更新界面；\n* 第三阶段：是组件卸载消亡的阶段，如图中右下角的虚线框中，这里做一些组件的清理工作。\n\n## 生命周期回调函数\n\n下面来详细介绍生命周期中的各回调函数。\n\n##### *getDefaultProps*\n在组件创建之前，会先调用 getDefaultProps()，这是全局调用一次，严格地来说，这不是组件的生命周期的一部分。在组件被创建并加载候，首先调用 getInitialState()，来初始化组件的状态。\n\n##### *componentWillMount*\n然后，准备加载组件，会调用 componentWillMount(), 这个函数调用时机是在组件创建，并初始化了状态之后，在第一次绘制 render() 之前。可以在这里做一些业务初始化操作，也可以设置组件状态。这个函数在整个生命周期中只被调用一次。\n\n##### *componentDidMount*\n在组件第一次绘制之后，会调用 componentDidMount()，通知组件已经加载完成。这个函数调用的时候，其虚拟 DOM 已经构建完成，你可以在这个函数开始获取其中的元素或者子组件了。需要注意的是，RN 框架是先调用子组件的 componentDidMount()，然后调用父组件的函数。从这个函数开始，就可以和 JS 其他框架交互了，例如设置计时 setTimeout 或者 setInterval，或者发起网络请求。这个函数也是只被调用一次。这个函数之后，就进入了稳定运行状态，等待事件触发.\n\n##### *componentWillReceiveProps*\n如果组件收到新的属性（props），就会调用 componentWillReceiveProps(),输入参数 nextProps 是即将被设置的属性，旧的属性还是可以通过 this.props 来获取。在这个回调函数里面，你可以根据属性的变化，通过调用 this.setState() 来更新你的组件状态，这里调用更新状态是安全的，并不会触发额外的 render() 调用。如下：\n```\ncomponentWillReceiveProps(nextProps) {  \n  this.setState({\n    oldProps: nextProps\n  });\n}\n```\n\n##### *shouldComponentUpdate*\n当组件接收到新的属性和状态改变的话，都会触发调用 shouldComponentUpdate(…)，输入参数 nextProps 和上面的 componentWillReceiveProps 函数一样，nextState 表示组件即将更新的状态值。这个函数的返回值决定是否需要更新组件，如果 true 表示需要更新，继续走后面的更新流程。否者，则不更新，直接进入等待状态。\n\n默认情况下，这个函数永远返回 true 用来保证数据变化的时候 UI 能够同步更新。在大型项目中，你可以自己重载这个函数，通过检查变化前后属性和状态，来决定 UI 是否需要更新，能有效提高应用性能。\n\n##### *componentWillUpdate*\n如果组件状态或者属性改变，并且上面的 shouldComponentUpdate(…) 返回为 true，就会开始准更新组件，并调用 componentWillUpdate()，输入参数与 shouldComponentUpdate 一样，在这个回调中，可以做一些在更新界面之前要做的事情。需要特别注意的是，在这个函数里面，你就不能使用 this.setState 来修改状态。这个函数调用之后，就会把 nextProps 和 nextState 分别设置到 this.props 和 this.state 中。紧接着这个函数，就会调用 render() 来更新界面了。\n\n##### *componentDidUpdate*\n调用了 render() 更新完成界面之后，会调用 componentDidUpdate() 来得到通知，因为到这里已经完成了属性和状态的更新了，此函数的输入参数变成了 prevProps 和 prevState。\n\n##### *componentWillUnmount*\n当组件要被从界面上移除的时候，就会调用 componentWillUnmount(),在这个函数中，可以做一些组件相关的清理工作，例如取消计时器、网络请求等.\n\n## 总结\n到这里，RN 的组件的完整的生命都介绍完了，在回头来看一下前面的图，就比较清晰了，把生命周期的回调函数总结成如下表格：\n\n|生命周期|\t调用次数\t|能否使用 setSate()|\n|-------|-----|-----|\n|getDefaultProps|\t1(全局调用一次)\t|否|\n|getInitialState\t|1\t|否|\n|componentWillMount|\t1\t|是|\n|render\t|>=1|\t否|\n|componentDidMount\t|1\t|是|\n|componentWillReceiveProps|\t>=0\t|是|\n|shouldComponentUpdate|\t>=0\t|否|\n|componentWillUpdate\t|>=0\t|否|\n|componentDidUpdate\t|>=0|\t否|\n|componentWillUnmount|\t1| 否|","source":"_posts/react-native组件的生命周期.md","raw":"---\ntitle: react-native组件的生命周期\ndate: 2018-11-08 17:47:23\ntype: 'tags'\ntags:                 \n- react-native\n- react\ncategories:\n- react-native\n---\n\n## 概述\n所谓生命周期，就是一个对象从开始生成到最后消亡所经历的状态，理解生命周期，是合理开发的关键。RN 组件的生命周期整理如下图：\n\n<!--more-->\n\n![生命周期](https://img.race604.com/3-3-component-lifecycle.jpg)\n\n如图，可以把组件生命周期大致分为三个阶段：\n\n* 第一阶段：是组件第一次绘制阶段，如图中的上面虚线框内，在这里完成了组件的加载和初始化；\n* 第二阶段：是组件在运行和交互阶段，如图中左下角虚线框，这个阶段组件可以处理用户交互，或者接收事件更新界面；\n* 第三阶段：是组件卸载消亡的阶段，如图中右下角的虚线框中，这里做一些组件的清理工作。\n\n## 生命周期回调函数\n\n下面来详细介绍生命周期中的各回调函数。\n\n##### *getDefaultProps*\n在组件创建之前，会先调用 getDefaultProps()，这是全局调用一次，严格地来说，这不是组件的生命周期的一部分。在组件被创建并加载候，首先调用 getInitialState()，来初始化组件的状态。\n\n##### *componentWillMount*\n然后，准备加载组件，会调用 componentWillMount(), 这个函数调用时机是在组件创建，并初始化了状态之后，在第一次绘制 render() 之前。可以在这里做一些业务初始化操作，也可以设置组件状态。这个函数在整个生命周期中只被调用一次。\n\n##### *componentDidMount*\n在组件第一次绘制之后，会调用 componentDidMount()，通知组件已经加载完成。这个函数调用的时候，其虚拟 DOM 已经构建完成，你可以在这个函数开始获取其中的元素或者子组件了。需要注意的是，RN 框架是先调用子组件的 componentDidMount()，然后调用父组件的函数。从这个函数开始，就可以和 JS 其他框架交互了，例如设置计时 setTimeout 或者 setInterval，或者发起网络请求。这个函数也是只被调用一次。这个函数之后，就进入了稳定运行状态，等待事件触发.\n\n##### *componentWillReceiveProps*\n如果组件收到新的属性（props），就会调用 componentWillReceiveProps(),输入参数 nextProps 是即将被设置的属性，旧的属性还是可以通过 this.props 来获取。在这个回调函数里面，你可以根据属性的变化，通过调用 this.setState() 来更新你的组件状态，这里调用更新状态是安全的，并不会触发额外的 render() 调用。如下：\n```\ncomponentWillReceiveProps(nextProps) {  \n  this.setState({\n    oldProps: nextProps\n  });\n}\n```\n\n##### *shouldComponentUpdate*\n当组件接收到新的属性和状态改变的话，都会触发调用 shouldComponentUpdate(…)，输入参数 nextProps 和上面的 componentWillReceiveProps 函数一样，nextState 表示组件即将更新的状态值。这个函数的返回值决定是否需要更新组件，如果 true 表示需要更新，继续走后面的更新流程。否者，则不更新，直接进入等待状态。\n\n默认情况下，这个函数永远返回 true 用来保证数据变化的时候 UI 能够同步更新。在大型项目中，你可以自己重载这个函数，通过检查变化前后属性和状态，来决定 UI 是否需要更新，能有效提高应用性能。\n\n##### *componentWillUpdate*\n如果组件状态或者属性改变，并且上面的 shouldComponentUpdate(…) 返回为 true，就会开始准更新组件，并调用 componentWillUpdate()，输入参数与 shouldComponentUpdate 一样，在这个回调中，可以做一些在更新界面之前要做的事情。需要特别注意的是，在这个函数里面，你就不能使用 this.setState 来修改状态。这个函数调用之后，就会把 nextProps 和 nextState 分别设置到 this.props 和 this.state 中。紧接着这个函数，就会调用 render() 来更新界面了。\n\n##### *componentDidUpdate*\n调用了 render() 更新完成界面之后，会调用 componentDidUpdate() 来得到通知，因为到这里已经完成了属性和状态的更新了，此函数的输入参数变成了 prevProps 和 prevState。\n\n##### *componentWillUnmount*\n当组件要被从界面上移除的时候，就会调用 componentWillUnmount(),在这个函数中，可以做一些组件相关的清理工作，例如取消计时器、网络请求等.\n\n## 总结\n到这里，RN 的组件的完整的生命都介绍完了，在回头来看一下前面的图，就比较清晰了，把生命周期的回调函数总结成如下表格：\n\n|生命周期|\t调用次数\t|能否使用 setSate()|\n|-------|-----|-----|\n|getDefaultProps|\t1(全局调用一次)\t|否|\n|getInitialState\t|1\t|否|\n|componentWillMount|\t1\t|是|\n|render\t|>=1|\t否|\n|componentDidMount\t|1\t|是|\n|componentWillReceiveProps|\t>=0\t|是|\n|shouldComponentUpdate|\t>=0\t|否|\n|componentWillUpdate\t|>=0\t|否|\n|componentDidUpdate\t|>=0|\t否|\n|componentWillUnmount|\t1| 否|","slug":"react-native组件的生命周期","published":1,"updated":"2018-11-08T10:19:12.069Z","_id":"cjo8fuaib0006hgq8njmcewpe","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>所谓生命周期，就是一个对象从开始生成到最后消亡所经历的状态，理解生命周期，是合理开发的关键。RN 组件的生命周期整理如下图：</p>\n<a id=\"more\"></a>\n<p><img src=\"https://img.race604.com/3-3-component-lifecycle.jpg\" alt=\"生命周期\"></p>\n<p>如图，可以把组件生命周期大致分为三个阶段：</p>\n<ul>\n<li>第一阶段：是组件第一次绘制阶段，如图中的上面虚线框内，在这里完成了组件的加载和初始化；</li>\n<li>第二阶段：是组件在运行和交互阶段，如图中左下角虚线框，这个阶段组件可以处理用户交互，或者接收事件更新界面；</li>\n<li>第三阶段：是组件卸载消亡的阶段，如图中右下角的虚线框中，这里做一些组件的清理工作。</li>\n</ul>\n<h2 id=\"生命周期回调函数\"><a href=\"#生命周期回调函数\" class=\"headerlink\" title=\"生命周期回调函数\"></a>生命周期回调函数</h2><p>下面来详细介绍生命周期中的各回调函数。</p>\n<h5 id=\"getDefaultProps\"><a href=\"#getDefaultProps\" class=\"headerlink\" title=\"getDefaultProps\"></a><em>getDefaultProps</em></h5><p>在组件创建之前，会先调用 getDefaultProps()，这是全局调用一次，严格地来说，这不是组件的生命周期的一部分。在组件被创建并加载候，首先调用 getInitialState()，来初始化组件的状态。</p>\n<h5 id=\"componentWillMount\"><a href=\"#componentWillMount\" class=\"headerlink\" title=\"componentWillMount\"></a><em>componentWillMount</em></h5><p>然后，准备加载组件，会调用 componentWillMount(), 这个函数调用时机是在组件创建，并初始化了状态之后，在第一次绘制 render() 之前。可以在这里做一些业务初始化操作，也可以设置组件状态。这个函数在整个生命周期中只被调用一次。</p>\n<h5 id=\"componentDidMount\"><a href=\"#componentDidMount\" class=\"headerlink\" title=\"componentDidMount\"></a><em>componentDidMount</em></h5><p>在组件第一次绘制之后，会调用 componentDidMount()，通知组件已经加载完成。这个函数调用的时候，其虚拟 DOM 已经构建完成，你可以在这个函数开始获取其中的元素或者子组件了。需要注意的是，RN 框架是先调用子组件的 componentDidMount()，然后调用父组件的函数。从这个函数开始，就可以和 JS 其他框架交互了，例如设置计时 setTimeout 或者 setInterval，或者发起网络请求。这个函数也是只被调用一次。这个函数之后，就进入了稳定运行状态，等待事件触发.</p>\n<h5 id=\"componentWillReceiveProps\"><a href=\"#componentWillReceiveProps\" class=\"headerlink\" title=\"componentWillReceiveProps\"></a><em>componentWillReceiveProps</em></h5><p>如果组件收到新的属性（props），就会调用 componentWillReceiveProps(),输入参数 nextProps 是即将被设置的属性，旧的属性还是可以通过 this.props 来获取。在这个回调函数里面，你可以根据属性的变化，通过调用 this.setState() 来更新你的组件状态，这里调用更新状态是安全的，并不会触发额外的 render() 调用。如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">componentWillReceiveProps(nextProps) &#123;  </span><br><span class=\"line\">  this.setState(&#123;</span><br><span class=\"line\">    oldProps: nextProps</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"shouldComponentUpdate\"><a href=\"#shouldComponentUpdate\" class=\"headerlink\" title=\"shouldComponentUpdate\"></a><em>shouldComponentUpdate</em></h5><p>当组件接收到新的属性和状态改变的话，都会触发调用 shouldComponentUpdate(…)，输入参数 nextProps 和上面的 componentWillReceiveProps 函数一样，nextState 表示组件即将更新的状态值。这个函数的返回值决定是否需要更新组件，如果 true 表示需要更新，继续走后面的更新流程。否者，则不更新，直接进入等待状态。</p>\n<p>默认情况下，这个函数永远返回 true 用来保证数据变化的时候 UI 能够同步更新。在大型项目中，你可以自己重载这个函数，通过检查变化前后属性和状态，来决定 UI 是否需要更新，能有效提高应用性能。</p>\n<h5 id=\"componentWillUpdate\"><a href=\"#componentWillUpdate\" class=\"headerlink\" title=\"componentWillUpdate\"></a><em>componentWillUpdate</em></h5><p>如果组件状态或者属性改变，并且上面的 shouldComponentUpdate(…) 返回为 true，就会开始准更新组件，并调用 componentWillUpdate()，输入参数与 shouldComponentUpdate 一样，在这个回调中，可以做一些在更新界面之前要做的事情。需要特别注意的是，在这个函数里面，你就不能使用 this.setState 来修改状态。这个函数调用之后，就会把 nextProps 和 nextState 分别设置到 this.props 和 this.state 中。紧接着这个函数，就会调用 render() 来更新界面了。</p>\n<h5 id=\"componentDidUpdate\"><a href=\"#componentDidUpdate\" class=\"headerlink\" title=\"componentDidUpdate\"></a><em>componentDidUpdate</em></h5><p>调用了 render() 更新完成界面之后，会调用 componentDidUpdate() 来得到通知，因为到这里已经完成了属性和状态的更新了，此函数的输入参数变成了 prevProps 和 prevState。</p>\n<h5 id=\"componentWillUnmount\"><a href=\"#componentWillUnmount\" class=\"headerlink\" title=\"componentWillUnmount\"></a><em>componentWillUnmount</em></h5><p>当组件要被从界面上移除的时候，就会调用 componentWillUnmount(),在这个函数中，可以做一些组件相关的清理工作，例如取消计时器、网络请求等.</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>到这里，RN 的组件的完整的生命都介绍完了，在回头来看一下前面的图，就比较清晰了，把生命周期的回调函数总结成如下表格：</p>\n<table>\n<thead>\n<tr>\n<th>生命周期</th>\n<th>调用次数</th>\n<th>能否使用 setSate()</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>getDefaultProps</td>\n<td>1(全局调用一次)</td>\n<td>否</td>\n</tr>\n<tr>\n<td>getInitialState</td>\n<td>1</td>\n<td>否</td>\n</tr>\n<tr>\n<td>componentWillMount</td>\n<td>1</td>\n<td>是</td>\n</tr>\n<tr>\n<td>render</td>\n<td>&gt;=1</td>\n<td>否</td>\n</tr>\n<tr>\n<td>componentDidMount</td>\n<td>1</td>\n<td>是</td>\n</tr>\n<tr>\n<td>componentWillReceiveProps</td>\n<td>&gt;=0</td>\n<td>是</td>\n</tr>\n<tr>\n<td>shouldComponentUpdate</td>\n<td>&gt;=0</td>\n<td>否</td>\n</tr>\n<tr>\n<td>componentWillUpdate</td>\n<td>&gt;=0</td>\n<td>否</td>\n</tr>\n<tr>\n<td>componentDidUpdate</td>\n<td>&gt;=0</td>\n<td>否</td>\n</tr>\n<tr>\n<td>componentWillUnmount</td>\n<td>1</td>\n<td>否</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>所谓生命周期，就是一个对象从开始生成到最后消亡所经历的状态，理解生命周期，是合理开发的关键。RN 组件的生命周期整理如下图：</p>","more":"<p><img src=\"https://img.race604.com/3-3-component-lifecycle.jpg\" alt=\"生命周期\"></p>\n<p>如图，可以把组件生命周期大致分为三个阶段：</p>\n<ul>\n<li>第一阶段：是组件第一次绘制阶段，如图中的上面虚线框内，在这里完成了组件的加载和初始化；</li>\n<li>第二阶段：是组件在运行和交互阶段，如图中左下角虚线框，这个阶段组件可以处理用户交互，或者接收事件更新界面；</li>\n<li>第三阶段：是组件卸载消亡的阶段，如图中右下角的虚线框中，这里做一些组件的清理工作。</li>\n</ul>\n<h2 id=\"生命周期回调函数\"><a href=\"#生命周期回调函数\" class=\"headerlink\" title=\"生命周期回调函数\"></a>生命周期回调函数</h2><p>下面来详细介绍生命周期中的各回调函数。</p>\n<h5 id=\"getDefaultProps\"><a href=\"#getDefaultProps\" class=\"headerlink\" title=\"getDefaultProps\"></a><em>getDefaultProps</em></h5><p>在组件创建之前，会先调用 getDefaultProps()，这是全局调用一次，严格地来说，这不是组件的生命周期的一部分。在组件被创建并加载候，首先调用 getInitialState()，来初始化组件的状态。</p>\n<h5 id=\"componentWillMount\"><a href=\"#componentWillMount\" class=\"headerlink\" title=\"componentWillMount\"></a><em>componentWillMount</em></h5><p>然后，准备加载组件，会调用 componentWillMount(), 这个函数调用时机是在组件创建，并初始化了状态之后，在第一次绘制 render() 之前。可以在这里做一些业务初始化操作，也可以设置组件状态。这个函数在整个生命周期中只被调用一次。</p>\n<h5 id=\"componentDidMount\"><a href=\"#componentDidMount\" class=\"headerlink\" title=\"componentDidMount\"></a><em>componentDidMount</em></h5><p>在组件第一次绘制之后，会调用 componentDidMount()，通知组件已经加载完成。这个函数调用的时候，其虚拟 DOM 已经构建完成，你可以在这个函数开始获取其中的元素或者子组件了。需要注意的是，RN 框架是先调用子组件的 componentDidMount()，然后调用父组件的函数。从这个函数开始，就可以和 JS 其他框架交互了，例如设置计时 setTimeout 或者 setInterval，或者发起网络请求。这个函数也是只被调用一次。这个函数之后，就进入了稳定运行状态，等待事件触发.</p>\n<h5 id=\"componentWillReceiveProps\"><a href=\"#componentWillReceiveProps\" class=\"headerlink\" title=\"componentWillReceiveProps\"></a><em>componentWillReceiveProps</em></h5><p>如果组件收到新的属性（props），就会调用 componentWillReceiveProps(),输入参数 nextProps 是即将被设置的属性，旧的属性还是可以通过 this.props 来获取。在这个回调函数里面，你可以根据属性的变化，通过调用 this.setState() 来更新你的组件状态，这里调用更新状态是安全的，并不会触发额外的 render() 调用。如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">componentWillReceiveProps(nextProps) &#123;  </span><br><span class=\"line\">  this.setState(&#123;</span><br><span class=\"line\">    oldProps: nextProps</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"shouldComponentUpdate\"><a href=\"#shouldComponentUpdate\" class=\"headerlink\" title=\"shouldComponentUpdate\"></a><em>shouldComponentUpdate</em></h5><p>当组件接收到新的属性和状态改变的话，都会触发调用 shouldComponentUpdate(…)，输入参数 nextProps 和上面的 componentWillReceiveProps 函数一样，nextState 表示组件即将更新的状态值。这个函数的返回值决定是否需要更新组件，如果 true 表示需要更新，继续走后面的更新流程。否者，则不更新，直接进入等待状态。</p>\n<p>默认情况下，这个函数永远返回 true 用来保证数据变化的时候 UI 能够同步更新。在大型项目中，你可以自己重载这个函数，通过检查变化前后属性和状态，来决定 UI 是否需要更新，能有效提高应用性能。</p>\n<h5 id=\"componentWillUpdate\"><a href=\"#componentWillUpdate\" class=\"headerlink\" title=\"componentWillUpdate\"></a><em>componentWillUpdate</em></h5><p>如果组件状态或者属性改变，并且上面的 shouldComponentUpdate(…) 返回为 true，就会开始准更新组件，并调用 componentWillUpdate()，输入参数与 shouldComponentUpdate 一样，在这个回调中，可以做一些在更新界面之前要做的事情。需要特别注意的是，在这个函数里面，你就不能使用 this.setState 来修改状态。这个函数调用之后，就会把 nextProps 和 nextState 分别设置到 this.props 和 this.state 中。紧接着这个函数，就会调用 render() 来更新界面了。</p>\n<h5 id=\"componentDidUpdate\"><a href=\"#componentDidUpdate\" class=\"headerlink\" title=\"componentDidUpdate\"></a><em>componentDidUpdate</em></h5><p>调用了 render() 更新完成界面之后，会调用 componentDidUpdate() 来得到通知，因为到这里已经完成了属性和状态的更新了，此函数的输入参数变成了 prevProps 和 prevState。</p>\n<h5 id=\"componentWillUnmount\"><a href=\"#componentWillUnmount\" class=\"headerlink\" title=\"componentWillUnmount\"></a><em>componentWillUnmount</em></h5><p>当组件要被从界面上移除的时候，就会调用 componentWillUnmount(),在这个函数中，可以做一些组件相关的清理工作，例如取消计时器、网络请求等.</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>到这里，RN 的组件的完整的生命都介绍完了，在回头来看一下前面的图，就比较清晰了，把生命周期的回调函数总结成如下表格：</p>\n<table>\n<thead>\n<tr>\n<th>生命周期</th>\n<th>调用次数</th>\n<th>能否使用 setSate()</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>getDefaultProps</td>\n<td>1(全局调用一次)</td>\n<td>否</td>\n</tr>\n<tr>\n<td>getInitialState</td>\n<td>1</td>\n<td>否</td>\n</tr>\n<tr>\n<td>componentWillMount</td>\n<td>1</td>\n<td>是</td>\n</tr>\n<tr>\n<td>render</td>\n<td>&gt;=1</td>\n<td>否</td>\n</tr>\n<tr>\n<td>componentDidMount</td>\n<td>1</td>\n<td>是</td>\n</tr>\n<tr>\n<td>componentWillReceiveProps</td>\n<td>&gt;=0</td>\n<td>是</td>\n</tr>\n<tr>\n<td>shouldComponentUpdate</td>\n<td>&gt;=0</td>\n<td>否</td>\n</tr>\n<tr>\n<td>componentWillUpdate</td>\n<td>&gt;=0</td>\n<td>否</td>\n</tr>\n<tr>\n<td>componentDidUpdate</td>\n<td>&gt;=0</td>\n<td>否</td>\n</tr>\n<tr>\n<td>componentWillUnmount</td>\n<td>1</td>\n<td>否</td>\n</tr>\n</tbody>\n</table>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjo8fuai10000hgq8euj1khj3","category_id":"cjo8fuai90004hgq8vglfhie4","_id":"cjo8fuaik000chgq84dtth2pb"},{"post_id":"cjo8fuai60002hgq8waus9n8u","category_id":"cjo8fuai90004hgq8vglfhie4","_id":"cjo8fuaim000fhgq8n45uwgoh"},{"post_id":"cjo8fuaib0006hgq8njmcewpe","category_id":"cjo8fuai90004hgq8vglfhie4","_id":"cjo8fuain000hhgq8w8rgxpv0"}],"PostTag":[{"post_id":"cjo8fuai10000hgq8euj1khj3","tag_id":"cjo8fuaia0005hgq8aeig6uyk","_id":"cjo8fuaij000ahgq8679u0zik"},{"post_id":"cjo8fuai60002hgq8waus9n8u","tag_id":"cjo8fuaia0005hgq8aeig6uyk","_id":"cjo8fuail000ehgq8l62vwg65"},{"post_id":"cjo8fuaib0006hgq8njmcewpe","tag_id":"cjo8fuaia0005hgq8aeig6uyk","_id":"cjo8fuain000ihgq8rmpprsiq"},{"post_id":"cjo8fuaib0006hgq8njmcewpe","tag_id":"cjo8fuaim000ghgq838lanb1y","_id":"cjo8fuain000jhgq8xb8d3bkf"}],"Tag":[{"name":"react-native","_id":"cjo8fuaia0005hgq8aeig6uyk"},{"name":"react","_id":"cjo8fuaim000ghgq838lanb1y"}]}}