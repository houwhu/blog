{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/css/iconfont.styl","path":"css/iconfont.styl","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/css/noscript.styl","path":"css/noscript.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/alipay.jpg","path":"images/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/GitHub.svg","path":"images/GitHub.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/bitbug_favicon.ico","path":"images/bitbug_favicon.ico","modified":1,"renderable":1},{"_id":"themes/next/source/images/csdn.svg","path":"images/csdn.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/next/source/images/fuzi.jpg","path":"images/fuzi.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/jianshu.svg","path":"images/jianshu.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/kebi.jpeg","path":"images/kebi.jpeg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/juejin.svg","path":"images/juejin.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/wechatpay.png","path":"images/wechatpay.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/comments.js","path":"js/comments.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/config.js","path":"js/config.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schedule.js","path":"js/schedule.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/pjax.js","path":"js/pjax.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/rating.js","path":"js/third-party/rating.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/Effect-Hook.md","hash":"8a563cc11fd45a0e616e647f31436820d6839859","modified":1647519676708},{"_id":"source/_posts/markdown的基本用法.md","hash":"ec5f5b451b4b87f7e761d604e12313a9f8fadbfa","modified":1647938794299},{"_id":"source/_posts/react-native简介.md","hash":"09717c4c7b2bc0b069cffbf9e68e6086ba28fa0d","modified":1647519676710},{"_id":"source/_posts/state-hook.md","hash":"60ca1c99bc8d8a8194aea8d243d4ac911d33ff17","modified":1647824886705},{"_id":"source/_posts/react-native组件的生命周期.md","hash":"9f26d0628e74aa887c3c3263fe4edcf96d01e6f3","modified":1647519676712},{"_id":"source/_posts/react-native环境配置.md","hash":"b21eb71541bd8e71603388fc444e6cdd40bfc93d","modified":1647519676709},{"_id":"source/aboutMe/index.md","hash":"f24f484f92b351323412f7eb8da1389a5972ae36","modified":1647519676715},{"_id":"source/categories/index.md","hash":"c8dcfdb7f5e59a8eeacc63380726abbbab2d1514","modified":1647519676717},{"_id":"source/_posts/setState.md","hash":"c531ce7dbb836b002920f802ea2d2b62c815edea","modified":1647519676713},{"_id":"source/tags/index.md","hash":"489c8fb2bcfdd226cceec2d5160e6ea51fd5597c","modified":1647519676719},{"_id":"themes/next/.eslintrc.json","hash":"611e15c3fcb41dc68fa8532ee595a1262a1b5a8a","modified":1647912064785},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1647912064784},{"_id":"themes/next/.gitignore","hash":"087b7677078303acb2acb47432165950e4d29b43","modified":1647912064802},{"_id":"themes/next/.gitattributes","hash":"aeeca2f1e987d83232d7870d1435a4e3ed66b648","modified":1647912064786},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1647912064803},{"_id":"themes/next/_config.yml","hash":"08150641ac781f76f2f4bdb59f831128013c9eb8","modified":1647943559222},{"_id":"themes/next/README.md","hash":"f0d4d51746c1acd3bd7ea86856747712cd376d63","modified":1647912064804},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1647912064806},{"_id":"themes/next/package.json","hash":"7d4167385c128f93bf9596620fb2f6858f263bcd","modified":1647912064897},{"_id":"themes/next/LICENSE.md","hash":"8cfb03967dd4cbaf3b825271ffce0039aa3fc22a","modified":1647912064803},{"_id":"themes/next/renovate.json","hash":"767b077c7b615e20af3cf865813cd64674a9bea6","modified":1647912064900},{"_id":"themes/next/_vendors.yml","hash":"3f7a09e243c2d0463221709c38dce3aaed444a75","modified":1647912064806},{"_id":"themes/next/.githooks/install.js","hash":"305c2a269818466eed9e381b866c6cd1ad7f8afd","modified":1647912064787},{"_id":"themes/next/.githooks/pre-commit","hash":"b69b9d0b51e27d5d4c87c3242f5067c2cda26e44","modified":1647912064787},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"a103e2d875f7434191859e5b42075cfa9a4cbcb3","modified":1647912064793},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"593ae64e72d43c020a697eac65b1f9c3483ff097","modified":1647912064788},{"_id":"themes/next/.github/config.yml","hash":"0956bf71b6f36632b63b14d26580458041a5abd2","modified":1647912064793},{"_id":"themes/next/.github/labeler.yml","hash":"ff76a903609932a867082b8ccced906e9910533a","modified":1647912064796},{"_id":"themes/next/.github/label-commenter-config.yml","hash":"a1aa85a2fc66ff0c52c65bd97b0fa282e297a73f","modified":1647912064795},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1647912064794},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"2fdca1040427cabfe27cae6754ec5e027ec7092e","modified":1647912064789},{"_id":"themes/next/.github/release-drafter.yml","hash":"de38f816e3023e0a5c1fd1f3c2b626f78bc35246","modified":1647912064796},{"_id":"themes/next/docs/AUTHORS.md","hash":"579014d47f45b27fd1618b9709f0efe9585c7449","modified":1647912064808},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1647912064808},{"_id":"themes/next/layout/_layout.njk","hash":"2842f3e9fdde5bbd14cac89629221e68d80c8ea1","modified":1647912064836},{"_id":"themes/next/layout/archive.njk","hash":"aa491dba8f746e626c273a920effedf7d0b32170","modified":1647912064892},{"_id":"themes/next/docs/LICENSE.txt","hash":"d1cd5a8e83d3bbdb50f902d2b487813da95ddfd3","modified":1647912064809},{"_id":"themes/next/layout/category.njk","hash":"82f541452cae76a94ee15cb8d8a888f44260a0fd","modified":1647912064893},{"_id":"themes/next/layout/page.njk","hash":"fddfdee95f5da86eab8a85d6eb1901996d2153cf","modified":1647912064895},{"_id":"themes/next/layout/post.njk","hash":"707a50e50b90df5fbeaf8407d12895d04163a290","modified":1647912064895},{"_id":"themes/next/layout/index.njk","hash":"fa52c3049871e879980cb6abccdea3792ca4ce70","modified":1647912064894},{"_id":"themes/next/layout/tag.njk","hash":"b6c017d30d08ddd30d66e9c6f3a71aa65d214eac","modified":1647912064896},{"_id":"themes/next/test/index.js","hash":"983a505399796b9d9e174ba46d89abbdde38f8ee","modified":1647912065049},{"_id":"themes/next/languages/README.md","hash":"b1c96465b3bc139bf5ba6200974b66581d8ff85a","modified":1647912064816},{"_id":"themes/next/languages/de.yml","hash":"83023c4246b93a2f89f342afe29a7b9e1185f74f","modified":1647912064818},{"_id":"themes/next/languages/bn.yml","hash":"e78a674af44f19415b9bd91e994548a95be174ae","modified":1647912064817},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1647912064819},{"_id":"themes/next/languages/es.yml","hash":"21676d658d309eb90342a924e106645611c937bc","modified":1647912064822},{"_id":"themes/next/languages/en.yml","hash":"66445143decfbb5eb7031eb370698e31d5222a7a","modified":1647912064820},{"_id":"themes/next/languages/fa.yml","hash":"e09fad889ab3ae87874093e1acd51edc9297d869","modified":1647912064823},{"_id":"themes/next/languages/fr.yml","hash":"328c255c82e9b561e20a9f51a4d84abc63d1b90a","modified":1647912064823},{"_id":"themes/next/languages/nl.yml","hash":"e47858bd1e0d0622c15366ae6c0513d996f589e3","modified":1647912064827},{"_id":"themes/next/languages/it.yml","hash":"c038ff0cadbe405750d980bcacfd3900acf96905","modified":1647912064825},{"_id":"themes/next/languages/ko.yml","hash":"d6e2add7488065ec4f7d21cfcf7f0eaa877a84f4","modified":1647912064826},{"_id":"themes/next/languages/pt-BR.yml","hash":"305025e932832328b7e2a8a584638a23c462e68f","modified":1647912064827},{"_id":"themes/next/languages/pt.yml","hash":"ff93459250c33d3c7ba06c30164cc4208edf9b33","modified":1647912064828},{"_id":"themes/next/languages/id.yml","hash":"d7c337ca72efb0bd02ade8b5560c559384ad84dd","modified":1647912064824},{"_id":"themes/next/languages/tr.yml","hash":"d3262d2221b0583a52e5d20a3cd1380f5dc49378","modified":1647912064831},{"_id":"themes/next/languages/tk.yml","hash":"bf61562ac892231bd28f23a2a5597ee98fb05aa6","modified":1647912064830},{"_id":"themes/next/languages/ru.yml","hash":"837bb39651769244b19ce458053757d429869764","modified":1647912064829},{"_id":"themes/next/languages/si.yml","hash":"c15ed758dbad890e856f4fc281208d7b78cc1a59","modified":1647912064829},{"_id":"themes/next/languages/uk.yml","hash":"f32871f67c63d26bc4e3e15df9b01f5a41236a50","modified":1647912064831},{"_id":"themes/next/languages/zh-Hans.yml","hash":"f8379d15038e22ef7039d91272cb4f36842dbbe1","modified":1647913774460},{"_id":"themes/next/languages/vi.yml","hash":"e452ea8c48993262a3e8fce9d92072cafabfc734","modified":1647912064832},{"_id":"themes/next/languages/zh-HK.yml","hash":"c1ee97ceb56da76ecdc7b69fa975f28c8574441b","modified":1647912064834},{"_id":"themes/next/languages/zh-TW.yml","hash":"70c45076ad722b777956048fcc430eac37844c11","modified":1647912064834},{"_id":"themes/next/languages/ja.yml","hash":"57a35b21aca04ce8bca64fb5933f35626c462ea3","modified":1647912064825},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"032194e7975564176f2109aa8b7c020fa6d5e6b1","modified":1647912064790},{"_id":"themes/next/.github/ISSUE_TEMPLATE/config.yml","hash":"daeedc5da2ee74ac31cf71846b766ca6499e9fc6","modified":1647912064791},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"4a7885fe2c8b25be02ab57c345cd862aeeeeacaf","modified":1647912064791},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"618d07b49f4774cd79613d4001984a19d954a6ad","modified":1647912064792},{"_id":"themes/next/.github/workflows/labeler.yml","hash":"46d0b29dc561fe571d91fd06a7c8ef606b984c72","modified":1647912064798},{"_id":"themes/next/.github/workflows/linter.yml","hash":"204f009ed04428833e60aad7de9c2982379fa6d7","modified":1647912064799},{"_id":"themes/next/.github/workflows/lock.yml","hash":"58eca481fd71088a8ae1dbc04645bcfc03460b87","modified":1647912064799},{"_id":"themes/next/.github/workflows/release-drafter.yml","hash":"359b74890a47d784e35a5cc3c7885d5cdf302e82","modified":1647912064800},{"_id":"themes/next/docs/ru/README.md","hash":"6ed776be76faee1aa7bb29f3070ccb56d9af434d","modified":1647912064812},{"_id":"themes/next/.github/workflows/label-commenter.yml","hash":"7dec949b13131783e726facb2f4acde0945db1b8","modified":1647912064797},{"_id":"themes/next/.github/workflows/tester.yml","hash":"08c50c0c37db1dd2c7baa8f4bbab1144f38ce0bb","modified":1647912064801},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7befb4325b107dd668d9eae3d7e86a34910ce3f2","modified":1647912064813},{"_id":"themes/next/docs/zh-CN/README.md","hash":"da1bc4d36d8f79eca38a0e0afd2d3ea3def3cf03","modified":1647912064815},{"_id":"themes/next/layout/_partials/footer.njk","hash":"65f0d69084e0e26a0153d3b8db610a15c4102691","modified":1647912064840},{"_id":"themes/next/layout/_partials/comments.njk","hash":"60f4620dd479da6d86d1d493440e9e2a28b6e132","modified":1647912064840},{"_id":"themes/next/layout/_partials/languages.njk","hash":"537026fc120adeef9148c98ebf074207e3810538","modified":1647912064847},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"967594ee64805e27b7ff9d957e23ab3f5c948600","modified":1647912064862},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"d9d8e6d7a6a8c80009dd5334cc17fd3e4977a008","modified":1647912064837},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1647912064853},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"eec74e135d01948361020140c3798769e1e7363b","modified":1647912064838},{"_id":"themes/next/layout/_macro/post.njk","hash":"e371d64c65c05ad7b73239789b56d92a8ab384a2","modified":1647912064838},{"_id":"themes/next/layout/_scripts/index.njk","hash":"4eb65641b47ea9b23ed2ddfd69b18f21d7d8f214","modified":1647912064864},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"0a1470440f11362df2b1cd6b6228e273d9f999d6","modified":1647912064864},{"_id":"themes/next/layout/_third-party/fancybox.njk","hash":"53ad3c31762b74e5d29787b37d5e494cc4fded9b","modified":1647912064879},{"_id":"themes/next/layout/_third-party/index.njk","hash":"33a4a3275474bd3bb2e8d1b0ea01b42dda9ea608","modified":1647912064880},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"73bc15a9c3c5c239ab90efa19a1e721f41f3cb93","modified":1647912064884},{"_id":"themes/next/layout/_third-party/pace.njk","hash":"13b2a77b4858a127f458ea092b6f713b052befac","modified":1647912064884},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"0c9a1fe9906672724dbf274154a37bac1915ca2c","modified":1647912064914},{"_id":"themes/next/layout/_third-party/rating.njk","hash":"d0444179fec512760ab1d4f76928d795b971c884","modified":1647912064885},{"_id":"themes/next/scripts/events/index.js","hash":"e1c366efdab730a7791099115698c97b31b5ff78","modified":1647912064901},{"_id":"themes/next/scripts/filters/locals.js","hash":"87f3bff03fa9fd96cf0787a6442464a7ff57f76b","modified":1647912064914},{"_id":"themes/next/scripts/filters/minify.js","hash":"056f9c9f8c6e34b084b4ac69901c9858a072d9ab","modified":1647912064915},{"_id":"themes/next/scripts/filters/post.js","hash":"5a132b7f9280a40b3d5fb40928c8cbbe071fe6f6","modified":1647912064915},{"_id":"themes/next/scripts/helpers/engine.js","hash":"72ccb6e4fbc84bf6732a742468acb7ac305cd1bd","modified":1647912064917},{"_id":"themes/next/scripts/helpers/navigation.js","hash":"82f6e81bacf23d10cac71b09cff8708e47891ef3","modified":1647912064919},{"_id":"themes/next/scripts/helpers/font.js","hash":"0a6fa582a0890ecaf5f03f758a730936e48aeca1","modified":1647912064918},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"e73f43f1bcb46965e317285d6831e129a40ea59b","modified":1647912064920},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"52acbc74c1ead8a77cd3bbcba4e033053683f7d0","modified":1647912064921},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"98fc68cf3fcd6253bbb94068ab1d86578a4ef9ea","modified":1647912064920},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"8e912c715702addaf0cefe63e580e45b97ae8c3f","modified":1647912064923},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"a09ceb82b45dd8b7da76c227f3d0bb7eebe7d5d1","modified":1647912064814},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"b4d12e6fe29089be0f43bafc9eea736602cd16bf","modified":1647912064924},{"_id":"themes/next/scripts/tags/button.js","hash":"86c71c73a63744efbbbb367612871fede0d69529","modified":1647912064922},{"_id":"themes/next/scripts/tags/label.js","hash":"c18b0e619a779ed40be7f014db92af18f45fbd5c","modified":1647912064926},{"_id":"themes/next/scripts/tags/index.js","hash":"255dd1090e8319b557eeca43571f0e4f8aab013b","modified":1647912064925},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"1c609312a71d47f838226346aad5c2e1c35f15dd","modified":1647912064924},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"3f358bb78c5c6fdf45de287f3ead553e3a6a93c2","modified":1647912064927},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"b3844e168b51a99d495ca05562ffac47677f5728","modified":1647912064927},{"_id":"themes/next/scripts/tags/note.js","hash":"a12fd53e421400836a3722ae69130969558d6ac0","modified":1647912064928},{"_id":"themes/next/scripts/tags/pdf.js","hash":"317ba4611020cc840854386dde098dbbe452777e","modified":1647912064929},{"_id":"themes/next/scripts/tags/tabs.js","hash":"e0ed5fe1bc9d2957952a1aacdf3252d6ef3f9743","modified":1647912064929},{"_id":"themes/next/scripts/tags/video.js","hash":"f6ad3f52779f0636251238d3cbdc5b6f91cc5aba","modified":1647912064930},{"_id":"themes/next/source/css/_colors.styl","hash":"a88430865c99f47ce1d8240f8895819b8b7b0c06","modified":1647912064931},{"_id":"themes/next/source/css/_mixins.styl","hash":"74cf298800fa560e1521d1875f60b5097a5c3b4d","modified":1647912064989},{"_id":"themes/next/source/css/iconfont.styl","hash":"a6b6d2d304611fb717ab468f0ec789949180179b","modified":1647930698547},{"_id":"themes/next/source/css/main.styl","hash":"d87d91c9f9d3eaf7738fa463111e85be18ea236d","modified":1647933725207},{"_id":"themes/next/source/css/noscript.styl","hash":"7dc97674c232f6ca71e48b95e3f66472cd8e9c05","modified":1647912065010},{"_id":"themes/next/source/images/bitbug_favicon.ico","hash":"072671fbd93cdfb13ff7c55fcc3de85f0317aea2","modified":1647519676829},{"_id":"themes/next/source/images/GitHub.svg","hash":"abb5430a0c8a926a7c08380e3bb2930c89889662","modified":1647931460065},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1647912065013},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1647912065013},{"_id":"themes/next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1647912065012},{"_id":"themes/next/languages/ar.yml","hash":"cc7e3e2855348563d746f15c4752b9c63fcdd91a","modified":1647914491131},{"_id":"themes/next/source/images/favicon.ico","hash":"072671fbd93cdfb13ff7c55fcc3de85f0317aea2","modified":1647519676835},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1647912065011},{"_id":"themes/next/source/images/fuzi.jpg","hash":"98c6d82e703026617ef3a67c907600398a5798de","modified":1647519676837},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1647912065014},{"_id":"themes/next/source/images/csdn.svg","hash":"f393bed7f7391ebc9a7fd7659e34bf26f91ca5a0","modified":1647931465346},{"_id":"themes/next/source/images/jianshu.svg","hash":"b183dc8364e80fa1f5af0799753b4c7bb8e4cf9a","modified":1647931475597},{"_id":"themes/next/source/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1647912065017},{"_id":"themes/next/source/js/bookmark.js","hash":"1457291a7244b7786ec35b949d97183e4fbd181d","modified":1647912065018},{"_id":"themes/next/source/js/comments-buttons.js","hash":"81ea6cbcdf0357094753d7523919c1eafa38e79f","modified":1647912065019},{"_id":"themes/next/source/js/comments.js","hash":"0b4daf0ce610760bd52e95d423f61f3e1c72442a","modified":1647912065019},{"_id":"themes/next/source/js/motion.js","hash":"20b979ebe3671cb415e6e7171485d65cc347086e","modified":1647912065021},{"_id":"themes/next/source/js/next-boot.js","hash":"b0bdb542a809932182cfbb8772328115142a0b77","modified":1647912065021},{"_id":"themes/next/source/js/schedule.js","hash":"4858233224756e3cadfabd8135f7c4b1e3673b44","modified":1647912065023},{"_id":"themes/next/source/js/pjax.js","hash":"85293c253e0f43540572c4e4615c712325a732e2","modified":1647912065022},{"_id":"themes/next/source/js/utils.js","hash":"c13fa66aae52f59f88881738c00ebdcaf0209496","modified":1647912065046},{"_id":"themes/next/test/helpers/font.js","hash":"6f5076bd3f2724e47b46ca69028393a9b6275cd1","modified":1647912065047},{"_id":"themes/next/test/helpers/index.js","hash":"2fb58dca3df2fe53116ee2b1232fa26ebe7b2ce5","modified":1647912065048},{"_id":"themes/next/test/helpers/next-url.js","hash":"08e84781f1cd54e5634b86877ad9cefae4a78e95","modified":1647912065048},{"_id":"themes/next/test/validate/index.js","hash":"560862194991c5963da5a411629d8e6c71d20ee2","modified":1647912065058},{"_id":"themes/next/test/tags/button.js","hash":"a50ca44eaec3d91c2958e3157d624cd3e68828c7","modified":1647912065050},{"_id":"themes/next/test/tags/group-pictures.js","hash":"8f66d3c6f03fb11d85aa2ab05c9b3c9aa2b4e994","modified":1647912065052},{"_id":"themes/next/test/tags/center-quote.js","hash":"2ac4b5a358681691a17e736de06fce0b640a7023","modified":1647912065051},{"_id":"themes/next/test/tags/index.js","hash":"5cad001936a694bf32d59751cc2b68a66199f976","modified":1647912065052},{"_id":"themes/next/test/tags/label.js","hash":"6cad7d84c42511459a89cda3971e8ea5cdee0125","modified":1647912065053},{"_id":"themes/next/test/tags/mermaid.js","hash":"f718a3d0e303d842e2ca5a3b162539a49e45a520","modified":1647912065055},{"_id":"themes/next/test/tags/link-grid.js","hash":"41730266306c02362258384cd73659223928361f","modified":1647912065054},{"_id":"themes/next/test/tags/note.js","hash":"161a81ce749e239d2403681372d48ecc1b51d7b9","modified":1647912065055},{"_id":"themes/next/test/tags/tabs.js","hash":"b19d2592347eae5d6a7a97ca7e8cec03e8f25b51","modified":1647912065057},{"_id":"themes/next/test/tags/pdf.js","hash":"2d114596a8a180b2f3cd2a9c6528a328961f12d4","modified":1647912065056},{"_id":"themes/next/test/tags/video.js","hash":"88db9a3a26cd35525c43c0339fcd1c5965ec9518","modified":1647912065057},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"fd75652957c1c3668874fdfd16f4f56027be0d8b","modified":1647912064842},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"3ff7e251bf99a275cd5dfda1b3e51f773c5f7b05","modified":1647912064843},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"8e08c19e1bd92f3179907b0ff3743d6e2371d7ae","modified":1647912064844},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"1b2ae17f3c394ce310fe2d9ed5f4d07d8cc74ae7","modified":1647912064845},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"20cb9c39bcdcfa3f710df7bc5838d6e62d4dd674","modified":1647912064847},{"_id":"themes/next/source/js/config.js","hash":"211a9ab35205ccfa6b7c74394bade84da0d00af7","modified":1647912065020},{"_id":"themes/next/layout/_partials/page/categories.njk","hash":"b352346dd2cb42f7eeaec5e39d9a2a353b029775","modified":1647912064850},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"92553feb26f30f7fc9147bc4ef122908a9da06be","modified":1647912064851},{"_id":"themes/next/layout/_partials/page/schedule.njk","hash":"6ec9c97e91c793cc2eb5ac0f7c3c36fdaaf637d1","modified":1647912064851},{"_id":"themes/next/layout/_partials/page/tags.njk","hash":"752df7d12360a077c51a25609916a3ecc1763bb3","modified":1647912064852},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"0ebc0142abebbeef4278e32abb543c7d7fa75d88","modified":1647912064854},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"ebf83083856f8bd81ad47ffb985d44e338b4e6bb","modified":1647912064855},{"_id":"themes/next/layout/_partials/post/post-footer.njk","hash":"e3502059bcc443ce932946a9891fcbe8b2bb362d","modified":1647912064856},{"_id":"themes/next/layout/_partials/post/post-meta.njk","hash":"9a9c4fb7e7c4fe4b7d474bdfdb4ed2b0a5423df2","modified":1647912064856},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"17e03b61e20a5cb4195f0e0d75261ce61a1cddc4","modified":1647912064857},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"58b3f657a47bae406e5fcf19cd5e42680785ac71","modified":1647912064858},{"_id":"themes/next/layout/_partials/search/algolia-search.njk","hash":"93fbb449fbd599cb4315d7eb0daeb239811b233f","modified":1647912064859},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"9766852e72c1809d8c1eea71ac6116b4cc0886d2","modified":1647912064860},{"_id":"themes/next/layout/_partials/search/localsearch.njk","hash":"f73d25a8ccfdd5d4ca2953dc434ff8ce36034c57","modified":1647912064861},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"fb1340442181e49c58aa1bcd4f9a76d77354a874","modified":1647933611438},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"3e80332f88b101141be69f2a07f54ed8c053eabb","modified":1647912064866},{"_id":"themes/next/layout/_third-party/analytics/cloudflare.njk","hash":"c7cea42f6db2137c11ca1d83e43fcb7ad7ccfb89","modified":1647912064867},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"1fe44a1e156cd30e3e9fd8313e1011ad30970f83","modified":1647912064849},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"9ff9ec05c2037beea229a6bb698f9e3546973220","modified":1647912064868},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"52ad137450f7b3d6a330e16b3ed1c6174290f0eb","modified":1647912064867},{"_id":"themes/next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"24719266662fcff63e88a21ee9b5b284abb8b37c","modified":1647912064870},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"eef710e9be20e7fed7573d0824feaa4eb1cf2737","modified":1647912064869},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"09d2c9487d75894d45a823e3237ae9f90fd6ee01","modified":1647912064871},{"_id":"themes/next/layout/_third-party/chat/gitter.njk","hash":"375a86f0b19e130cfa7707007e3a53d9ae7c9b64","modified":1647912064872},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"3fbc72427c1211e5dcfd269af1a74852a7ba5c1a","modified":1647912064872},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"5f7967bd946060f4102263a552ddfbae9975e7ea","modified":1647912064873},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"b0828dd1b1fd66ecd612d9e886a08e7579e9a4f7","modified":1647912064874},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"c5086b4c35f730f82c99c4a8317f2f153ebde869","modified":1647912064875},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"6fd4df5c21cfe530dbb0c012bc0b202f2c362b9c","modified":1647912064876},{"_id":"themes/next/layout/_third-party/comments/isso.njk","hash":"38badcc7624a13961381c2465478056b9602aee5","modified":1647912064876},{"_id":"themes/next/layout/_third-party/comments/utterances.njk","hash":"a7921be7328e1509d33b435175f5333a9aada66f","modified":1647912064878},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"b8e0d5de584cece5e05b03db5b86145aa1e422b4","modified":1647912064877},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"1856c4b035c5b8e64300a11af0461b519dfc4cf4","modified":1647912064881},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"a62aa1ed4e35b8d0451d83f341bf0a97538bc9a4","modified":1647912064882},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"67f67a77f27103177b9940446f43610229536d82","modified":1647912064886},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"a84db8bc8804335f95609a221ac1746433dcdc89","modified":1647912064882},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"210c32b654adae3d8076c4417d370b42af258cea","modified":1647912064887},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"d97790e4b442a1e3ded7d7b4f84b8ee6cdb6e8ea","modified":1647912064888},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"af5336e8bbdc4638435971da115bb7443d374ade","modified":1647912064888},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"866ffa15a3250678eb8a90aa6f609fa965db90fd","modified":1647912064889},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"8703d1855bb8d251c9b7c2940b7e3be525e53000","modified":1647912064889},{"_id":"themes/next/source/images/juejin.svg","hash":"78dc8bbd3505ea84a199c164b910e1cef9872e9c","modified":1647931470792},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"dd8f963acd5a3685be46fd5319c06df0308d99b2","modified":1647912064890},{"_id":"themes/next/scripts/events/lib/config.js","hash":"f78cd74b25cc0ef65c060fec1d7e056967e26b4b","modified":1647912064902},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"00cec6980cafd417def885f496371856cd524a25","modified":1647912064903},{"_id":"themes/next/scripts/events/lib/navigation.js","hash":"0a2df7d40d64c61ce7e730bb8269b848b03526d1","modified":1647912064904},{"_id":"themes/next/scripts/events/lib/utils.js","hash":"7bdf8588563cd13a1eb7a2c5bcffd831855b59a0","modified":1647912064905},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"17fbc99521440a5d6c32ac991ba2038a12f86b31","modified":1647912064907},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"550cc7f57bc3ab3d093e34741e7860222851d4d4","modified":1647912064908},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"1cb58aa6b88f7461c3c3f9605273686adcc30979","modified":1647912064908},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3283bdd6e5ac7d10376df8ddd5faaec5dc1bd667","modified":1647912064909},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"96e58efba0dc76af409cc7d2db225f0fe4526ea8","modified":1647912064910},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"70eb507ef7f1a4fc3ca71a3814cc57afe7f3f60c","modified":1647912064910},{"_id":"themes/next/scripts/filters/comment/isso.js","hash":"c22cbccd7d514947e084eeac6a3af1aa41ec857a","modified":1647912064912},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"bb8ebb541c40362c0cbbd8e83d3b777302bb6c40","modified":1647912064912},{"_id":"themes/next/scripts/filters/comment/utterances.js","hash":"a50718c081685fd35ff8ea9ca13682c284399ed8","modified":1647912064913},{"_id":"themes/next/source/css/_custom/iconfont.styl","hash":"00d71fd04fee350d9f6d8d7fdcd6bd3aff11efd0","modified":1647934061878},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"c4537fa2de33d98baff2c87a73801770414e0b69","modified":1647912065005},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"ee5024be8e39605f0c6d71db038e15e0693d0f41","modified":1647912065006},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"d3a8f6e71c86926d0c2a247a31d7446d829736d5","modified":1647912065007},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"58014a2d087c4126058a99b5b1cb7d8a2eb6224d","modified":1647912065007},{"_id":"themes/next/source/css/_variables/base.styl","hash":"0876b50a58f114bc0b7982b85c5e5011730253b8","modified":1647912065008},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"62513f08e9e7f4abeaeedca91fd0af0861a2540f","modified":1647912064845},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"0386c708975cc5faea4f782611c5d2c6b8ac2850","modified":1647912064891},{"_id":"themes/next/source/js/third-party/fancybox.js","hash":"8a847a7bbdbc0086dd1de12b82107a854b43f5e5","modified":1647912065035},{"_id":"themes/next/source/js/third-party/pace.js","hash":"0ebee77b2307bf4b260afb06c060171ef42b7141","modified":1647912065037},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"09cba2c433fe47981d07d67c038790f4fc2ec16b","modified":1647912064906},{"_id":"themes/next/source/js/third-party/quicklink.js","hash":"5b0197e061f57e00875be3636ba372a67693abe0","modified":1647912065038},{"_id":"themes/next/source/js/third-party/rating.js","hash":"a1f44247c18ac00ee3e0026560398429e4c77dd7","modified":1647912065039},{"_id":"themes/next/source/js/schemes/muse.js","hash":"e1b4bf9aa47d14c790a0920d7dbb3e9812d4358b","modified":1647912065024},{"_id":"themes/next/source/css/_common/components/index.styl","hash":"991c1f80995cec418dc00d3d6b13e2d911ac9894","modified":1647912064933},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"f3defd56be33dba4866a695396d96c767ce63182","modified":1647912064947},{"_id":"themes/next/test/tags/caniuse.js","hash":"2852be850d9103c25114253a45e6c62e32517de4","modified":1647912065051},{"_id":"themes/next/source/css/_common/outline/index.styl","hash":"7782dfae7a0f8cd61b936fa8ac980440a7bbd3bb","modified":1647912064962},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"1f1ea7b579a49f17574c31d78d663c54896133eb","modified":1647912064904},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"2db4462e9cb87b8aef3f50f850fed407de16da3e","modified":1647912064963},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"81b99ad5c19d0264e0047bdba4402b2311011022","modified":1647938365623},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"2bbf9046ef2a8f99ef3668bbb8be4e52e9d97bb7","modified":1647912064933},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"f768ecb2fe3e9384777c1c115cd7409e9155edd7","modified":1647912064974},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"cf8446f4378dcab27b55ede1635c608ae6b8a5c8","modified":1647912064975},{"_id":"themes/next/source/css/_common/scaffolding/index.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1647912064977},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"b9388016f8d9274703e77e306a1feaad1b7b9d6c","modified":1647912064980},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"90f7d3baab061e860172b536c9edc38c7fd2ef5c","modified":1647912064989},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"00366a6bd1a66f99f845c5ebfc9e8cf56651b815","modified":1647912064992},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1647912064978},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"828700af2a2f273d3e3e0554ffc60706d889d539","modified":1647912064846},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b1054313ca9419e76fea0451417c881616f50a38","modified":1647912064992},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"34416a5792d0235caa8c0c7e59725f2df0fa614c","modified":1647912064979},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"89bf3f6b82cb0fafbbd483431df8f450857c5a0b","modified":1647912064994},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"4a454bcadd9de7d73172abd3276943e8626657be","modified":1647912064994},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"f51b6a4f06359ed56b2d10caa6f15362d3b3751d","modified":1647912064991},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"fd89988442f380cba907752fe3f608e3498f8c93","modified":1647912064995},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"ec5d4e8ffe74722a092a69ace2f8dec7776466a8","modified":1647912064997},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"134272cb8096156c9e32fbbe085394633c7509cd","modified":1647912064998},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1647912064998},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1647912064999},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"9b2cba0c9aa5a64957294f7548c199db1f63f0f4","modified":1647912065001},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"9f60d501808f67d151af437221d0dfacc27c180c","modified":1647938258117},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"018b6a761e197086174c9f06b4d5ea21cc230951","modified":1647912064996},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"42bf453def88da82c842dca84e8f47087091f08e","modified":1647912065003},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"7905f428b46d100ac5928875cb1e2b99fa86fc0b","modified":1647912065004},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b5c3dd08c520a16ee49f85fa12b4935e725ef261","modified":1647912065004},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","hash":"f9579a02599de063ccff336177ba964a2931a6e9","modified":1647912065025},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"1d29eca70fa686d895f8e98a283e4a159e40905a","modified":1647912065002},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","hash":"f755e8537ccbbb0bd84c26923f320d4e206e7428","modified":1647912065027},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","hash":"d77d4934d959e7125128754b568f1d041c3fbfff","modified":1647912065026},{"_id":"themes/next/source/js/third-party/chat/chatra.js","hash":"72e0766752b78a723fb30e92d533a8b353104e2d","modified":1647912065028},{"_id":"themes/next/source/js/third-party/chat/tidio.js","hash":"77c231bcd64f1c09bd9989909e9fee703b65f47f","modified":1647912065029},{"_id":"themes/next/source/js/third-party/chat/gitter.js","hash":"14b024c920a8b359777d79dd8e1a849387f8f3ad","modified":1647912065028},{"_id":"themes/next/source/js/third-party/comments/changyan.js","hash":"b4cb06fdf531292e2361398a98d75a4ca2b8473a","modified":1647912065030},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"82311a531e26ca5a6ad17cf14959da75d4ac6106","modified":1647912064993},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","hash":"1e8509356fb027d948d118ab220d9631f4d482fa","modified":1647912065032},{"_id":"themes/next/source/js/third-party/comments/isso.js","hash":"b9b9fd2f0e098a123b34a4932da912a9485ffe6c","modified":1647912065033},{"_id":"themes/next/source/js/third-party/comments/utterances.js","hash":"ec44d7f1c8b51b0aa3cccba099a78f3575ac828c","modified":1647912065034},{"_id":"themes/next/source/js/third-party/comments/livere.js","hash":"68892d74ef5fc308c6e7e6b4f190826d79f3055d","modified":1647912065033},{"_id":"themes/next/source/js/third-party/math/katex.js","hash":"5c63ec71458b4fe0cd98fd4a04e11c3746764f11","modified":1647912065036},{"_id":"themes/next/source/js/third-party/math/mathjax.js","hash":"d93556184b2c0aa1dbc4a6fb892d2f77b80d7d9f","modified":1647912065037},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","hash":"b27320fcbf5044d0fcb76a6d43593221954525da","modified":1647912065040},{"_id":"themes/next/source/js/third-party/search/local-search.js","hash":"dc2b0e89aa32afc7f7a7e2d7a277dadb7f96e06d","modified":1647912065041},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","hash":"6abdc209f4503d4efd676e18bc30ddea813b6ff9","modified":1647912065043},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","hash":"3272f3373fa7c3910852124bc5e43e90e3470ff8","modified":1647912065042},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","hash":"e9fffe2a14751e86aed5e84a5e96514413eac2dc","modified":1647912065044},{"_id":"themes/next/source/js/third-party/tags/pdf.js","hash":"e109c2d6828f527f0289d5fa3bb02fce63ee6d93","modified":1647912065045},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"091b8c763e43447d087c122a86538f290f83136a","modified":1647912064937},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"80595d274f593b321c0b644a06f3165fe07b16f5","modified":1647912064935},{"_id":"themes/next/source/css/_common/components/pages/index.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1647912064936},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"56d719bcdcba3d725141c55bbd4b168f3942f912","modified":1647912064938},{"_id":"themes/next/source/css/_common/components/post/index.styl","hash":"df2fbd0ada00f37439b0de965c6f1c29d3c97429","modified":1647912064939},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fde10ce94e9ae21a03b60d41d532835b54abdcb1","modified":1647912064935},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"eebe3013a9a976011570dce2d04dfeae4c31d790","modified":1647912064941},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"791bc9befb0d4d06e3e517eccfe0bc3551a02a60","modified":1647912064941},{"_id":"themes/next/source/css/_common/components/post/post-footer.styl","hash":"e53a5eb1d1771e284044bdb0bc0ed2de27923669","modified":1647912064942},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"c34936a17c3d8af6c0988ac6746d7509dc0b50eb","modified":1647912064943},{"_id":"themes/next/source/css/_common/components/post/post-body.styl","hash":"7a34d020877273dcf11c25fa481409300efb8659","modified":1647912064940},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"9043d9bc2db35ca000c79258ef89fdb161dc43fb","modified":1647912064945},{"_id":"themes/next/source/css/_common/components/third-party/disqusjs.styl","hash":"c1e9edbfd1c3696b35d5452ae2e6d766f3fe91aa","modified":1647912064948},{"_id":"themes/next/source/css/_common/components/third-party/gitter.styl","hash":"7b36f776c41fbb744572c5de2c8d49b35656ec21","modified":1647912064949},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"fb165c1a0d990c5cf98b87773e0dc50410229b96","modified":1647912064949},{"_id":"themes/next/source/css/_common/components/third-party/index.styl","hash":"0c4c5e39f8ac12febaa0f4ff7265151e139edad8","modified":1647912064950},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"0a779f955a0e25df0852e0731517dadb234aa181","modified":1647912064946},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"1e5776ad4c5c8bcf7596ac74dcabc30704b3f5a0","modified":1647912064951},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"0527153aa821bdbdb84c7b47f60e3cefd95a742f","modified":1647912064952},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"c8648c8ea3105556be0068d9fb2735261d0d94bc","modified":1647912064958},{"_id":"themes/next/source/css/_common/outline/header/index.styl","hash":"67fc7a1eb59c8451eec34e572cbb2fd1424757bc","modified":1647912064959},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"49c26184580fde8a732899a4de5aae8662e289b8","modified":1647912064954},{"_id":"themes/next/source/css/_common/components/third-party/utterances.styl","hash":"d28856f365a9373c4ae6fe1e5673d63df2dfd65f","modified":1647912064955},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"2db695204d39e4c7daa7b91585a0ea4b06b49f11","modified":1647912064960},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"05af22f3edc2383a3d97ec4c05e9ac43b014bead","modified":1647912064959},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"86b0925e968f35bbc76b473a861e8f9797f7580e","modified":1647912064961},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"d9bc2b520636b9df7f946295cd430593df4118ff","modified":1647912064962},{"_id":"themes/next/source/css/_common/outline/footer/index.styl","hash":"651a115246c7b8037f0df1086c46fc3f884782d6","modified":1647938098713},{"_id":"themes/next/source/css/_common/outline/sidebar/index.styl","hash":"9964a96f9a647cfb16b97679eced79d07e084e6d","modified":1647912064964},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2c2bfbc34b6f19d262ae7c041474985e12f4f4ad","modified":1647912064965},{"_id":"themes/next/source/js/third-party/comments/disqus.js","hash":"5460de247c038d6cfbe774d7f8747f0a958d9017","modified":1647912065031},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"d8a028f532d562e6a86bb3b9c7b992e4b6dbbb51","modified":1647912064965},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"4d29b6ae7ed3dc44b10df851a4128b6441efa8be","modified":1647912064944},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"69dff7cf231d01f85671758455726dd666664a73","modified":1647912064945},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"63d8f5f169c2b1c969928fc79244c5fe89ee484e","modified":1647912064967},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"57ed6770535ecb2e6485a0c87d4de6d6476368b9","modified":1647912064969},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"081345490271840855d1238b969dbf2e0a2bba8f","modified":1647912064971},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"6681ffe283f8a7e3c86310ef4f6ca1e499c1a19f","modified":1647912064971},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"db4f3263b2b6551dd56bfdf33cceaf81661a3611","modified":1647912064970},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2de038def2cb91da143b14696366c14a66e0e569","modified":1647912064972},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"a4003e1408844568cb5102a5a111046cb19b2d31","modified":1647912064976},{"_id":"themes/next/source/css/_common/scaffolding/highlight/index.styl","hash":"ee05c1d00bc38397bd320128bbe15d05d9100039","modified":1647912064977},{"_id":"themes/next/source/css/_common/scaffolding/tags/index.styl","hash":"e22fde6f1657d311d46f64d868c4491d535c8caa","modified":1647912064982},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"8d9218980e185210ce034e9769ab639b9630fd88","modified":1647912064982},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"531daf2612c6217950677a2d03924459ce57c291","modified":1647912064984},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","hash":"1c282d6c2151346d1f0aa95055d17abe77054ec9","modified":1647912065031},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7075dd32dd70da1e161e4bd14b46f1e8be62fa3c","modified":1647912064984},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"6b3680e0dbea8e14c1cec24ef63b7fae5e37f7ef","modified":1647912064981},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"2e9dc3b3546e19e9de18050ad04b1741841116bc","modified":1647912064987},{"_id":"themes/next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"c7754dc6c866928b538f0863a05b96ec44b5e986","modified":1647912064985},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"77122986509a6b4968bae2729417b7016137534c","modified":1647912064987},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f71b2022094c5bc8c74b4ed049639f7262e0b182","modified":1647912064988},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"1c324d56ae83e96db2c4c6d63edd7ee51c936fc1","modified":1647912064966},{"_id":"themes/next/source/images/wechatpay.png","hash":"28fd37b07988aa0932eebcbe49947a97963da74d","modified":1647940054000},{"_id":"themes/next/source/images/alipay.jpg","hash":"f579ec31222a5dc6898024ddb7e61d90fbffd1c7","modified":1647940111000},{"_id":"themes/next/source/images/kebi.jpeg","hash":"4231ba6a8a28f94a15404abb1c51e3c91a67cae1","modified":1637147303123},{"_id":"public/categories/index.html","hash":"fca1338d4afd1457a124d22a861655be6952c947","modified":1647943963389},{"_id":"public/tags/index.html","hash":"6c0248ecf593ce9130d8971cd3de931bfad27e1c","modified":1647943963389},{"_id":"public/aboutMe/index.html","hash":"72d77ea5ca6259d2f545ff3c5c9c6da9f81ea51e","modified":1647943963389},{"_id":"public/categories/markdown/index.html","hash":"5196abdd5469c4d5a8e4105e1ccfea1e2a19670f","modified":1647943963389},{"_id":"public/categories/react-native/index.html","hash":"d5a5579f935cf78bf386ad5a4459bf5e5c55a5e2","modified":1647943963389},{"_id":"public/categories/react/index.html","hash":"503ce77322bbfe005baf14dd3a30fb836fb37639","modified":1647943963389},{"_id":"public/categories/react/react-hooks/index.html","hash":"cb947fe32a6fc5031c7e04007ce214b690549f51","modified":1647943963389},{"_id":"public/archives/2018/index.html","hash":"046b1103626999aeb461d5992dacb1c64b3611aa","modified":1647943963389},{"_id":"public/archives/2018/11/index.html","hash":"6eb632fe1d675091127ab84b3259d8de88c07d2f","modified":1647943963389},{"_id":"public/archives/2022/index.html","hash":"74e36429c53675a6b0ebdfd15742fc86ebd099ea","modified":1647943963389},{"_id":"public/archives/2022/03/index.html","hash":"af1cf2c4a0b507feed1da024f162abeda948c7c7","modified":1647943963389},{"_id":"public/tags/markdown/index.html","hash":"348987024a09c2f951ec79b8d77ecefdc1c4ff63","modified":1647943963389},{"_id":"public/tags/react-native/index.html","hash":"1bd25a5a5926bca75ea47cb553060e20ade8e7d1","modified":1647943963389},{"_id":"public/tags/react/index.html","hash":"e358e365ab809cec73877e267b4eab85387ea7c3","modified":1647943963389},{"_id":"public/tags/react-hooks/index.html","hash":"f2156d0f9f59cd533ec672be53be74b53e46ca7d","modified":1647943963389},{"_id":"public/2022/03/21/markdown的基本用法/index.html","hash":"da4041b04d2ef27bb3880ae620beee5ccf195567","modified":1647943963389},{"_id":"public/2018/11/27/state-hook/index.html","hash":"e5eefba10412293590e1640a9705b18179acb772","modified":1647943963389},{"_id":"public/2018/11/27/Effect-Hook/index.html","hash":"1d3b8b25cf0049855a1f59855d439b44a1ccf9c2","modified":1647943963389},{"_id":"public/2018/11/27/setState/index.html","hash":"4db0c726e6683ccfa24e56c73f16186b00c7918a","modified":1647943963389},{"_id":"public/2018/11/08/react-native组件的生命周期/index.html","hash":"104ab5c4f7675567f32d748e689fbeff25a2c749","modified":1647943963389},{"_id":"public/2018/11/07/react-native环境配置/index.html","hash":"e58b191a435200980b358676ba98e37b927b5a4d","modified":1647943963389},{"_id":"public/2018/11/05/react-native简介/index.html","hash":"192d6ab6519ba00d9ad522505675daa9511079a3","modified":1647943963389},{"_id":"public/index.html","hash":"3ab3f6b29b8989edc4081394ed66cf7285fab2e2","modified":1647943963389},{"_id":"public/archives/index.html","hash":"f9f1e4634083059800305f2b91c0da178409e2c3","modified":1647943963389},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1647943963389},{"_id":"public/images/bitbug_favicon.ico","hash":"072671fbd93cdfb13ff7c55fcc3de85f0317aea2","modified":1647943963389},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1647943963389},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1647943963389},{"_id":"public/images/favicon.ico","hash":"072671fbd93cdfb13ff7c55fcc3de85f0317aea2","modified":1647943963389},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1647943963389},{"_id":"public/images/fuzi.jpg","hash":"98c6d82e703026617ef3a67c907600398a5798de","modified":1647943963389},{"_id":"public/images/GitHub.svg","hash":"abb5430a0c8a926a7c08380e3bb2930c89889662","modified":1647943963389},{"_id":"public/images/csdn.svg","hash":"f393bed7f7391ebc9a7fd7659e34bf26f91ca5a0","modified":1647943963389},{"_id":"public/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1647943963389},{"_id":"public/images/jianshu.svg","hash":"b183dc8364e80fa1f5af0799753b4c7bb8e4cf9a","modified":1647943963389},{"_id":"public/images/juejin.svg","hash":"78dc8bbd3505ea84a199c164b910e1cef9872e9c","modified":1647943963389},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1647943963389},{"_id":"public/images/wechatpay.png","hash":"28fd37b07988aa0932eebcbe49947a97963da74d","modified":1647943963389},{"_id":"public/css/iconfont.css","hash":"3305e9266dbdaebb49080fc23fb39eaabb620cd0","modified":1647943963389},{"_id":"public/css/noscript.css","hash":"54d14cd43dc297950a4a8d39ec9644dd5fc3499f","modified":1647943963389},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1647943963389},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1647943963389},{"_id":"public/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1647943963389},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1647943963389},{"_id":"public/js/utils.js","hash":"e447160d342b1f93df5214b6a733441039ced439","modified":1647943963389},{"_id":"public/js/next-boot.js","hash":"48497e2156a10155dc42311633a110c9685692c9","modified":1647943963389},{"_id":"public/css/main.css","hash":"ba4a49df36fe505cb301dde39f888926d3eadd44","modified":1647943963389},{"_id":"public/images/alipay.jpg","hash":"f579ec31222a5dc6898024ddb7e61d90fbffd1c7","modified":1647943963389},{"_id":"public/images/kebi.jpeg","hash":"4231ba6a8a28f94a15404abb1c51e3c91a67cae1","modified":1647943963389}],"Category":[{"name":"markdown","_id":"cl11zacpg0004rodqcvzu4104"},{"name":"react-native","_id":"cl11zacpm000arodqaulbb7zv"},{"name":"react","_id":"cl11zacpq000jrodqe0pp9y1e"},{"name":"react-hooks","parent":"cl11zacpq000jrodqe0pp9y1e","_id":"cl11zacps000qrodq4gqzb4jq"}],"Data":[],"Page":[{"title":"categories","date":"2018-11-05T08:35:31.000Z","_content":"category_map:\n        hexo:hexo\n        react-native:react-native\n        ubuntu:ubuntu\n        computer vision: computer-vision","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-11-05 16:35:31\n---\ncategory_map:\n        hexo:hexo\n        react-native:react-native\n        ubuntu:ubuntu\n        computer vision: computer-vision","updated":"2022-03-17T12:21:16.717Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl11zacpa0000rodq4iilh2t5","content":"<p>category_map:<br>        hexo:hexo<br>        react-native:react-native<br>        ubuntu:ubuntu<br>        computer vision: computer-vision</p>\n","site":{"data":{}},"excerpt":"","more":"<p>category_map:<br>        hexo:hexo<br>        react-native:react-native<br>        ubuntu:ubuntu<br>        computer vision: computer-vision</p>\n"},{"title":"tags","date":"2018-11-05T08:31:51.000Z","_content":"tag_map:\n\treact-native:react-native\n\tlinux:linux\n\tubuntu:ubuntu\n\tvim:vim\n\ttmux:tmux\n\thexo:hexo\n\tyolo:yolo\n\topencv:opencv\n\tcomputer vision:computer-vision\n","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-11-05 16:31:51\n---\ntag_map:\n\treact-native:react-native\n\tlinux:linux\n\tubuntu:ubuntu\n\tvim:vim\n\ttmux:tmux\n\thexo:hexo\n\tyolo:yolo\n\topencv:opencv\n\tcomputer vision:computer-vision\n","updated":"2022-03-17T12:21:16.719Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cl11zacpe0002rodq6e6u4x6d","content":"<p>tag_map:<br>    react-native:react-native<br>    linux:linux<br>    ubuntu:ubuntu<br>    vim:vim<br>    tmux:tmux<br>    hexo:hexo<br>    yolo:yolo<br>    opencv:opencv<br>    computer vision:computer-vision</p>\n","site":{"data":{}},"excerpt":"","more":"<p>tag_map:<br>    react-native:react-native<br>    linux:linux<br>    ubuntu:ubuntu<br>    vim:vim<br>    tmux:tmux<br>    hexo:hexo<br>    yolo:yolo<br>    opencv:opencv<br>    computer vision:computer-vision</p>\n"},{"title":"个人经历","date":"2018-11-05T06:16:20.000Z","_content":"# 关于作者\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"aboutMe/index.md","raw":"---\ntitle: 个人经历\ndate: 2018-11-05 14:16:20\n\n---\n# 关于作者\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","updated":"2022-03-17T12:21:16.715Z","path":"aboutMe/index.html","comments":1,"layout":"page","_id":"cl11zacpi0006rodqeurfakxl","content":"<h1 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"}],"Post":[{"title":"markdown的基本用法","date":"2022-03-21T06:36:20.000Z","_content":" # 1、标题\n ## 1.1、使用 = 和 - 标记一级和二级标题\n\n一级标题：\n<!-- more -->\n二级标题\n---\n\n```\n## 1.2、使用#标记\n# 一级标题\n## 二级标题\n### 三级标题\n...\n###### 六级标题\n```\n\n# 2、字体\n*斜体*  \n_斜体文本_    \n**粗体**  \n__粗体文本__  \n***粗斜体***  \n___粗斜体文本___\n\n```\n*斜体*  \n_斜体文本_    \n**粗体**  \n__粗体文本__  \n***粗斜体***  \n___粗斜体文本___\n```\n\n# 3、分割线\n你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间任意插入空格。下面每种写法都可以建立分隔线：\n***\n---\n___\n*  *  *\n__ __\n- - - \n\n```md\n***\n---\n___\n*  *  *\n__ __\n- - - \n```\n\n# 4、删除线\n如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 ~~ ：  \n~~足球~~  \n~~保龄球~~   \n篮球\n```md\n~~足球~~  \n~~保龄球~~   \n篮球\n```\n\n# 5、下划线\n<u>下划线</u>\n```\n<u>下划线</u>\n```\n\n# 6、脚注\n脚注是对文本的补充说明。  \nMarkdown 脚注的格式如下:\n```\n[^注明的文本]\n```\n这是一个例子 [^1]。  \n\n[^1]: 学的不仅是技术，更是梦想\n\n# 7、列表\nmarkdown支持无序列表和有序列表。  \n（1）无序列表用（*）、+、- 作为列表标记。\n* 无序列表\n+ 无序列表\n- 无序列表\n\n```md\n* 无序列表\n+ 无序列表\n- 无序列表\n ```\n\n（2）有序列表用数字加“.” 表示：\n1. 第一   \n2. 第二\n\n（3）列表嵌套:\n列表嵌套只需在子列表中的选项前面添加四个空格即可：\n\n1. 第一\n    + 1-1\n    - 1-2\n\n```md\n1. 第一\n    + 1-1\n    - 1-2\n```\n# 8、区块\n1、区块引用是在段落开头使用 `>` 符号:\n> 区块引用  \n\n```md\n> 区块引用  \n ```\n\n2、区块嵌套用多个 `>` 表示：\n\n> 区块最外层\n>> 第一层区块嵌套\n>>> 第二层区块嵌套\n\n```js\n> 区块最外层\n>> 第一层区块嵌套\n>>> 第二层区块嵌套\n```\n\n3、区块中使用列表:\n\n> 区块列表\n> 1. 第一列\n> 2. 第二列\n> + 无序列\n\n```js\n> 区块列表\n> 1. 第一列\n> 2. 第二列\n> + 无序列\n```\n\n4、列表中使用区块\n\n1. 列表\n    > 区块需要在 `>` 前加四个空格\n\n# 9、代码\n1、如果是段落上的一个函数或片段的代码可以用反引号把它包起来（`），例如：\n\n`printf()` 函数\n\n2、代码区块使用 4 个空格或者一个制表符（Tab 键）：   \n\n    这是一段代码啊！！！！\n    \n也可以用 <kbd>```</kbd>包裹一段代码，并指定一种语言（也可不指定）：\n```\nvar a = 1;\nalert(a);\n```\n\n# 10、链接\n链接使用方法如下：\n\n    [链接名称](链接地址)\n例如：\n    [百度](www.baidu.com)\n\n直接显示链接地址： \n<http://baidu.com>\n\n### 高级链接\n```md\n//  用法：\n这个链接用 `度娘` 作为变量 [百度][度娘]\n\n[度娘]: http://baidu.com\n```\n\n这个链接用 `度娘` 作为变量 [百度][度娘]\n\n[度娘]: http://baidu.com\n\n\n\n\n\n# 11、图片\nMarkdown 图片语法格式如下：\n```md\n![alt 属性文本](图片地址)\n\n![alt 属性文本](图片地址 \"可选标题\")\n```\n\n* 开头一个感叹号 !\n+ 接着一个方括号，里面放上图片的替代文字\n- 接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 'title' 属性的文字。\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/b21c918305d24ac5b166cb6d2160d569.png)\n也可以像链接一样用变量定义\n```\n这个链接用 1 作为网址变量 [RUNOOB][1].\n然后在文档的结尾为变量赋值（网址）\n\n[1]: http://********.png\n```\nMarkdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <img> 标签。\n```\n<img src=\"http://static.runoob.com/images/runoob-logo.png\" width=\"50%\">\n```\n# 12、表格\n\nMarkdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。\n\n语法格式如下：\n```\n|  表头   | 表头  |\n|  ----  | ----  |\n| 单元格  | 单元格 |\n| 单元格  | 单元格 |\n```\n|  表头   | 表头  |\n|  ----  | ----  |\n| 单元格  | 单元格 |\n| 单元格  | 单元格 |\n\n## 对齐方式：\n我们可以设置表格的对齐方式：\n\n-: 设置内容和标题栏居右对齐。\n\n:- 设置内容和标题栏居左对齐。\n\n:-: 设置内容和标题栏居中对齐\n\n\n| 左对齐 | 右对齐 | 居中对齐 |\n| :-----| ----: | :----: |\n| 单元格 | 单元格 | 单元格 |\n| 单元格 | 单元格 | 单元格 |\n\n\n# 13、高级技巧\n不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。\n\n目前支持的 HTML 元素有：`<kbd> <b> <i> <em> <sup> <sub> <br>`等 ，如：\n\n```\n 使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑\n```\n> 使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑.\n\nMarkdown 使用反斜杠转义特殊字符：\n\n*斜了*  \n\\*斜了\\*\n\t\n\t*斜了*  \n\t\\*斜了\\*\n\n\n","source":"_posts/markdown的基本用法.md","raw":"---\ntitle: markdown的基本用法\ndate: 2022-03-21 14:36:20\ntags: \n- markdown \ncategories:\n- markdown\t\n---\n # 1、标题\n ## 1.1、使用 = 和 - 标记一级和二级标题\n\n一级标题：\n<!-- more -->\n二级标题\n---\n\n```\n## 1.2、使用#标记\n# 一级标题\n## 二级标题\n### 三级标题\n...\n###### 六级标题\n```\n\n# 2、字体\n*斜体*  \n_斜体文本_    \n**粗体**  \n__粗体文本__  \n***粗斜体***  \n___粗斜体文本___\n\n```\n*斜体*  \n_斜体文本_    \n**粗体**  \n__粗体文本__  \n***粗斜体***  \n___粗斜体文本___\n```\n\n# 3、分割线\n你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间任意插入空格。下面每种写法都可以建立分隔线：\n***\n---\n___\n*  *  *\n__ __\n- - - \n\n```md\n***\n---\n___\n*  *  *\n__ __\n- - - \n```\n\n# 4、删除线\n如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 ~~ ：  \n~~足球~~  \n~~保龄球~~   \n篮球\n```md\n~~足球~~  \n~~保龄球~~   \n篮球\n```\n\n# 5、下划线\n<u>下划线</u>\n```\n<u>下划线</u>\n```\n\n# 6、脚注\n脚注是对文本的补充说明。  \nMarkdown 脚注的格式如下:\n```\n[^注明的文本]\n```\n这是一个例子 [^1]。  \n\n[^1]: 学的不仅是技术，更是梦想\n\n# 7、列表\nmarkdown支持无序列表和有序列表。  \n（1）无序列表用（*）、+、- 作为列表标记。\n* 无序列表\n+ 无序列表\n- 无序列表\n\n```md\n* 无序列表\n+ 无序列表\n- 无序列表\n ```\n\n（2）有序列表用数字加“.” 表示：\n1. 第一   \n2. 第二\n\n（3）列表嵌套:\n列表嵌套只需在子列表中的选项前面添加四个空格即可：\n\n1. 第一\n    + 1-1\n    - 1-2\n\n```md\n1. 第一\n    + 1-1\n    - 1-2\n```\n# 8、区块\n1、区块引用是在段落开头使用 `>` 符号:\n> 区块引用  \n\n```md\n> 区块引用  \n ```\n\n2、区块嵌套用多个 `>` 表示：\n\n> 区块最外层\n>> 第一层区块嵌套\n>>> 第二层区块嵌套\n\n```js\n> 区块最外层\n>> 第一层区块嵌套\n>>> 第二层区块嵌套\n```\n\n3、区块中使用列表:\n\n> 区块列表\n> 1. 第一列\n> 2. 第二列\n> + 无序列\n\n```js\n> 区块列表\n> 1. 第一列\n> 2. 第二列\n> + 无序列\n```\n\n4、列表中使用区块\n\n1. 列表\n    > 区块需要在 `>` 前加四个空格\n\n# 9、代码\n1、如果是段落上的一个函数或片段的代码可以用反引号把它包起来（`），例如：\n\n`printf()` 函数\n\n2、代码区块使用 4 个空格或者一个制表符（Tab 键）：   \n\n    这是一段代码啊！！！！\n    \n也可以用 <kbd>```</kbd>包裹一段代码，并指定一种语言（也可不指定）：\n```\nvar a = 1;\nalert(a);\n```\n\n# 10、链接\n链接使用方法如下：\n\n    [链接名称](链接地址)\n例如：\n    [百度](www.baidu.com)\n\n直接显示链接地址： \n<http://baidu.com>\n\n### 高级链接\n```md\n//  用法：\n这个链接用 `度娘` 作为变量 [百度][度娘]\n\n[度娘]: http://baidu.com\n```\n\n这个链接用 `度娘` 作为变量 [百度][度娘]\n\n[度娘]: http://baidu.com\n\n\n\n\n\n# 11、图片\nMarkdown 图片语法格式如下：\n```md\n![alt 属性文本](图片地址)\n\n![alt 属性文本](图片地址 \"可选标题\")\n```\n\n* 开头一个感叹号 !\n+ 接着一个方括号，里面放上图片的替代文字\n- 接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 'title' 属性的文字。\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/b21c918305d24ac5b166cb6d2160d569.png)\n也可以像链接一样用变量定义\n```\n这个链接用 1 作为网址变量 [RUNOOB][1].\n然后在文档的结尾为变量赋值（网址）\n\n[1]: http://********.png\n```\nMarkdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <img> 标签。\n```\n<img src=\"http://static.runoob.com/images/runoob-logo.png\" width=\"50%\">\n```\n# 12、表格\n\nMarkdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。\n\n语法格式如下：\n```\n|  表头   | 表头  |\n|  ----  | ----  |\n| 单元格  | 单元格 |\n| 单元格  | 单元格 |\n```\n|  表头   | 表头  |\n|  ----  | ----  |\n| 单元格  | 单元格 |\n| 单元格  | 单元格 |\n\n## 对齐方式：\n我们可以设置表格的对齐方式：\n\n-: 设置内容和标题栏居右对齐。\n\n:- 设置内容和标题栏居左对齐。\n\n:-: 设置内容和标题栏居中对齐\n\n\n| 左对齐 | 右对齐 | 居中对齐 |\n| :-----| ----: | :----: |\n| 单元格 | 单元格 | 单元格 |\n| 单元格 | 单元格 | 单元格 |\n\n\n# 13、高级技巧\n不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。\n\n目前支持的 HTML 元素有：`<kbd> <b> <i> <em> <sup> <sub> <br>`等 ，如：\n\n```\n 使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑\n```\n> 使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑.\n\nMarkdown 使用反斜杠转义特殊字符：\n\n*斜了*  \n\\*斜了\\*\n\t\n\t*斜了*  \n\t\\*斜了\\*\n\n\n","slug":"markdown的基本用法","published":1,"updated":"2022-03-22T08:46:34.299Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl11zacpc0001rodq7en12eb1","content":"<h1 id=\"1、标题\"><a href=\"#1、标题\" class=\"headerlink\" title=\"1、标题\"></a>1、标题</h1><h2 id=\"1-1、使用-和-标记一级和二级标题\"><a href=\"#1-1、使用-和-标记一级和二级标题\" class=\"headerlink\" title=\"1.1、使用 = 和 - 标记一级和二级标题\"></a>1.1、使用 = 和 - 标记一级和二级标题</h2><p>一级标题：</p>\n<a id=\"more\"></a>\n<h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 1.2、使用#标记</span><br><span class=\"line\"># 一级标题</span><br><span class=\"line\">## 二级标题</span><br><span class=\"line\">### 三级标题</span><br><span class=\"line\">...</span><br><span class=\"line\">###### 六级标题</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2、字体\"><a href=\"#2、字体\" class=\"headerlink\" title=\"2、字体\"></a>2、字体</h1><p><em>斜体</em><br><em>斜体文本</em><br><strong>粗体</strong><br><strong>粗体文本</strong><br><strong><em>粗斜体</em></strong><br><strong><em>粗斜体文本</em></strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*斜体*  </span><br><span class=\"line\">_斜体文本_    </span><br><span class=\"line\">**粗体**  </span><br><span class=\"line\">__粗体文本__  </span><br><span class=\"line\">***粗斜体***  </span><br><span class=\"line\">___粗斜体文本___</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3、分割线\"><a href=\"#3、分割线\" class=\"headerlink\" title=\"3、分割线\"></a>3、分割线</h1><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间任意插入空格。下面每种写法都可以建立分隔线：</p>\n<hr>\n<hr>\n<hr>\n<hr>\n<hr>\n<hr>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"><span class=\"strong\">**<span class=\"emphasis\">*</span></span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"strong\"><span class=\"section\">---</span></span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"strong\"><span class=\"section\">___</span></span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"strong\"><span class=\"section\">*</span>  <span class=\"emphasis\">*  *</span></span></span></span><br><span class=\"line\"><span class=\"strong\"><span class=\"section\">_<span class=\"emphasis\">_ _</span><span class=\"emphasis\">_</span></span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"strong\"><span class=\"section\">- - - </span></span></span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4、删除线\"><a href=\"#4、删除线\" class=\"headerlink\" title=\"4、删除线\"></a>4、删除线</h1><p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 ~~ ：<br><del>足球</del><br><del>保龄球</del><br>篮球</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~~足球~~  </span><br><span class=\"line\">~~保龄球~~   </span><br><span class=\"line\">篮球</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"5、下划线\"><a href=\"#5、下划线\" class=\"headerlink\" title=\"5、下划线\"></a>5、下划线</h1><p><u>下划线</u></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;u&gt;下划线&lt;/u&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"6、脚注\"><a href=\"#6、脚注\" class=\"headerlink\" title=\"6、脚注\"></a>6、脚注</h1><p>脚注是对文本的补充说明。<br>Markdown 脚注的格式如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[^注明的文本]</span><br></pre></td></tr></table></figure>\n<p>这是一个例子 <a href=\"%E5%AD%A6%E7%9A%84%E4%B8%8D%E4%BB%85%E6%98%AF%E6%8A%80%E6%9C%AF%EF%BC%8C%E6%9B%B4%E6%98%AF%E6%A2%A6%E6%83%B3\">^1</a>。  </p>\n<h1 id=\"7、列表\"><a href=\"#7、列表\" class=\"headerlink\" title=\"7、列表\"></a>7、列表</h1><p>markdown支持无序列表和有序列表。<br>（1）无序列表用（*）、+、- 作为列表标记。</p>\n<ul>\n<li>无序列表</li>\n</ul>\n<ul>\n<li>无序列表</li>\n</ul>\n<ul>\n<li>无序列表</li>\n</ul>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">*</span> 无序列表</span><br><span class=\"line\"><span class=\"bullet\">+</span> 无序列表</span><br><span class=\"line\"><span class=\"bullet\">-</span> 无序列表</span><br></pre></td></tr></table></figure>\n\n<p>（2）有序列表用数字加“.” 表示：</p>\n<ol>\n<li>第一   </li>\n<li>第二</li>\n</ol>\n<p>（3）列表嵌套:<br>列表嵌套只需在子列表中的选项前面添加四个空格即可：</p>\n<ol>\n<li>第一<ul>\n<li>1-1</li>\n</ul>\n<ul>\n<li>1-2</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span> 第一</span><br><span class=\"line\"><span class=\"bullet\">    +</span> 1-1</span><br><span class=\"line\"><span class=\"bullet\">    -</span> 1-2</span><br></pre></td></tr></table></figure>\n<h1 id=\"8、区块\"><a href=\"#8、区块\" class=\"headerlink\" title=\"8、区块\"></a>8、区块</h1><p>1、区块引用是在段落开头使用 <code>&gt;</code> 符号:</p>\n<blockquote>\n<p>区块引用  </p>\n</blockquote>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"quote\">&gt; 区块引用  </span></span><br></pre></td></tr></table></figure>\n\n<p>2、区块嵌套用多个 <code>&gt;</code> 表示：</p>\n<blockquote>\n<p>区块最外层</p>\n<blockquote>\n<p>第一层区块嵌套</p>\n<blockquote>\n<p>第二层区块嵌套</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 区块最外层</span><br><span class=\"line\">&gt;&gt; 第一层区块嵌套</span><br><span class=\"line\">&gt;&gt;&gt; 第二层区块嵌套</span><br></pre></td></tr></table></figure>\n\n<p>3、区块中使用列表:</p>\n<blockquote>\n<p>区块列表</p>\n<ol>\n<li>第一列</li>\n<li>第二列</li>\n</ol>\n<ul>\n<li>无序列</li>\n</ul>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 区块列表</span><br><span class=\"line\">&gt; <span class=\"number\">1.</span> 第一列</span><br><span class=\"line\">&gt; <span class=\"number\">2.</span> 第二列</span><br><span class=\"line\">&gt; + 无序列</span><br></pre></td></tr></table></figure>\n\n<p>4、列表中使用区块</p>\n<ol>\n<li>列表<blockquote>\n<p>区块需要在 <code>&gt;</code> 前加四个空格</p>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"9、代码\"><a href=\"#9、代码\" class=\"headerlink\" title=\"9、代码\"></a>9、代码</h1><p>1、如果是段落上的一个函数或片段的代码可以用反引号把它包起来（`），例如：</p>\n<p><code>printf()</code> 函数</p>\n<p>2、代码区块使用 4 个空格或者一个制表符（Tab 键）：   </p>\n<pre><code>这是一段代码啊！！！！\n</code></pre>\n<p>也可以用 <kbd>```</kbd>包裹一段代码，并指定一种语言（也可不指定）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 1;</span><br><span class=\"line\">alert(a);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"10、链接\"><a href=\"#10、链接\" class=\"headerlink\" title=\"10、链接\"></a>10、链接</h1><p>链接使用方法如下：</p>\n<pre><code>[链接名称](链接地址)\n</code></pre>\n<p>例如：<br>    <a href=\"www.baidu.com\">百度</a></p>\n<p>直接显示链接地址：<br><a href=\"http://baidu.com/\">http://baidu.com</a></p>\n<h3 id=\"高级链接\"><a href=\"#高级链接\" class=\"headerlink\" title=\"高级链接\"></a>高级链接</h3><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//  用法：</span><br><span class=\"line\">这个链接用 <span class=\"code\">`度娘`</span> 作为变量 [<span class=\"string\">百度</span>][<span class=\"symbol\">度娘</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"symbol\">度娘</span>]: <span class=\"link\">http://baidu.com</span></span><br></pre></td></tr></table></figure>\n\n<p>这个链接用 <code>度娘</code> 作为变量 <a href=\"http://baidu.com/\">百度</a></p>\n<h1 id=\"11、图片\"><a href=\"#11、图片\" class=\"headerlink\" title=\"11、图片\"></a>11、图片</h1><p>Markdown 图片语法格式如下：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">alt 属性文本</span>](<span class=\"link\">图片地址</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"string\">alt 属性文本</span>](<span class=\"link\">图片地址 &quot;可选标题&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>开头一个感叹号 !</li>\n</ul>\n<ul>\n<li>接着一个方括号，里面放上图片的替代文字</li>\n</ul>\n<ul>\n<li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/b21c918305d24ac5b166cb6d2160d569.png\" alt=\"在这里插入图片描述\"><br>也可以像链接一样用变量定义</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这个链接用 1 作为网址变量 [RUNOOB][1].</span><br><span class=\"line\">然后在文档的结尾为变量赋值（网址）</span><br><span class=\"line\"></span><br><span class=\"line\">[1]: http://********.png</span><br></pre></td></tr></table></figure>\n<p>Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <img> 标签。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img src=&quot;http://static.runoob.com/images/runoob-logo.png&quot; width=&quot;50%&quot;&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"12、表格\"><a href=\"#12、表格\" class=\"headerlink\" title=\"12、表格\"></a>12、表格</h1><p>Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。</p>\n<p>语法格式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|  表头   | 表头  |</span><br><span class=\"line\">|  ----  | ----  |</span><br><span class=\"line\">| 单元格  | 单元格 |</span><br><span class=\"line\">| 单元格  | 单元格 |</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>表头</th>\n<th>表头</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>单元格</td>\n<td>单元格</td>\n</tr>\n<tr>\n<td>单元格</td>\n<td>单元格</td>\n</tr>\n</tbody></table>\n<h2 id=\"对齐方式：\"><a href=\"#对齐方式：\" class=\"headerlink\" title=\"对齐方式：\"></a>对齐方式：</h2><p>我们可以设置表格的对齐方式：</p>\n<p>-: 设置内容和标题栏居右对齐。</p>\n<p>:- 设置内容和标题栏居左对齐。</p>\n<p>:-: 设置内容和标题栏居中对齐</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">左对齐</th>\n<th align=\"right\">右对齐</th>\n<th align=\"center\">居中对齐</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">单元格</td>\n<td align=\"right\">单元格</td>\n<td align=\"center\">单元格</td>\n</tr>\n<tr>\n<td align=\"left\">单元格</td>\n<td align=\"right\">单元格</td>\n<td align=\"center\">单元格</td>\n</tr>\n</tbody></table>\n<h1 id=\"13、高级技巧\"><a href=\"#13、高级技巧\" class=\"headerlink\" title=\"13、高级技巧\"></a>13、高级技巧</h1><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p>\n<p>目前支持的 HTML 元素有：<code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</code>等 ，如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用 &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Del&lt;/kbd&gt; 重启电脑</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑.</p>\n</blockquote>\n<p>Markdown 使用反斜杠转义特殊字符：</p>\n<p><em>斜了</em><br>*斜了*</p>\n<pre><code>*斜了*  \n\\*斜了\\*\n</code></pre>\n","site":{"data":{}},"excerpt":"<h1 id=\"1、标题\"><a href=\"#1、标题\" class=\"headerlink\" title=\"1、标题\"></a>1、标题</h1><h2 id=\"1-1、使用-和-标记一级和二级标题\"><a href=\"#1-1、使用-和-标记一级和二级标题\" class=\"headerlink\" title=\"1.1、使用 = 和 - 标记一级和二级标题\"></a>1.1、使用 = 和 - 标记一级和二级标题</h2><p>一级标题：</p>","more":"<h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">## 1.2、使用#标记</span><br><span class=\"line\"># 一级标题</span><br><span class=\"line\">## 二级标题</span><br><span class=\"line\">### 三级标题</span><br><span class=\"line\">...</span><br><span class=\"line\">###### 六级标题</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2、字体\"><a href=\"#2、字体\" class=\"headerlink\" title=\"2、字体\"></a>2、字体</h1><p><em>斜体</em><br><em>斜体文本</em><br><strong>粗体</strong><br><strong>粗体文本</strong><br><strong><em>粗斜体</em></strong><br><strong><em>粗斜体文本</em></strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*斜体*  </span><br><span class=\"line\">_斜体文本_    </span><br><span class=\"line\">**粗体**  </span><br><span class=\"line\">__粗体文本__  </span><br><span class=\"line\">***粗斜体***  </span><br><span class=\"line\">___粗斜体文本___</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3、分割线\"><a href=\"#3、分割线\" class=\"headerlink\" title=\"3、分割线\"></a>3、分割线</h1><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间任意插入空格。下面每种写法都可以建立分隔线：</p>\n<hr>\n<hr>\n<hr>\n<hr>\n<hr>\n<hr>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"><span class=\"strong\">**<span class=\"emphasis\">*</span></span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"strong\"><span class=\"section\">---</span></span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"strong\"><span class=\"section\">___</span></span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"strong\"><span class=\"section\">*</span>  <span class=\"emphasis\">*  *</span></span></span></span><br><span class=\"line\"><span class=\"strong\"><span class=\"section\">_<span class=\"emphasis\">_ _</span><span class=\"emphasis\">_</span></span></span></span><br><span class=\"line\"><span class=\"emphasis\"><span class=\"strong\"><span class=\"section\">- - - </span></span></span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4、删除线\"><a href=\"#4、删除线\" class=\"headerlink\" title=\"4、删除线\"></a>4、删除线</h1><p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 ~~ ：<br><del>足球</del><br><del>保龄球</del><br>篮球</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~~足球~~  </span><br><span class=\"line\">~~保龄球~~   </span><br><span class=\"line\">篮球</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"5、下划线\"><a href=\"#5、下划线\" class=\"headerlink\" title=\"5、下划线\"></a>5、下划线</h1><p><u>下划线</u></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;u&gt;下划线&lt;/u&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"6、脚注\"><a href=\"#6、脚注\" class=\"headerlink\" title=\"6、脚注\"></a>6、脚注</h1><p>脚注是对文本的补充说明。<br>Markdown 脚注的格式如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[^注明的文本]</span><br></pre></td></tr></table></figure>\n<p>这是一个例子 <a href=\"%E5%AD%A6%E7%9A%84%E4%B8%8D%E4%BB%85%E6%98%AF%E6%8A%80%E6%9C%AF%EF%BC%8C%E6%9B%B4%E6%98%AF%E6%A2%A6%E6%83%B3\">^1</a>。  </p>\n<h1 id=\"7、列表\"><a href=\"#7、列表\" class=\"headerlink\" title=\"7、列表\"></a>7、列表</h1><p>markdown支持无序列表和有序列表。<br>（1）无序列表用（*）、+、- 作为列表标记。</p>\n<ul>\n<li>无序列表</li>\n</ul>\n<ul>\n<li>无序列表</li>\n</ul>\n<ul>\n<li>无序列表</li>\n</ul>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">*</span> 无序列表</span><br><span class=\"line\"><span class=\"bullet\">+</span> 无序列表</span><br><span class=\"line\"><span class=\"bullet\">-</span> 无序列表</span><br></pre></td></tr></table></figure>\n\n<p>（2）有序列表用数字加“.” 表示：</p>\n<ol>\n<li>第一   </li>\n<li>第二</li>\n</ol>\n<p>（3）列表嵌套:<br>列表嵌套只需在子列表中的选项前面添加四个空格即可：</p>\n<ol>\n<li>第一<ul>\n<li>1-1</li>\n</ul>\n<ul>\n<li>1-2</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">1.</span> 第一</span><br><span class=\"line\"><span class=\"bullet\">    +</span> 1-1</span><br><span class=\"line\"><span class=\"bullet\">    -</span> 1-2</span><br></pre></td></tr></table></figure>\n<h1 id=\"8、区块\"><a href=\"#8、区块\" class=\"headerlink\" title=\"8、区块\"></a>8、区块</h1><p>1、区块引用是在段落开头使用 <code>&gt;</code> 符号:</p>\n<blockquote>\n<p>区块引用  </p>\n</blockquote>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"quote\">&gt; 区块引用  </span></span><br></pre></td></tr></table></figure>\n\n<p>2、区块嵌套用多个 <code>&gt;</code> 表示：</p>\n<blockquote>\n<p>区块最外层</p>\n<blockquote>\n<p>第一层区块嵌套</p>\n<blockquote>\n<p>第二层区块嵌套</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 区块最外层</span><br><span class=\"line\">&gt;&gt; 第一层区块嵌套</span><br><span class=\"line\">&gt;&gt;&gt; 第二层区块嵌套</span><br></pre></td></tr></table></figure>\n\n<p>3、区块中使用列表:</p>\n<blockquote>\n<p>区块列表</p>\n<ol>\n<li>第一列</li>\n<li>第二列</li>\n</ol>\n<ul>\n<li>无序列</li>\n</ul>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 区块列表</span><br><span class=\"line\">&gt; <span class=\"number\">1.</span> 第一列</span><br><span class=\"line\">&gt; <span class=\"number\">2.</span> 第二列</span><br><span class=\"line\">&gt; + 无序列</span><br></pre></td></tr></table></figure>\n\n<p>4、列表中使用区块</p>\n<ol>\n<li>列表<blockquote>\n<p>区块需要在 <code>&gt;</code> 前加四个空格</p>\n</blockquote>\n</li>\n</ol>\n<h1 id=\"9、代码\"><a href=\"#9、代码\" class=\"headerlink\" title=\"9、代码\"></a>9、代码</h1><p>1、如果是段落上的一个函数或片段的代码可以用反引号把它包起来（`），例如：</p>\n<p><code>printf()</code> 函数</p>\n<p>2、代码区块使用 4 个空格或者一个制表符（Tab 键）：   </p>\n<pre><code>这是一段代码啊！！！！\n</code></pre>\n<p>也可以用 <kbd>```</kbd>包裹一段代码，并指定一种语言（也可不指定）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 1;</span><br><span class=\"line\">alert(a);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"10、链接\"><a href=\"#10、链接\" class=\"headerlink\" title=\"10、链接\"></a>10、链接</h1><p>链接使用方法如下：</p>\n<pre><code>[链接名称](链接地址)\n</code></pre>\n<p>例如：<br>    <a href=\"www.baidu.com\">百度</a></p>\n<p>直接显示链接地址：<br><a href=\"http://baidu.com/\">http://baidu.com</a></p>\n<h3 id=\"高级链接\"><a href=\"#高级链接\" class=\"headerlink\" title=\"高级链接\"></a>高级链接</h3><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//  用法：</span><br><span class=\"line\">这个链接用 <span class=\"code\">`度娘`</span> 作为变量 [<span class=\"string\">百度</span>][<span class=\"symbol\">度娘</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"symbol\">度娘</span>]: <span class=\"link\">http://baidu.com</span></span><br></pre></td></tr></table></figure>\n\n<p>这个链接用 <code>度娘</code> 作为变量 <a href=\"http://baidu.com/\">百度</a></p>\n<h1 id=\"11、图片\"><a href=\"#11、图片\" class=\"headerlink\" title=\"11、图片\"></a>11、图片</h1><p>Markdown 图片语法格式如下：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![<span class=\"string\">alt 属性文本</span>](<span class=\"link\">图片地址</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">![<span class=\"string\">alt 属性文本</span>](<span class=\"link\">图片地址 &quot;可选标题&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>开头一个感叹号 !</li>\n</ul>\n<ul>\n<li>接着一个方括号，里面放上图片的替代文字</li>\n</ul>\n<ul>\n<li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。</li>\n</ul>\n<p><img src=\"https://img-blog.csdnimg.cn/b21c918305d24ac5b166cb6d2160d569.png\" alt=\"在这里插入图片描述\"><br>也可以像链接一样用变量定义</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这个链接用 1 作为网址变量 [RUNOOB][1].</span><br><span class=\"line\">然后在文档的结尾为变量赋值（网址）</span><br><span class=\"line\"></span><br><span class=\"line\">[1]: http://********.png</span><br></pre></td></tr></table></figure>\n<p>Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <img> 标签。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;img src=&quot;http://static.runoob.com/images/runoob-logo.png&quot; width=&quot;50%&quot;&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"12、表格\"><a href=\"#12、表格\" class=\"headerlink\" title=\"12、表格\"></a>12、表格</h1><p>Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。</p>\n<p>语法格式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|  表头   | 表头  |</span><br><span class=\"line\">|  ----  | ----  |</span><br><span class=\"line\">| 单元格  | 单元格 |</span><br><span class=\"line\">| 单元格  | 单元格 |</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>表头</th>\n<th>表头</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>单元格</td>\n<td>单元格</td>\n</tr>\n<tr>\n<td>单元格</td>\n<td>单元格</td>\n</tr>\n</tbody></table>\n<h2 id=\"对齐方式：\"><a href=\"#对齐方式：\" class=\"headerlink\" title=\"对齐方式：\"></a>对齐方式：</h2><p>我们可以设置表格的对齐方式：</p>\n<p>-: 设置内容和标题栏居右对齐。</p>\n<p>:- 设置内容和标题栏居左对齐。</p>\n<p>:-: 设置内容和标题栏居中对齐</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">左对齐</th>\n<th align=\"right\">右对齐</th>\n<th align=\"center\">居中对齐</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">单元格</td>\n<td align=\"right\">单元格</td>\n<td align=\"center\">单元格</td>\n</tr>\n<tr>\n<td align=\"left\">单元格</td>\n<td align=\"right\">单元格</td>\n<td align=\"center\">单元格</td>\n</tr>\n</tbody></table>\n<h1 id=\"13、高级技巧\"><a href=\"#13、高级技巧\" class=\"headerlink\" title=\"13、高级技巧\"></a>13、高级技巧</h1><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p>\n<p>目前支持的 HTML 元素有：<code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</code>等 ，如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用 &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Del&lt;/kbd&gt; 重启电脑</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑.</p>\n</blockquote>\n<p>Markdown 使用反斜杠转义特殊字符：</p>\n<p><em>斜了</em><br>*斜了*</p>\n<pre><code>*斜了*  \n\\*斜了\\*\n</code></pre>"},{"title":"react-native简介","date":"2018-11-05T07:19:45.000Z","type":"tags","_content":"### 用 React 编写移动应用 React Native <img src='https://www.oschina.net/build/oschina/project/stylesheets/imgs/badge_recommend.svg' width=\"20\" height=\"20\"/>\n**ReactNative ** 可以基于目前大热的开源JavaScript库React.js来开发iOS和Android原生App。而且React Native已经用于生产环境——Facebook Groups iOS 应用就是基于它开发的。\n\n <!-- more -->\n![react-native](http://static.oschina.net/uploads/img/201503/28132016_EqCq.jpg)\n\nReact Native的原理是在JavaScript中用React抽象操作系统原生的UI组件，代替DOM元素来渲染，比如以 `<View>` 取代 `<div>`，以`<Image>`替代`<img>`等。\n\n在幕后，React Native在主线程之外，在另一个背景线程里运行JavaScript引擎，两个线程之间通过一批量化的async消息协议来通信（有一个专门的React插件）。\n\nUI方面React Native提供跨平台的类似Flexbox的布局系统，还支持CSS子集。可以用JSX或者普通JavaScript语言，还有[CoffeeScript](https://coffeescript.org/ 'CoffeeScript') 和 [TypeScript](http://www.typescriptlang.org/ 'TypeScript') 来开发。\n\n更好的是，由于基于Web技术，开发起来可以像在浏览器里那样随时在仿真程序中查看应用运行情况，刷新一下就行，无需编译，爽吧。\n\nReact Native比起标准Web开发或原生开发能够带来的三大好处：\n1.手势识别：基于Web技术（HTML5/JavaScript）构建的移动应用经常被抱怨缺乏及时响应。而基于原生UI的React Native能避免这些问题从而实现实时响应。\n2.原生组件：使用HTML5/JavaScript实现的组件比起原生组件总是让人感觉差一截，而React Native由于采用了原生UI组件自然没有此问题。\n3.样式和布局：iOS、Android和基于Web的应用各自有不同的样式和布局机制。React Native通过一个基于FlexBox的布局引擎在所有移动平台上实现了一致的跨平台样式和布局方案。\n\n触摸事件处理：\n\n```\nimport React, { Component } from 'react';\nimport { ScrollView, TouchableHighlight, Text, StyleSheet } from 'react-native';\n\nclass TouchDemo extends Component{\n  render() {\n    return (\n      <ScrollView>\n        <TouchableHighlight onPress={() => console.log('pressed')}>\n          <Text style={styles.txt}>Proper Touch Handling</Text>\n        </TouchableHighlight>\n      </ScrollView>\n    );\n  },\n};\nconst styles = StyleSheet.create({\n  txt:{\n    fontSize: 14,\n    color: '#333333'\n  }\n})\n\n```\n","source":"_posts/react-native简介.md","raw":"---\ntitle: react-native简介\ndate: 2018-11-05 15:19:45\ntype: 'tags'\ntags:                 \n- react-native\ncategories:\n- react-native\n---\n### 用 React 编写移动应用 React Native <img src='https://www.oschina.net/build/oschina/project/stylesheets/imgs/badge_recommend.svg' width=\"20\" height=\"20\"/>\n**ReactNative ** 可以基于目前大热的开源JavaScript库React.js来开发iOS和Android原生App。而且React Native已经用于生产环境——Facebook Groups iOS 应用就是基于它开发的。\n\n <!-- more -->\n![react-native](http://static.oschina.net/uploads/img/201503/28132016_EqCq.jpg)\n\nReact Native的原理是在JavaScript中用React抽象操作系统原生的UI组件，代替DOM元素来渲染，比如以 `<View>` 取代 `<div>`，以`<Image>`替代`<img>`等。\n\n在幕后，React Native在主线程之外，在另一个背景线程里运行JavaScript引擎，两个线程之间通过一批量化的async消息协议来通信（有一个专门的React插件）。\n\nUI方面React Native提供跨平台的类似Flexbox的布局系统，还支持CSS子集。可以用JSX或者普通JavaScript语言，还有[CoffeeScript](https://coffeescript.org/ 'CoffeeScript') 和 [TypeScript](http://www.typescriptlang.org/ 'TypeScript') 来开发。\n\n更好的是，由于基于Web技术，开发起来可以像在浏览器里那样随时在仿真程序中查看应用运行情况，刷新一下就行，无需编译，爽吧。\n\nReact Native比起标准Web开发或原生开发能够带来的三大好处：\n1.手势识别：基于Web技术（HTML5/JavaScript）构建的移动应用经常被抱怨缺乏及时响应。而基于原生UI的React Native能避免这些问题从而实现实时响应。\n2.原生组件：使用HTML5/JavaScript实现的组件比起原生组件总是让人感觉差一截，而React Native由于采用了原生UI组件自然没有此问题。\n3.样式和布局：iOS、Android和基于Web的应用各自有不同的样式和布局机制。React Native通过一个基于FlexBox的布局引擎在所有移动平台上实现了一致的跨平台样式和布局方案。\n\n触摸事件处理：\n\n```\nimport React, { Component } from 'react';\nimport { ScrollView, TouchableHighlight, Text, StyleSheet } from 'react-native';\n\nclass TouchDemo extends Component{\n  render() {\n    return (\n      <ScrollView>\n        <TouchableHighlight onPress={() => console.log('pressed')}>\n          <Text style={styles.txt}>Proper Touch Handling</Text>\n        </TouchableHighlight>\n      </ScrollView>\n    );\n  },\n};\nconst styles = StyleSheet.create({\n  txt:{\n    fontSize: 14,\n    color: '#333333'\n  }\n})\n\n```\n","slug":"react-native简介","published":1,"updated":"2022-03-17T12:21:16.710Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl11zacpf0003rodqg7at9peb","content":"<h3 id=\"用-React-编写移动应用-React-Native\"><a href=\"#用-React-编写移动应用-React-Native\" class=\"headerlink\" title=\"用 React 编写移动应用 React Native \"></a>用 React 编写移动应用 React Native <img src='https://www.oschina.net/build/oschina/project/stylesheets/imgs/badge_recommend.svg' width=\"20\" height=\"20\"/></h3><p>**ReactNative ** 可以基于目前大热的开源JavaScript库React.js来开发iOS和Android原生App。而且React Native已经用于生产环境——Facebook Groups iOS 应用就是基于它开发的。</p>\n <a id=\"more\"></a>\n<p><img src=\"http://static.oschina.net/uploads/img/201503/28132016_EqCq.jpg\" alt=\"react-native\"></p>\n<p>React Native的原理是在JavaScript中用React抽象操作系统原生的UI组件，代替DOM元素来渲染，比如以 <code>&lt;View&gt;</code> 取代 <code>&lt;div&gt;</code>，以<code>&lt;Image&gt;</code>替代<code>&lt;img&gt;</code>等。</p>\n<p>在幕后，React Native在主线程之外，在另一个背景线程里运行JavaScript引擎，两个线程之间通过一批量化的async消息协议来通信（有一个专门的React插件）。</p>\n<p>UI方面React Native提供跨平台的类似Flexbox的布局系统，还支持CSS子集。可以用JSX或者普通JavaScript语言，还有<a href=\"https://coffeescript.org/\" title=\"CoffeeScript\">CoffeeScript</a> 和 <a href=\"http://www.typescriptlang.org/\" title=\"TypeScript\">TypeScript</a> 来开发。</p>\n<p>更好的是，由于基于Web技术，开发起来可以像在浏览器里那样随时在仿真程序中查看应用运行情况，刷新一下就行，无需编译，爽吧。</p>\n<p>React Native比起标准Web开发或原生开发能够带来的三大好处：<br>1.手势识别：基于Web技术（HTML5/JavaScript）构建的移动应用经常被抱怨缺乏及时响应。而基于原生UI的React Native能避免这些问题从而实现实时响应。<br>2.原生组件：使用HTML5/JavaScript实现的组件比起原生组件总是让人感觉差一截，而React Native由于采用了原生UI组件自然没有此问题。<br>3.样式和布局：iOS、Android和基于Web的应用各自有不同的样式和布局机制。React Native通过一个基于FlexBox的布局引擎在所有移动平台上实现了一致的跨平台样式和布局方案。</p>\n<p>触摸事件处理：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &#x27;react&#x27;;</span><br><span class=\"line\">import &#123; ScrollView, TouchableHighlight, Text, StyleSheet &#125; from &#x27;react-native&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">class TouchDemo extends Component&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;ScrollView&gt;</span><br><span class=\"line\">        &lt;TouchableHighlight onPress=&#123;() =&gt; console.log(&#x27;pressed&#x27;)&#125;&gt;</span><br><span class=\"line\">          &lt;Text style=&#123;styles.txt&#125;&gt;Proper Touch Handling&lt;/Text&gt;</span><br><span class=\"line\">        &lt;/TouchableHighlight&gt;</span><br><span class=\"line\">      &lt;/ScrollView&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">const styles = StyleSheet.create(&#123;</span><br><span class=\"line\">  txt:&#123;</span><br><span class=\"line\">    fontSize: 14,</span><br><span class=\"line\">    color: &#x27;#333333&#x27;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"用-React-编写移动应用-React-Native\"><a href=\"#用-React-编写移动应用-React-Native\" class=\"headerlink\" title=\"用 React 编写移动应用 React Native \"></a>用 React 编写移动应用 React Native <img src='https://www.oschina.net/build/oschina/project/stylesheets/imgs/badge_recommend.svg' width=\"20\" height=\"20\"/></h3><p>**ReactNative ** 可以基于目前大热的开源JavaScript库React.js来开发iOS和Android原生App。而且React Native已经用于生产环境——Facebook Groups iOS 应用就是基于它开发的。</p>","more":"<p><img src=\"http://static.oschina.net/uploads/img/201503/28132016_EqCq.jpg\" alt=\"react-native\"></p>\n<p>React Native的原理是在JavaScript中用React抽象操作系统原生的UI组件，代替DOM元素来渲染，比如以 <code>&lt;View&gt;</code> 取代 <code>&lt;div&gt;</code>，以<code>&lt;Image&gt;</code>替代<code>&lt;img&gt;</code>等。</p>\n<p>在幕后，React Native在主线程之外，在另一个背景线程里运行JavaScript引擎，两个线程之间通过一批量化的async消息协议来通信（有一个专门的React插件）。</p>\n<p>UI方面React Native提供跨平台的类似Flexbox的布局系统，还支持CSS子集。可以用JSX或者普通JavaScript语言，还有<a href=\"https://coffeescript.org/\" title=\"CoffeeScript\">CoffeeScript</a> 和 <a href=\"http://www.typescriptlang.org/\" title=\"TypeScript\">TypeScript</a> 来开发。</p>\n<p>更好的是，由于基于Web技术，开发起来可以像在浏览器里那样随时在仿真程序中查看应用运行情况，刷新一下就行，无需编译，爽吧。</p>\n<p>React Native比起标准Web开发或原生开发能够带来的三大好处：<br>1.手势识别：基于Web技术（HTML5/JavaScript）构建的移动应用经常被抱怨缺乏及时响应。而基于原生UI的React Native能避免这些问题从而实现实时响应。<br>2.原生组件：使用HTML5/JavaScript实现的组件比起原生组件总是让人感觉差一截，而React Native由于采用了原生UI组件自然没有此问题。<br>3.样式和布局：iOS、Android和基于Web的应用各自有不同的样式和布局机制。React Native通过一个基于FlexBox的布局引擎在所有移动平台上实现了一致的跨平台样式和布局方案。</p>\n<p>触摸事件处理：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &#x27;react&#x27;;</span><br><span class=\"line\">import &#123; ScrollView, TouchableHighlight, Text, StyleSheet &#125; from &#x27;react-native&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">class TouchDemo extends Component&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;ScrollView&gt;</span><br><span class=\"line\">        &lt;TouchableHighlight onPress=&#123;() =&gt; console.log(&#x27;pressed&#x27;)&#125;&gt;</span><br><span class=\"line\">          &lt;Text style=&#123;styles.txt&#125;&gt;Proper Touch Handling&lt;/Text&gt;</span><br><span class=\"line\">        &lt;/TouchableHighlight&gt;</span><br><span class=\"line\">      &lt;/ScrollView&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">const styles = StyleSheet.create(&#123;</span><br><span class=\"line\">  txt:&#123;</span><br><span class=\"line\">    fontSize: 14,</span><br><span class=\"line\">    color: &#x27;#333333&#x27;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"react-native环境配置","date":"2018-11-07T14:41:17.000Z","type":"tags","_content":"\n### react-native window开发环境搭建\n\n一、安装JDK\n\n1. 从 [Java官网](https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html) 下载JDK并安装。\n\n2. 安装成功可以用java -version查看版本信息，或用 java -c 检测是否安装成功\n <!-- more -->\n\n3. 配置Java的环境变量\n\n   * 添加环境变量JAVA_HOME = C:\\Program Files\\Java\\jdk1.8.0_45;\n\n   *  Path+=%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;\n\n   * CLASSPATH+=%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;\n\n\nJAVA_HOME变量：\n\n![JAVA_HOME](http://images2015.cnblogs.com/blog/546421/201607/546421-20160709102408874-1736443714.png)\n\n​\t\n\nCLASSPATH变量\n\n![CLASSPATH变量](http://images2015.cnblogs.com/blog/546421/201607/546421-20160709102528280-1866646025.png)\n\n二、安装 android SDK\n\n1. 下载 android sdk 并安装；\n\n2. 安装完成后根据 react-native官网 安装 SDK Tools;\n\n3. 配置android环境变量\n\n * 添加 ANDROID_HOME 变量\n ![android-home](http://images2015.cnblogs.com/blog/546421/201607/546421-20160709103101952-2112122131.png)\n\n* 在 Path 变量里添加 %ANDROID_HOME%\\tools;%ANDROID_HOME%\\platform-tools;\n\n三、安装node.js git 环境\n\n四、安装react-native 的命令行工具 react-native-cli\n\n```\nnpm install react-native-cli -g\n```\n\n***备注：*** 官网讲需要安装 python 环境，但是个人感觉好像没用，一直也没安装过，所以安不安装看个人；\n\n\n### 创建我们的项目\n\n1. 生成项目\n```\nreact-native init myApp\n```\n\n\n2. 安装项目依赖包\n```\nnpm install\n```\n\n3. 连接真机或者模拟机，在终端运行 adb devices 查看是否连接设备，真机需要打开开发者模式，然后运行 react-native run-android 生成 apk 安装包。\n\n\n4. 运行 package.json ，命令行运行\n\n```\nreact-native start 或者  npm start\n```\n\n\n5. 打开手机上我们安装的app，会出现如下所示的情况 :\n\n![error](http://images2015.cnblogs.com/blog/546421/201607/546421-20160709113415499-1546806111.png)\n\n\n这时候摇一摇手机，点击Dev Settings后，点击Debug server host & port for device,设置IP和端口\n\n![reload](http://images2015.cnblogs.com/blog/546421/201607/546421-20160709114104467-1570314774.jpg)\n\n再次摇一摇手机，选择Reload ，程序就运行起来，出现Welcome to React Native！\n\n![sucess](http://images2015.cnblogs.com/blog/546421/201607/546421-20160709114253046-223755573.png)\n\n现在就可以尽情的写我们的 code 了。。。\n\n","source":"_posts/react-native环境配置.md","raw":"---\ntitle: react-native环境配置\ndate: 2018-11-07 22:41:17\ntype: 'tags'\ntags:                 \n- react-native\ncategories:\n- react-native\n---\n\n### react-native window开发环境搭建\n\n一、安装JDK\n\n1. 从 [Java官网](https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html) 下载JDK并安装。\n\n2. 安装成功可以用java -version查看版本信息，或用 java -c 检测是否安装成功\n <!-- more -->\n\n3. 配置Java的环境变量\n\n   * 添加环境变量JAVA_HOME = C:\\Program Files\\Java\\jdk1.8.0_45;\n\n   *  Path+=%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;\n\n   * CLASSPATH+=%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;\n\n\nJAVA_HOME变量：\n\n![JAVA_HOME](http://images2015.cnblogs.com/blog/546421/201607/546421-20160709102408874-1736443714.png)\n\n​\t\n\nCLASSPATH变量\n\n![CLASSPATH变量](http://images2015.cnblogs.com/blog/546421/201607/546421-20160709102528280-1866646025.png)\n\n二、安装 android SDK\n\n1. 下载 android sdk 并安装；\n\n2. 安装完成后根据 react-native官网 安装 SDK Tools;\n\n3. 配置android环境变量\n\n * 添加 ANDROID_HOME 变量\n ![android-home](http://images2015.cnblogs.com/blog/546421/201607/546421-20160709103101952-2112122131.png)\n\n* 在 Path 变量里添加 %ANDROID_HOME%\\tools;%ANDROID_HOME%\\platform-tools;\n\n三、安装node.js git 环境\n\n四、安装react-native 的命令行工具 react-native-cli\n\n```\nnpm install react-native-cli -g\n```\n\n***备注：*** 官网讲需要安装 python 环境，但是个人感觉好像没用，一直也没安装过，所以安不安装看个人；\n\n\n### 创建我们的项目\n\n1. 生成项目\n```\nreact-native init myApp\n```\n\n\n2. 安装项目依赖包\n```\nnpm install\n```\n\n3. 连接真机或者模拟机，在终端运行 adb devices 查看是否连接设备，真机需要打开开发者模式，然后运行 react-native run-android 生成 apk 安装包。\n\n\n4. 运行 package.json ，命令行运行\n\n```\nreact-native start 或者  npm start\n```\n\n\n5. 打开手机上我们安装的app，会出现如下所示的情况 :\n\n![error](http://images2015.cnblogs.com/blog/546421/201607/546421-20160709113415499-1546806111.png)\n\n\n这时候摇一摇手机，点击Dev Settings后，点击Debug server host & port for device,设置IP和端口\n\n![reload](http://images2015.cnblogs.com/blog/546421/201607/546421-20160709114104467-1570314774.jpg)\n\n再次摇一摇手机，选择Reload ，程序就运行起来，出现Welcome to React Native！\n\n![sucess](http://images2015.cnblogs.com/blog/546421/201607/546421-20160709114253046-223755573.png)\n\n现在就可以尽情的写我们的 code 了。。。\n\n","slug":"react-native环境配置","published":1,"updated":"2022-03-17T12:21:16.709Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl11zacpj0007rodqevhb1vuq","content":"<h3 id=\"react-native-window开发环境搭建\"><a href=\"#react-native-window开发环境搭建\" class=\"headerlink\" title=\"react-native window开发环境搭建\"></a>react-native window开发环境搭建</h3><p>一、安装JDK</p>\n<ol>\n<li><p>从 <a href=\"https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\">Java官网</a> 下载JDK并安装。</p>\n</li>\n<li><p>安装成功可以用java -version查看版本信息，或用 java -c 检测是否安装成功</p>\n<a id=\"more\"></a>\n</li>\n<li><p>配置Java的环境变量</p>\n<ul>\n<li><p>添加环境变量JAVA_HOME = C:\\Program Files\\Java\\jdk1.8.0_45;</p>\n</li>\n<li><p> Path+=%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;</p>\n</li>\n<li><p>CLASSPATH+=%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;</p>\n</li>\n</ul>\n</li>\n</ol>\n<p>JAVA_HOME变量：</p>\n<p><img src=\"http://images2015.cnblogs.com/blog/546421/201607/546421-20160709102408874-1736443714.png\" alt=\"JAVA_HOME\"></p>\n<p>​    </p>\n<p>CLASSPATH变量</p>\n<p><img src=\"http://images2015.cnblogs.com/blog/546421/201607/546421-20160709102528280-1866646025.png\" alt=\"CLASSPATH变量\"></p>\n<p>二、安装 android SDK</p>\n<ol>\n<li><p>下载 android sdk 并安装；</p>\n</li>\n<li><p>安装完成后根据 react-native官网 安装 SDK Tools;</p>\n</li>\n<li><p>配置android环境变量</p>\n</li>\n</ol>\n<ul>\n<li><p>添加 ANDROID_HOME 变量<br><img src=\"http://images2015.cnblogs.com/blog/546421/201607/546421-20160709103101952-2112122131.png\" alt=\"android-home\"></p>\n</li>\n<li><p>在 Path 变量里添加 %ANDROID_HOME%\\tools;%ANDROID_HOME%\\platform-tools;</p>\n</li>\n</ul>\n<p>三、安装node.js git 环境</p>\n<p>四、安装react-native 的命令行工具 react-native-cli</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install react-native-cli -g</span><br></pre></td></tr></table></figure>\n\n<p><strong><em>备注：</em></strong> 官网讲需要安装 python 环境，但是个人感觉好像没用，一直也没安装过，所以安不安装看个人；</p>\n<h3 id=\"创建我们的项目\"><a href=\"#创建我们的项目\" class=\"headerlink\" title=\"创建我们的项目\"></a>创建我们的项目</h3><ol>\n<li>生成项目<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-native init myApp</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>安装项目依赖包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>连接真机或者模拟机，在终端运行 adb devices 查看是否连接设备，真机需要打开开发者模式，然后运行 react-native run-android 生成 apk 安装包。</p>\n</li>\n</ol>\n<ol start=\"4\">\n<li>运行 package.json ，命令行运行</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-native start 或者  npm start</span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"5\">\n<li>打开手机上我们安装的app，会出现如下所示的情况 :</li>\n</ol>\n<p><img src=\"http://images2015.cnblogs.com/blog/546421/201607/546421-20160709113415499-1546806111.png\" alt=\"error\"></p>\n<p>这时候摇一摇手机，点击Dev Settings后，点击Debug server host &amp; port for device,设置IP和端口</p>\n<p><img src=\"http://images2015.cnblogs.com/blog/546421/201607/546421-20160709114104467-1570314774.jpg\" alt=\"reload\"></p>\n<p>再次摇一摇手机，选择Reload ，程序就运行起来，出现Welcome to React Native！</p>\n<p><img src=\"http://images2015.cnblogs.com/blog/546421/201607/546421-20160709114253046-223755573.png\" alt=\"sucess\"></p>\n<p>现在就可以尽情的写我们的 code 了。。。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"react-native-window开发环境搭建\"><a href=\"#react-native-window开发环境搭建\" class=\"headerlink\" title=\"react-native window开发环境搭建\"></a>react-native window开发环境搭建</h3><p>一、安装JDK</p>\n<ol>\n<li><p>从 <a href=\"https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\">Java官网</a> 下载JDK并安装。</p>\n</li>\n<li><p>安装成功可以用java -version查看版本信息，或用 java -c 检测是否安装成功</p>","more":"</li>\n<li><p>配置Java的环境变量</p>\n<ul>\n<li><p>添加环境变量JAVA_HOME = C:\\Program Files\\Java\\jdk1.8.0_45;</p>\n</li>\n<li><p> Path+=%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;</p>\n</li>\n<li><p>CLASSPATH+=%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;</p>\n</li>\n</ul>\n</li>\n</ol>\n<p>JAVA_HOME变量：</p>\n<p><img src=\"http://images2015.cnblogs.com/blog/546421/201607/546421-20160709102408874-1736443714.png\" alt=\"JAVA_HOME\"></p>\n<p>​    </p>\n<p>CLASSPATH变量</p>\n<p><img src=\"http://images2015.cnblogs.com/blog/546421/201607/546421-20160709102528280-1866646025.png\" alt=\"CLASSPATH变量\"></p>\n<p>二、安装 android SDK</p>\n<ol>\n<li><p>下载 android sdk 并安装；</p>\n</li>\n<li><p>安装完成后根据 react-native官网 安装 SDK Tools;</p>\n</li>\n<li><p>配置android环境变量</p>\n</li>\n</ol>\n<ul>\n<li><p>添加 ANDROID_HOME 变量<br><img src=\"http://images2015.cnblogs.com/blog/546421/201607/546421-20160709103101952-2112122131.png\" alt=\"android-home\"></p>\n</li>\n<li><p>在 Path 变量里添加 %ANDROID_HOME%\\tools;%ANDROID_HOME%\\platform-tools;</p>\n</li>\n</ul>\n<p>三、安装node.js git 环境</p>\n<p>四、安装react-native 的命令行工具 react-native-cli</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install react-native-cli -g</span><br></pre></td></tr></table></figure>\n\n<p><strong><em>备注：</em></strong> 官网讲需要安装 python 环境，但是个人感觉好像没用，一直也没安装过，所以安不安装看个人；</p>\n<h3 id=\"创建我们的项目\"><a href=\"#创建我们的项目\" class=\"headerlink\" title=\"创建我们的项目\"></a>创建我们的项目</h3><ol>\n<li>生成项目<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-native init myApp</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>安装项目依赖包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>连接真机或者模拟机，在终端运行 adb devices 查看是否连接设备，真机需要打开开发者模式，然后运行 react-native run-android 生成 apk 安装包。</p>\n</li>\n</ol>\n<ol start=\"4\">\n<li>运行 package.json ，命令行运行</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-native start 或者  npm start</span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"5\">\n<li>打开手机上我们安装的app，会出现如下所示的情况 :</li>\n</ol>\n<p><img src=\"http://images2015.cnblogs.com/blog/546421/201607/546421-20160709113415499-1546806111.png\" alt=\"error\"></p>\n<p>这时候摇一摇手机，点击Dev Settings后，点击Debug server host &amp; port for device,设置IP和端口</p>\n<p><img src=\"http://images2015.cnblogs.com/blog/546421/201607/546421-20160709114104467-1570314774.jpg\" alt=\"reload\"></p>\n<p>再次摇一摇手机，选择Reload ，程序就运行起来，出现Welcome to React Native！</p>\n<p><img src=\"http://images2015.cnblogs.com/blog/546421/201607/546421-20160709114253046-223755573.png\" alt=\"sucess\"></p>\n<p>现在就可以尽情的写我们的 code 了。。。</p>"},{"title":"state-hook","date":"2018-11-27T08:58:47.000Z","type":"tags","_content":"\n## state-hook\nHook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。\n\n在之前的的hook 介绍里有一段代码:\n<!-- more -->\n ```js   \n\timport { useState } from 'react';\n    ​\n    function Example() {\n      // Declare a new state variable, which we'll call \"count\"\n      const [count, setCount] = useState(0);\n      return (\n        <div>\n          <p>You clicked {count} times</p>\n          <button onClick={() => setCount(count + 1)}>\n            Click me\n          </button>\n        </div>\n      );\n    }\n```\n\n我们将通过将此代码与等效的类示例进行比较来开始学习`Hooks`。\n\n## 等价的类示例\n看下面的这段代码，你会觉得熟悉：\n```js\nclass Example extends Component{\n   constructor(props) {\n      super(props);\n      this.state = {\n        count: 0\n      }\n   }\n\n   render(){\n      return (\n          <div>\n          <p>You clicked {this.state.count} times</p>\n            <button onClick={() => this.setState({ count: this.state.count + 1 })}>\n              Click me\n            </button>\n          </div>\n      )\n   }\n}\n```\n状态以`{count：0}`开始，当用户通过调用this.setState单击按钮时，我们会增加state.count。我们将在整个页面中使用此类的片段。\n\n> **注意** 你可能想知道为什么我们在这里使用计数器而不是更现实的例子。这是为了帮助我们专注于`API`，同时我们仍在使用`Hooks`迈出第一步。\n\n## Hooks和函数组件\n提醒一下，React中的函数组件如下所示：\n```js\n    const Example = (props) => {\n      // You can use Hooks here!\n      return <div />;\n    }\n```\n或者是下面这样的：\n```js\n    function Example(props) {\n      // You can use Hooks here!\n      return <div />;\n    }\n```\n\n 你可能以前将这些称为“无状态组件”。我们现在介绍的这些中具有使用`React`状态的能力，所以我们更喜欢名称`function components`。\n\n `Hook`在`class`内 不起 作用。但是你可以使用它们而不是编写类。\n\n## 什么是Hook\n我们的新示例首先从`React`导入`useState Hook`：\n```js\nimport { useState } from 'react';\nfunction Example() {\n    // ...\n}\n```\n**什么是Hook?** `Hook`是一种特殊功能，可让你“挂钩”`React`功能。例如，`useState`是一个`Hook`，允许你将`React`状态添加到函数组件。我们稍后会学习其他的`Hooks`。\n\n我什么时候使用`Hook`? 如果你编写一个函数组件并意识到你需要为它添加一些状态，那么之前你必须将它转换为一个类。但是现在，你可以在现有功能组件中使用`Hook`。我们现在要做到这一点！\n\n> **注意：** 关于在何处可以使用Hook并且不能在组件中使用`Hook`，有一些特殊规则。我们将在[“钩子规则”]()中学习它们。\n\n## 声明一个状态变量\n在`class`组建中，我们声明一个状态需要像下面这样：\n    ```js\n\tclass Example extends Component {\n        constructor(props) {\n            super(props);\n            this.state = {\n                count: 0\n            }\n        }\n        // ...\n    }\n```\n在函数组件中，我们没有`this`，所以我们不能分配或读取`this.state`。相反，我们直接在组件内部调用`useState Hook`：\n```JS\n    import { useState } from 'react';\n    ​\n    function Example() {\n      const [count, setCount] = useState(0);\n      // ...\n    }\n```\t\n**调用`useState`有什么作用？** 他声明了一个\"状态变量\"。我们的变量叫做`count`，但我们可以称之为其他任何东西，比如`banana`。这是一种在函数调用之间“保留”某些值的方法 - `useState`是一种使用`this.state`在类中提供的完全相同功能的新方法。通常，当函数退出时变量“消失”但`React`保留状态变量。\n\n**我们传递给`useState`的参数是什么？** `useState Hook`的唯一参数是初始状态。与类不同，状态不必是对象。他可以是任何我们需要的内容，比如数字，字符串等。在我们的示例中，我们只需要一个数字来表示用户点击的次数，因此将0作为变量的初始状态。（如果我们想在状态中存储两个不同的值，我们将调用`useState`两次。）\n\n`useState`返回的是什么？ 它返回一对值：当前状态和更新状态的函数。这就是我们编写`const [count，setCount] = useState(0)`的原因。这与类中的 `this.state.count`和`this.setState`类似，只不过现在它们是成对的。\n\n现在我们知道了`useState Hook`的作用，我们的例子应该更有意义\n```JS\n    import { useState } from 'react';\n    ​\n    function Example() {\n      const [count, setCount] = useState(0);\n      // ...\n    }\n```\n我们声明一个名为`count`的状态变量，并将其设置为0。`React`将记住重新渲染之间的当前值，并为我们的函数提供最新的值。如果我们想要更新当前`count`，我们可以调用`setCount`。\n\n> **注意** 你可能想知道：为什么`useState`没有命名为`createState`？“`create`”不会非常准确，因为状态仅在我们的组件第一次呈现时创建。在下一次渲染期间，useState为我们提供了当前状态。否则它根本不会是“状态”！`Hook`名称总是从`use`开始也是有原因的。我们将在后来的`rules hooks`中了解原因。\n\n## 读取状态\n当我们想要在类中显示当前计数时，我们读取`this.state.count`：\n```HTML\n    <p>You clicked {this.state.count} times</p>\n```\n在函数中，我们可以直接使用`count`：\n```HTML\n    <p>You clicked {count} times</p>\n```\n## 更新状态\n在一个类中，我们需要调用`this.setState`来更新`count`状态:\n```JS\n    <button onClick={() => this.setState({ count: this.state.count + 1 })}>\n        Click me\n    </button>\n```\n在函数中，我们已经将`setCount`和`count`作为变量，因此我们不需要`this`：\n```JS\n    <button onClick={() => setCount(count + 1)}>\n        Click me\n    </button>\n```\n## 概括\n现在让我们回顾一下我们逐行学习的内容并检查我们的理解。\n```JS\n     import { useState } from 'react';\n\n     function Example() {\n        const [count, setCount] = useState(0);\n\n        return (\n           <div>\n             <p>You clicked {count} times</p>\n               <button onClick={() => setCount(count + 1)}>\n                    Click me\n               </button>\n           </div>\n          );\n        }\n```\n+ **第1行：** 我们从`React`导入`useState Hook`。它允许我们将本地状态保存在功能组件中。\n\n+ **第2行：** 在`Example`组件中，我们通过调用`useState Hook`来声明一个新的状态变量。它返回一对值，我们给它们命名。我们调用变量`count`，因为它包含按钮点击次数。\n我们通过传递`0`作为唯一的`useState`参数将其初始化为零。第二个返回的项本身就是一个函数。它允许我们更新`count`，因此我们将其命名为`setCount`。\n\n+ **第9行：** 当用户点击时，我们使用新值调用`setCount`。然后，`React`将重新呈现`Example`组件，并将新`count`值传递给它。\n\n一开始看起来似乎有很多东西需要考虑。不要急于求成！如果你在解释有不了解的，请再次查看上面的代码并尝试从上到下阅读。我们保证，一旦你试图“忘记”状态如何在`class`上工作，并以新的角度看待这个代码，它就会有意义。\n\n### **提示：方括号意味着什么？**\n当我们声明一个状态变量时，你可能已经注意到方括号：\n```JS\n    const [count, setCount] = useState(0);\n```\n左侧的名称不是`React API`的一部分。你可以命名自己觉得合适的状态变量：\n```JS\n    const [fruit, setFruit] = useState('banana');\n```\n 此`JavaScript`语法称为“数组解构”。这意味着我们正在创建两个新变量`fruit`和`setFruit`，其中`fruit`设置为`useState`返回的第一个值，`setFruit`是第二个。等同于下面的代码：\n```JS\n    var fruitStateVariable = useState('banana');\n    var fruit = fruitStateVariable[0];\n    var setFruit = fruitStateVariable[1];\n```\n当我们使用`useState`声明一个状态变量时，它返回一对 - 一个包含两个项的数组。第一项是当前值，第二项是允许我们更新第一项值的函数。使用`[0]`和`[1]`访问它们有点令人困惑，因为它们具有特定含义。这就是我们使用数组解构的原因。\n\n> **注意:** 你可能很好奇`React`如何知道哪个组件`useState`对应，因为我们没有将这样的任何内容传递给`React`。我们将在FAQ部分回答[这个问题](https://reactjs.org/docs/hooks-faq.html#how-does-react-associate-hook-calls-with-components)和许多其他问题。\n\n### 提示：使用多个状态变量\n将状态变量声明为一对`[something，setSomething]`也很方便，因为如果我们想要使用多个状态变量，它可以让我们为不同的状态变量赋予不同的名称：\n```JS\n    function ExampleWithManyStates() {\n      // Declare multiple state variables!\n      const [age, setAge] = useState(42);\n      const [fruit, setFruit] = useState('banana');\n      const [todos, setTodos] = useState([{ text: 'Learn Hooks' }]);\n      //...\n    }\n```\n在上面的组件中，我们将`age`，`fruit`和`todos`作为局部变量，我们可以单独更新它们：\n```JS\n    function handleOrangeClick() {\n        // Similar to this.setState({ fruit: 'orange' })\n        setFruit('orange');\n      }\n```\n你 **不必使用** 许多状态变量。 状态变量可以很好地保存对象和数组，因此仍然可以将相关数据组合在一起。但是，与类中的this.setState不同，**更新状态变量总是替换它而不是合并它。**\n","source":"_posts/state-hook.md","raw":"---\ntitle: state-hook\ndate: 2018-11-27 16:58:47\ntype: 'tags'\ntags:\n- react\n- react-hooks\ncategories:\n- react\n- react-hooks\n---\n\n## state-hook\nHook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。\n\n在之前的的hook 介绍里有一段代码:\n<!-- more -->\n ```js   \n\timport { useState } from 'react';\n    ​\n    function Example() {\n      // Declare a new state variable, which we'll call \"count\"\n      const [count, setCount] = useState(0);\n      return (\n        <div>\n          <p>You clicked {count} times</p>\n          <button onClick={() => setCount(count + 1)}>\n            Click me\n          </button>\n        </div>\n      );\n    }\n```\n\n我们将通过将此代码与等效的类示例进行比较来开始学习`Hooks`。\n\n## 等价的类示例\n看下面的这段代码，你会觉得熟悉：\n```js\nclass Example extends Component{\n   constructor(props) {\n      super(props);\n      this.state = {\n        count: 0\n      }\n   }\n\n   render(){\n      return (\n          <div>\n          <p>You clicked {this.state.count} times</p>\n            <button onClick={() => this.setState({ count: this.state.count + 1 })}>\n              Click me\n            </button>\n          </div>\n      )\n   }\n}\n```\n状态以`{count：0}`开始，当用户通过调用this.setState单击按钮时，我们会增加state.count。我们将在整个页面中使用此类的片段。\n\n> **注意** 你可能想知道为什么我们在这里使用计数器而不是更现实的例子。这是为了帮助我们专注于`API`，同时我们仍在使用`Hooks`迈出第一步。\n\n## Hooks和函数组件\n提醒一下，React中的函数组件如下所示：\n```js\n    const Example = (props) => {\n      // You can use Hooks here!\n      return <div />;\n    }\n```\n或者是下面这样的：\n```js\n    function Example(props) {\n      // You can use Hooks here!\n      return <div />;\n    }\n```\n\n 你可能以前将这些称为“无状态组件”。我们现在介绍的这些中具有使用`React`状态的能力，所以我们更喜欢名称`function components`。\n\n `Hook`在`class`内 不起 作用。但是你可以使用它们而不是编写类。\n\n## 什么是Hook\n我们的新示例首先从`React`导入`useState Hook`：\n```js\nimport { useState } from 'react';\nfunction Example() {\n    // ...\n}\n```\n**什么是Hook?** `Hook`是一种特殊功能，可让你“挂钩”`React`功能。例如，`useState`是一个`Hook`，允许你将`React`状态添加到函数组件。我们稍后会学习其他的`Hooks`。\n\n我什么时候使用`Hook`? 如果你编写一个函数组件并意识到你需要为它添加一些状态，那么之前你必须将它转换为一个类。但是现在，你可以在现有功能组件中使用`Hook`。我们现在要做到这一点！\n\n> **注意：** 关于在何处可以使用Hook并且不能在组件中使用`Hook`，有一些特殊规则。我们将在[“钩子规则”]()中学习它们。\n\n## 声明一个状态变量\n在`class`组建中，我们声明一个状态需要像下面这样：\n    ```js\n\tclass Example extends Component {\n        constructor(props) {\n            super(props);\n            this.state = {\n                count: 0\n            }\n        }\n        // ...\n    }\n```\n在函数组件中，我们没有`this`，所以我们不能分配或读取`this.state`。相反，我们直接在组件内部调用`useState Hook`：\n```JS\n    import { useState } from 'react';\n    ​\n    function Example() {\n      const [count, setCount] = useState(0);\n      // ...\n    }\n```\t\n**调用`useState`有什么作用？** 他声明了一个\"状态变量\"。我们的变量叫做`count`，但我们可以称之为其他任何东西，比如`banana`。这是一种在函数调用之间“保留”某些值的方法 - `useState`是一种使用`this.state`在类中提供的完全相同功能的新方法。通常，当函数退出时变量“消失”但`React`保留状态变量。\n\n**我们传递给`useState`的参数是什么？** `useState Hook`的唯一参数是初始状态。与类不同，状态不必是对象。他可以是任何我们需要的内容，比如数字，字符串等。在我们的示例中，我们只需要一个数字来表示用户点击的次数，因此将0作为变量的初始状态。（如果我们想在状态中存储两个不同的值，我们将调用`useState`两次。）\n\n`useState`返回的是什么？ 它返回一对值：当前状态和更新状态的函数。这就是我们编写`const [count，setCount] = useState(0)`的原因。这与类中的 `this.state.count`和`this.setState`类似，只不过现在它们是成对的。\n\n现在我们知道了`useState Hook`的作用，我们的例子应该更有意义\n```JS\n    import { useState } from 'react';\n    ​\n    function Example() {\n      const [count, setCount] = useState(0);\n      // ...\n    }\n```\n我们声明一个名为`count`的状态变量，并将其设置为0。`React`将记住重新渲染之间的当前值，并为我们的函数提供最新的值。如果我们想要更新当前`count`，我们可以调用`setCount`。\n\n> **注意** 你可能想知道：为什么`useState`没有命名为`createState`？“`create`”不会非常准确，因为状态仅在我们的组件第一次呈现时创建。在下一次渲染期间，useState为我们提供了当前状态。否则它根本不会是“状态”！`Hook`名称总是从`use`开始也是有原因的。我们将在后来的`rules hooks`中了解原因。\n\n## 读取状态\n当我们想要在类中显示当前计数时，我们读取`this.state.count`：\n```HTML\n    <p>You clicked {this.state.count} times</p>\n```\n在函数中，我们可以直接使用`count`：\n```HTML\n    <p>You clicked {count} times</p>\n```\n## 更新状态\n在一个类中，我们需要调用`this.setState`来更新`count`状态:\n```JS\n    <button onClick={() => this.setState({ count: this.state.count + 1 })}>\n        Click me\n    </button>\n```\n在函数中，我们已经将`setCount`和`count`作为变量，因此我们不需要`this`：\n```JS\n    <button onClick={() => setCount(count + 1)}>\n        Click me\n    </button>\n```\n## 概括\n现在让我们回顾一下我们逐行学习的内容并检查我们的理解。\n```JS\n     import { useState } from 'react';\n\n     function Example() {\n        const [count, setCount] = useState(0);\n\n        return (\n           <div>\n             <p>You clicked {count} times</p>\n               <button onClick={() => setCount(count + 1)}>\n                    Click me\n               </button>\n           </div>\n          );\n        }\n```\n+ **第1行：** 我们从`React`导入`useState Hook`。它允许我们将本地状态保存在功能组件中。\n\n+ **第2行：** 在`Example`组件中，我们通过调用`useState Hook`来声明一个新的状态变量。它返回一对值，我们给它们命名。我们调用变量`count`，因为它包含按钮点击次数。\n我们通过传递`0`作为唯一的`useState`参数将其初始化为零。第二个返回的项本身就是一个函数。它允许我们更新`count`，因此我们将其命名为`setCount`。\n\n+ **第9行：** 当用户点击时，我们使用新值调用`setCount`。然后，`React`将重新呈现`Example`组件，并将新`count`值传递给它。\n\n一开始看起来似乎有很多东西需要考虑。不要急于求成！如果你在解释有不了解的，请再次查看上面的代码并尝试从上到下阅读。我们保证，一旦你试图“忘记”状态如何在`class`上工作，并以新的角度看待这个代码，它就会有意义。\n\n### **提示：方括号意味着什么？**\n当我们声明一个状态变量时，你可能已经注意到方括号：\n```JS\n    const [count, setCount] = useState(0);\n```\n左侧的名称不是`React API`的一部分。你可以命名自己觉得合适的状态变量：\n```JS\n    const [fruit, setFruit] = useState('banana');\n```\n 此`JavaScript`语法称为“数组解构”。这意味着我们正在创建两个新变量`fruit`和`setFruit`，其中`fruit`设置为`useState`返回的第一个值，`setFruit`是第二个。等同于下面的代码：\n```JS\n    var fruitStateVariable = useState('banana');\n    var fruit = fruitStateVariable[0];\n    var setFruit = fruitStateVariable[1];\n```\n当我们使用`useState`声明一个状态变量时，它返回一对 - 一个包含两个项的数组。第一项是当前值，第二项是允许我们更新第一项值的函数。使用`[0]`和`[1]`访问它们有点令人困惑，因为它们具有特定含义。这就是我们使用数组解构的原因。\n\n> **注意:** 你可能很好奇`React`如何知道哪个组件`useState`对应，因为我们没有将这样的任何内容传递给`React`。我们将在FAQ部分回答[这个问题](https://reactjs.org/docs/hooks-faq.html#how-does-react-associate-hook-calls-with-components)和许多其他问题。\n\n### 提示：使用多个状态变量\n将状态变量声明为一对`[something，setSomething]`也很方便，因为如果我们想要使用多个状态变量，它可以让我们为不同的状态变量赋予不同的名称：\n```JS\n    function ExampleWithManyStates() {\n      // Declare multiple state variables!\n      const [age, setAge] = useState(42);\n      const [fruit, setFruit] = useState('banana');\n      const [todos, setTodos] = useState([{ text: 'Learn Hooks' }]);\n      //...\n    }\n```\n在上面的组件中，我们将`age`，`fruit`和`todos`作为局部变量，我们可以单独更新它们：\n```JS\n    function handleOrangeClick() {\n        // Similar to this.setState({ fruit: 'orange' })\n        setFruit('orange');\n      }\n```\n你 **不必使用** 许多状态变量。 状态变量可以很好地保存对象和数组，因此仍然可以将相关数据组合在一起。但是，与类中的this.setState不同，**更新状态变量总是替换它而不是合并它。**\n","slug":"state-hook","published":1,"updated":"2022-03-21T01:08:06.705Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl11zacpk0008rodq1pvnghnf","content":"<h2 id=\"state-hook\"><a href=\"#state-hook\" class=\"headerlink\" title=\"state-hook\"></a>state-hook</h2><p>Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。</p>\n<p>在之前的的hook 介绍里有一段代码:</p>\n<a id=\"more\"></a>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\">   ​</span><br><span class=\"line\">   <span class=\"keyword\">function</span> <span class=\"title function_\">Example</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">     <span class=\"comment\">// Declare a new state variable, which we&#x27;ll call &quot;count&quot;</span></span><br><span class=\"line\">     <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">     <span class=\"keyword\">return</span> (</span><br><span class=\"line\">       <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">         <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>You clicked &#123;count&#125; times<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">         <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">           Click me</span></span><br><span class=\"line\"><span class=\"language-xml\">         <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">       <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">     );</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们将通过将此代码与等效的类示例进行比较来开始学习<code>Hooks</code>。</p>\n<h2 id=\"等价的类示例\"><a href=\"#等价的类示例\" class=\"headerlink\" title=\"等价的类示例\"></a>等价的类示例</h2><p>看下面的这段代码，你会觉得熟悉：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span>&#123;</span><br><span class=\"line\">   <span class=\"title function_\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">super</span>(props);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">        <span class=\"attr\">count</span>: <span class=\"number\">0</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"title function_\">render</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (</span><br><span class=\"line\">          <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>You clicked &#123;this.state.count&#125; times<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> this.setState(&#123; count: this.state.count + 1 &#125;)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">              Click me</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">      )</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>状态以<code>&#123;count：0&#125;</code>开始，当用户通过调用this.setState单击按钮时，我们会增加state.count。我们将在整个页面中使用此类的片段。</p>\n<blockquote>\n<p><strong>注意</strong> 你可能想知道为什么我们在这里使用计数器而不是更现实的例子。这是为了帮助我们专注于<code>API</code>，同时我们仍在使用<code>Hooks</code>迈出第一步。</p>\n</blockquote>\n<h2 id=\"Hooks和函数组件\"><a href=\"#Hooks和函数组件\" class=\"headerlink\" title=\"Hooks和函数组件\"></a>Hooks和函数组件</h2><p>提醒一下，React中的函数组件如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">Example</span> = (<span class=\"params\">props</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// You can use Hooks here!</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> /&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者是下面这样的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Example</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// You can use Hooks here!</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> /&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 你可能以前将这些称为“无状态组件”。我们现在介绍的这些中具有使用<code>React</code>状态的能力，所以我们更喜欢名称<code>function components</code>。</p>\n<p> <code>Hook</code>在<code>class</code>内 不起 作用。但是你可以使用它们而不是编写类。</p>\n<h2 id=\"什么是Hook\"><a href=\"#什么是Hook\" class=\"headerlink\" title=\"什么是Hook\"></a>什么是Hook</h2><p>我们的新示例首先从<code>React</code>导入<code>useState Hook</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Example</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>什么是Hook?</strong> <code>Hook</code>是一种特殊功能，可让你“挂钩”<code>React</code>功能。例如，<code>useState</code>是一个<code>Hook</code>，允许你将<code>React</code>状态添加到函数组件。我们稍后会学习其他的<code>Hooks</code>。</p>\n<p>我什么时候使用<code>Hook</code>? 如果你编写一个函数组件并意识到你需要为它添加一些状态，那么之前你必须将它转换为一个类。但是现在，你可以在现有功能组件中使用<code>Hook</code>。我们现在要做到这一点！</p>\n<blockquote>\n<p><strong>注意：</strong> 关于在何处可以使用Hook并且不能在组件中使用<code>Hook</code>，有一些特殊规则。我们将在<a href=\"\">“钩子规则”</a>中学习它们。</p>\n</blockquote>\n<h2 id=\"声明一个状态变量\"><a href=\"#声明一个状态变量\" class=\"headerlink\" title=\"声明一个状态变量\"></a>声明一个状态变量</h2><p>在<code>class</code>组建中，我们声明一个状态需要像下面这样：<br>    <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span> &#123;</span><br><span class=\"line\">       <span class=\"title function_\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">           <span class=\"variable language_\">super</span>(props);</span><br><span class=\"line\">           <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">               <span class=\"attr\">count</span>: <span class=\"number\">0</span></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\">// ...</span></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure><br>在函数组件中，我们没有<code>this</code>，所以我们不能分配或读取<code>this.state</code>。相反，我们直接在组件内部调用<code>useState Hook</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">import</span> &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\">    ​</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">Example</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`\t</span></span><br><span class=\"line\"><span class=\"string\">**调用`</span>useState<span class=\"string\">`有什么作用？** 他声明了一个&quot;状态变量&quot;。我们的变量叫做`</span>count<span class=\"string\">`，但我们可以称之为其他任何东西，比如`</span>banana<span class=\"string\">`。这是一种在函数调用之间“保留”某些值的方法 - `</span>useState<span class=\"string\">`是一种使用`</span><span class=\"variable language_\">this</span>.<span class=\"property\">state</span><span class=\"string\">`在类中提供的完全相同功能的新方法。通常，当函数退出时变量“消失”但`</span><span class=\"title class_\">React</span><span class=\"string\">`保留状态变量。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">**我们传递给`</span>useState<span class=\"string\">`的参数是什么？** `</span>useState <span class=\"title class_\">Hook</span><span class=\"string\">`的唯一参数是初始状态。与类不同，状态不必是对象。他可以是任何我们需要的内容，比如数字，字符串等。在我们的示例中，我们只需要一个数字来表示用户点击的次数，因此将0作为变量的初始状态。（如果我们想在状态中存储两个不同的值，我们将调用`</span>useState<span class=\"string\">`两次。）</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span>useState<span class=\"string\">`返回的是什么？ 它返回一对值：当前状态和更新状态的函数。这就是我们编写`</span><span class=\"keyword\">const</span> [count，setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>)<span class=\"string\">`的原因。这与类中的 `</span><span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span><span class=\"string\">`和`</span><span class=\"variable language_\">this</span>.<span class=\"property\">setState</span><span class=\"string\">`类似，只不过现在它们是成对的。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">现在我们知道了`</span>useState <span class=\"title class_\">Hook</span><span class=\"string\">`的作用，我们的例子应该更有意义</span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span><span class=\"variable constant_\">JS</span></span><br><span class=\"line\">    <span class=\"keyword\">import</span> &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\">    ​</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">Example</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>我们声明一个名为<code>count</code>的状态变量，并将其设置为0。<code>React</code>将记住重新渲染之间的当前值，并为我们的函数提供最新的值。如果我们想要更新当前<code>count</code>，我们可以调用<code>setCount</code>。</p>\n<blockquote>\n<p><strong>注意</strong> 你可能想知道：为什么<code>useState</code>没有命名为<code>createState</code>？“<code>create</code>”不会非常准确，因为状态仅在我们的组件第一次呈现时创建。在下一次渲染期间，useState为我们提供了当前状态。否则它根本不会是“状态”！<code>Hook</code>名称总是从<code>use</code>开始也是有原因的。我们将在后来的<code>rules hooks</code>中了解原因。</p>\n</blockquote>\n<h2 id=\"读取状态\"><a href=\"#读取状态\" class=\"headerlink\" title=\"读取状态\"></a>读取状态</h2><p>当我们想要在类中显示当前计数时，我们读取<code>this.state.count</code>：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>You clicked &#123;this.state.count&#125; times<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在函数中，我们可以直接使用<code>count</code>：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>You clicked &#123;count&#125; times<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"更新状态\"><a href=\"#更新状态\" class=\"headerlink\" title=\"更新状态\"></a>更新状态</h2><p>在一个类中，我们需要调用<code>this.setState</code>来更新<code>count</code>状态:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button onClick=&#123;<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123; <span class=\"attr\">count</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span> + <span class=\"number\">1</span> &#125;)&#125;&gt;</span><br><span class=\"line\">    <span class=\"title class_\">Click</span> me</span><br><span class=\"line\">&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n<p>在函数中，我们已经将<code>setCount</code>和<code>count</code>作为变量，因此我们不需要<code>this</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button onClick=&#123;<span class=\"function\">() =&gt;</span> <span class=\"title function_\">setCount</span>(count + <span class=\"number\">1</span>)&#125;&gt;</span><br><span class=\"line\">    <span class=\"title class_\">Click</span> me</span><br><span class=\"line\">&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"概括\"><a href=\"#概括\" class=\"headerlink\" title=\"概括\"></a>概括</h2><p>现在让我们回顾一下我们逐行学习的内容并检查我们的理解。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Example</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>You clicked &#123;count&#125; times<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">               Click me</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">     );</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><strong>第1行：</strong> 我们从<code>React</code>导入<code>useState Hook</code>。它允许我们将本地状态保存在功能组件中。</p>\n</li>\n<li><p><strong>第2行：</strong> 在<code>Example</code>组件中，我们通过调用<code>useState Hook</code>来声明一个新的状态变量。它返回一对值，我们给它们命名。我们调用变量<code>count</code>，因为它包含按钮点击次数。<br>我们通过传递<code>0</code>作为唯一的<code>useState</code>参数将其初始化为零。第二个返回的项本身就是一个函数。它允许我们更新<code>count</code>，因此我们将其命名为<code>setCount</code>。</p>\n</li>\n<li><p><strong>第9行：</strong> 当用户点击时，我们使用新值调用<code>setCount</code>。然后，<code>React</code>将重新呈现<code>Example</code>组件，并将新<code>count</code>值传递给它。</p>\n</li>\n</ul>\n<p>一开始看起来似乎有很多东西需要考虑。不要急于求成！如果你在解释有不了解的，请再次查看上面的代码并尝试从上到下阅读。我们保证，一旦你试图“忘记”状态如何在<code>class</code>上工作，并以新的角度看待这个代码，它就会有意义。</p>\n<h3 id=\"提示：方括号意味着什么？\"><a href=\"#提示：方括号意味着什么？\" class=\"headerlink\" title=\"提示：方括号意味着什么？\"></a><strong>提示：方括号意味着什么？</strong></h3><p>当我们声明一个状态变量时，你可能已经注意到方括号：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<p>左侧的名称不是<code>React API</code>的一部分。你可以命名自己觉得合适的状态变量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [fruit, setFruit] = <span class=\"title function_\">useState</span>(<span class=\"string\">&#x27;banana&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p> 此<code>JavaScript</code>语法称为“数组解构”。这意味着我们正在创建两个新变量<code>fruit</code>和<code>setFruit</code>，其中<code>fruit</code>设置为<code>useState</code>返回的第一个值，<code>setFruit</code>是第二个。等同于下面的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fruitStateVariable = <span class=\"title function_\">useState</span>(<span class=\"string\">&#x27;banana&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> fruit = fruitStateVariable[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> setFruit = fruitStateVariable[<span class=\"number\">1</span>];</span><br></pre></td></tr></table></figure>\n<p>当我们使用<code>useState</code>声明一个状态变量时，它返回一对 - 一个包含两个项的数组。第一项是当前值，第二项是允许我们更新第一项值的函数。使用<code>[0]</code>和<code>[1]</code>访问它们有点令人困惑，因为它们具有特定含义。这就是我们使用数组解构的原因。</p>\n<blockquote>\n<p><strong>注意:</strong> 你可能很好奇<code>React</code>如何知道哪个组件<code>useState</code>对应，因为我们没有将这样的任何内容传递给<code>React</code>。我们将在FAQ部分回答<a href=\"https://reactjs.org/docs/hooks-faq.html#how-does-react-associate-hook-calls-with-components\">这个问题</a>和许多其他问题。</p>\n</blockquote>\n<h3 id=\"提示：使用多个状态变量\"><a href=\"#提示：使用多个状态变量\" class=\"headerlink\" title=\"提示：使用多个状态变量\"></a>提示：使用多个状态变量</h3><p>将状态变量声明为一对<code>[something，setSomething]</code>也很方便，因为如果我们想要使用多个状态变量，它可以让我们为不同的状态变量赋予不同的名称：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ExampleWithManyStates</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Declare multiple state variables!</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [age, setAge] = <span class=\"title function_\">useState</span>(<span class=\"number\">42</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [fruit, setFruit] = <span class=\"title function_\">useState</span>(<span class=\"string\">&#x27;banana&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [todos, setTodos] = <span class=\"title function_\">useState</span>([&#123; <span class=\"attr\">text</span>: <span class=\"string\">&#x27;Learn Hooks&#x27;</span> &#125;]);</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的组件中，我们将<code>age</code>，<code>fruit</code>和<code>todos</code>作为局部变量，我们可以单独更新它们：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handleOrangeClick</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Similar to this.setState(&#123; fruit: &#x27;orange&#x27; &#125;)</span></span><br><span class=\"line\">    <span class=\"title function_\">setFruit</span>(<span class=\"string\">&#x27;orange&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>你 <strong>不必使用</strong> 许多状态变量。 状态变量可以很好地保存对象和数组，因此仍然可以将相关数据组合在一起。但是，与类中的this.setState不同，<strong>更新状态变量总是替换它而不是合并它。</strong></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"state-hook\"><a href=\"#state-hook\" class=\"headerlink\" title=\"state-hook\"></a>state-hook</h2><p>Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。</p>\n<p>在之前的的hook 介绍里有一段代码:</p>","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\">   ​</span><br><span class=\"line\">   <span class=\"keyword\">function</span> <span class=\"title function_\">Example</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">     <span class=\"comment\">// Declare a new state variable, which we&#x27;ll call &quot;count&quot;</span></span><br><span class=\"line\">     <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">     <span class=\"keyword\">return</span> (</span><br><span class=\"line\">       <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">         <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>You clicked &#123;count&#125; times<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">         <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">           Click me</span></span><br><span class=\"line\"><span class=\"language-xml\">         <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">       <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">     );</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们将通过将此代码与等效的类示例进行比较来开始学习<code>Hooks</code>。</p>\n<h2 id=\"等价的类示例\"><a href=\"#等价的类示例\" class=\"headerlink\" title=\"等价的类示例\"></a>等价的类示例</h2><p>看下面的这段代码，你会觉得熟悉：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span>&#123;</span><br><span class=\"line\">   <span class=\"title function_\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">super</span>(props);</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">        <span class=\"attr\">count</span>: <span class=\"number\">0</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"title function_\">render</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (</span><br><span class=\"line\">          <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>You clicked &#123;this.state.count&#125; times<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> this.setState(&#123; count: this.state.count + 1 &#125;)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">              Click me</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">      )</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>状态以<code>&#123;count：0&#125;</code>开始，当用户通过调用this.setState单击按钮时，我们会增加state.count。我们将在整个页面中使用此类的片段。</p>\n<blockquote>\n<p><strong>注意</strong> 你可能想知道为什么我们在这里使用计数器而不是更现实的例子。这是为了帮助我们专注于<code>API</code>，同时我们仍在使用<code>Hooks</code>迈出第一步。</p>\n</blockquote>\n<h2 id=\"Hooks和函数组件\"><a href=\"#Hooks和函数组件\" class=\"headerlink\" title=\"Hooks和函数组件\"></a>Hooks和函数组件</h2><p>提醒一下，React中的函数组件如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">Example</span> = (<span class=\"params\">props</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// You can use Hooks here!</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> /&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者是下面这样的：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Example</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// You can use Hooks here!</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> /&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 你可能以前将这些称为“无状态组件”。我们现在介绍的这些中具有使用<code>React</code>状态的能力，所以我们更喜欢名称<code>function components</code>。</p>\n<p> <code>Hook</code>在<code>class</code>内 不起 作用。但是你可以使用它们而不是编写类。</p>\n<h2 id=\"什么是Hook\"><a href=\"#什么是Hook\" class=\"headerlink\" title=\"什么是Hook\"></a>什么是Hook</h2><p>我们的新示例首先从<code>React</code>导入<code>useState Hook</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Example</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>什么是Hook?</strong> <code>Hook</code>是一种特殊功能，可让你“挂钩”<code>React</code>功能。例如，<code>useState</code>是一个<code>Hook</code>，允许你将<code>React</code>状态添加到函数组件。我们稍后会学习其他的<code>Hooks</code>。</p>\n<p>我什么时候使用<code>Hook</code>? 如果你编写一个函数组件并意识到你需要为它添加一些状态，那么之前你必须将它转换为一个类。但是现在，你可以在现有功能组件中使用<code>Hook</code>。我们现在要做到这一点！</p>\n<blockquote>\n<p><strong>注意：</strong> 关于在何处可以使用Hook并且不能在组件中使用<code>Hook</code>，有一些特殊规则。我们将在<a href=\"\">“钩子规则”</a>中学习它们。</p>\n</blockquote>\n<h2 id=\"声明一个状态变量\"><a href=\"#声明一个状态变量\" class=\"headerlink\" title=\"声明一个状态变量\"></a>声明一个状态变量</h2><p>在<code>class</code>组建中，我们声明一个状态需要像下面这样：<br>    <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Example</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span> &#123;</span><br><span class=\"line\">       <span class=\"title function_\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">           <span class=\"variable language_\">super</span>(props);</span><br><span class=\"line\">           <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">               <span class=\"attr\">count</span>: <span class=\"number\">0</span></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\">// ...</span></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure><br>在函数组件中，我们没有<code>this</code>，所以我们不能分配或读取<code>this.state</code>。相反，我们直接在组件内部调用<code>useState Hook</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">import</span> &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\">    ​</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">Example</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`\t</span></span><br><span class=\"line\"><span class=\"string\">**调用`</span>useState<span class=\"string\">`有什么作用？** 他声明了一个&quot;状态变量&quot;。我们的变量叫做`</span>count<span class=\"string\">`，但我们可以称之为其他任何东西，比如`</span>banana<span class=\"string\">`。这是一种在函数调用之间“保留”某些值的方法 - `</span>useState<span class=\"string\">`是一种使用`</span><span class=\"variable language_\">this</span>.<span class=\"property\">state</span><span class=\"string\">`在类中提供的完全相同功能的新方法。通常，当函数退出时变量“消失”但`</span><span class=\"title class_\">React</span><span class=\"string\">`保留状态变量。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">**我们传递给`</span>useState<span class=\"string\">`的参数是什么？** `</span>useState <span class=\"title class_\">Hook</span><span class=\"string\">`的唯一参数是初始状态。与类不同，状态不必是对象。他可以是任何我们需要的内容，比如数字，字符串等。在我们的示例中，我们只需要一个数字来表示用户点击的次数，因此将0作为变量的初始状态。（如果我们想在状态中存储两个不同的值，我们将调用`</span>useState<span class=\"string\">`两次。）</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">`</span>useState<span class=\"string\">`返回的是什么？ 它返回一对值：当前状态和更新状态的函数。这就是我们编写`</span><span class=\"keyword\">const</span> [count，setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>)<span class=\"string\">`的原因。这与类中的 `</span><span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span><span class=\"string\">`和`</span><span class=\"variable language_\">this</span>.<span class=\"property\">setState</span><span class=\"string\">`类似，只不过现在它们是成对的。</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">现在我们知道了`</span>useState <span class=\"title class_\">Hook</span><span class=\"string\">`的作用，我们的例子应该更有意义</span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span><span class=\"variable constant_\">JS</span></span><br><span class=\"line\">    <span class=\"keyword\">import</span> &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\">    ​</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">Example</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>我们声明一个名为<code>count</code>的状态变量，并将其设置为0。<code>React</code>将记住重新渲染之间的当前值，并为我们的函数提供最新的值。如果我们想要更新当前<code>count</code>，我们可以调用<code>setCount</code>。</p>\n<blockquote>\n<p><strong>注意</strong> 你可能想知道：为什么<code>useState</code>没有命名为<code>createState</code>？“<code>create</code>”不会非常准确，因为状态仅在我们的组件第一次呈现时创建。在下一次渲染期间，useState为我们提供了当前状态。否则它根本不会是“状态”！<code>Hook</code>名称总是从<code>use</code>开始也是有原因的。我们将在后来的<code>rules hooks</code>中了解原因。</p>\n</blockquote>\n<h2 id=\"读取状态\"><a href=\"#读取状态\" class=\"headerlink\" title=\"读取状态\"></a>读取状态</h2><p>当我们想要在类中显示当前计数时，我们读取<code>this.state.count</code>：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>You clicked &#123;this.state.count&#125; times<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在函数中，我们可以直接使用<code>count</code>：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>You clicked &#123;count&#125; times<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"更新状态\"><a href=\"#更新状态\" class=\"headerlink\" title=\"更新状态\"></a>更新状态</h2><p>在一个类中，我们需要调用<code>this.setState</code>来更新<code>count</code>状态:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button onClick=&#123;<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123; <span class=\"attr\">count</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">state</span>.<span class=\"property\">count</span> + <span class=\"number\">1</span> &#125;)&#125;&gt;</span><br><span class=\"line\">    <span class=\"title class_\">Click</span> me</span><br><span class=\"line\">&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n<p>在函数中，我们已经将<code>setCount</code>和<code>count</code>作为变量，因此我们不需要<code>this</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button onClick=&#123;<span class=\"function\">() =&gt;</span> <span class=\"title function_\">setCount</span>(count + <span class=\"number\">1</span>)&#125;&gt;</span><br><span class=\"line\">    <span class=\"title class_\">Click</span> me</span><br><span class=\"line\">&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"概括\"><a href=\"#概括\" class=\"headerlink\" title=\"概括\"></a>概括</h2><p>现在让我们回顾一下我们逐行学习的内容并检查我们的理解。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Example</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>You clicked &#123;count&#125; times<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> setCount(count + 1)&#125;&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">               Click me</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">     );</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><strong>第1行：</strong> 我们从<code>React</code>导入<code>useState Hook</code>。它允许我们将本地状态保存在功能组件中。</p>\n</li>\n<li><p><strong>第2行：</strong> 在<code>Example</code>组件中，我们通过调用<code>useState Hook</code>来声明一个新的状态变量。它返回一对值，我们给它们命名。我们调用变量<code>count</code>，因为它包含按钮点击次数。<br>我们通过传递<code>0</code>作为唯一的<code>useState</code>参数将其初始化为零。第二个返回的项本身就是一个函数。它允许我们更新<code>count</code>，因此我们将其命名为<code>setCount</code>。</p>\n</li>\n<li><p><strong>第9行：</strong> 当用户点击时，我们使用新值调用<code>setCount</code>。然后，<code>React</code>将重新呈现<code>Example</code>组件，并将新<code>count</code>值传递给它。</p>\n</li>\n</ul>\n<p>一开始看起来似乎有很多东西需要考虑。不要急于求成！如果你在解释有不了解的，请再次查看上面的代码并尝试从上到下阅读。我们保证，一旦你试图“忘记”状态如何在<code>class</code>上工作，并以新的角度看待这个代码，它就会有意义。</p>\n<h3 id=\"提示：方括号意味着什么？\"><a href=\"#提示：方括号意味着什么？\" class=\"headerlink\" title=\"提示：方括号意味着什么？\"></a><strong>提示：方括号意味着什么？</strong></h3><p>当我们声明一个状态变量时，你可能已经注意到方括号：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [count, setCount] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<p>左侧的名称不是<code>React API</code>的一部分。你可以命名自己觉得合适的状态变量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [fruit, setFruit] = <span class=\"title function_\">useState</span>(<span class=\"string\">&#x27;banana&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p> 此<code>JavaScript</code>语法称为“数组解构”。这意味着我们正在创建两个新变量<code>fruit</code>和<code>setFruit</code>，其中<code>fruit</code>设置为<code>useState</code>返回的第一个值，<code>setFruit</code>是第二个。等同于下面的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fruitStateVariable = <span class=\"title function_\">useState</span>(<span class=\"string\">&#x27;banana&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> fruit = fruitStateVariable[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> setFruit = fruitStateVariable[<span class=\"number\">1</span>];</span><br></pre></td></tr></table></figure>\n<p>当我们使用<code>useState</code>声明一个状态变量时，它返回一对 - 一个包含两个项的数组。第一项是当前值，第二项是允许我们更新第一项值的函数。使用<code>[0]</code>和<code>[1]</code>访问它们有点令人困惑，因为它们具有特定含义。这就是我们使用数组解构的原因。</p>\n<blockquote>\n<p><strong>注意:</strong> 你可能很好奇<code>React</code>如何知道哪个组件<code>useState</code>对应，因为我们没有将这样的任何内容传递给<code>React</code>。我们将在FAQ部分回答<a href=\"https://reactjs.org/docs/hooks-faq.html#how-does-react-associate-hook-calls-with-components\">这个问题</a>和许多其他问题。</p>\n</blockquote>\n<h3 id=\"提示：使用多个状态变量\"><a href=\"#提示：使用多个状态变量\" class=\"headerlink\" title=\"提示：使用多个状态变量\"></a>提示：使用多个状态变量</h3><p>将状态变量声明为一对<code>[something，setSomething]</code>也很方便，因为如果我们想要使用多个状态变量，它可以让我们为不同的状态变量赋予不同的名称：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ExampleWithManyStates</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Declare multiple state variables!</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [age, setAge] = <span class=\"title function_\">useState</span>(<span class=\"number\">42</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [fruit, setFruit] = <span class=\"title function_\">useState</span>(<span class=\"string\">&#x27;banana&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [todos, setTodos] = <span class=\"title function_\">useState</span>([&#123; <span class=\"attr\">text</span>: <span class=\"string\">&#x27;Learn Hooks&#x27;</span> &#125;]);</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面的组件中，我们将<code>age</code>，<code>fruit</code>和<code>todos</code>作为局部变量，我们可以单独更新它们：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handleOrangeClick</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Similar to this.setState(&#123; fruit: &#x27;orange&#x27; &#125;)</span></span><br><span class=\"line\">    <span class=\"title function_\">setFruit</span>(<span class=\"string\">&#x27;orange&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>你 <strong>不必使用</strong> 许多状态变量。 状态变量可以很好地保存对象和数组，因此仍然可以将相关数据组合在一起。但是，与类中的this.setState不同，<strong>更新状态变量总是替换它而不是合并它。</strong></p>"},{"title":"setState","date":"2018-11-27T05:10:53.000Z","_content":"\n\n## setState\n\nreact中的状态state通过 setState() 方法来改变促进页面的重新渲染，但是在使用的时候每个人都会遇到各种不同的问题，我在网上看到很多人说setState的坑，吐槽的人也比较多，类似于下面这种问题，在我刚开始的时候也遇到过：\n\n <!-- more -->\n \n### 1. setState不会立即改变数据\n\n```\n// name is ''\nthis.setState({\n     name: 'myName'\n})\nconsole.log('name is', this.state.name) // 输出 ？？？\n```\n\n这里当然是期望打印出改变后的state值，但是却并不能得到期望的值，为什么会这样呢？因为 setState 是一个异步执行的函数，所以这里输出的依然是改变之前的 state 值，其实 setState 提供给我们两个参数，第二个参数是一个回调函数，所以我们可以通过回调函数来获取到正确的值。\n\n```\nthis.setState({\n    name: 'myName'\n}, () => {\n    console.log(`name is ${this.state.name}`)\n})\n```\n### 2. setState多次，Re-render 一次\n以前刚接触react的时候，我一度认为每次 setState 都会造成一次 re-render ，其实并不是这样：\n```\ncomponentDidMount() {\n    this.setState((prevState, props) => ({count: this.state.count + 1})) // 1\n    this.setState((prevState, props) => ({count: this.state.count + 1})) // 2\n    this.setState((prevState, props) => ({count: this.state.count + 1})) // 3\n    this.setState({name: \"xiaohesong\"}) // 4\n}\nrender() {\n    console.log('render')\n    return(\n\t// ...\n    )\n}\n```\n可以发现，这里打印出 ‘render’ 仅为两次，并不是 4+1 次，为什么？\n我们之前说 `setState` 是一个异步执行的方法，其实是说当我们调用 `setState` 的时候，`setState` 是放在一个队列中异步处理的，也就是说他会把我们这四个 `setState`操作放到一个队列中，然后batch处理。\n```\n  this.setState((prevState, props) => ({count: this.state.count + 1})) // 1\n  this.setState((prevState, props) => ({count: this.state.count + 1})) // 2\n  this.setState((prevState, props) => ({count: this.state.count + 1})) // 3\n  this.setState({name: \"xiaohesong\"}) // 4\n```\n如何批量操作的？？？setState方法是将传入的参数对象或函数返回的对象与现有的state对象进行合并，非常类似于使用Object.assign(prevState, newState)的效果\n```\nObject.assign(state,{count: this.state.count + 1},{count: this.state.count + 1}...{name: \"xiaohesong\"})\n```\n### 3. setState 造成没必要的渲染\n第二点也告诉我们 setState 每次都会造成页面的重新渲染，但是很多时候，有些渲染不是必要的，不必要的渲染有以下几个原因：\n\n+ 新的 state 其实和之前的是一样的。这个问题通常可以通过 shouldComponentUpdate 来解决。\n+ 通常发生改变的 state 是和渲染有关的，但是也有例外。比如，有些数据是根据某些状态来显示的。\n+ 第三，有些 state 和渲染一点关系都没有。有一些 state 可能是和事件、 timer ID 有关的。\n\n#### 总结 ：\n1. setState操作,默认情况下是每次调用, 都会re-render一次,除非你手动shouldComponentUpdate为false. react为了减少rerender的次数,会进行一个浅合并.将多次re-render减少到一次re-render.\n\n2. setState之后,无法立即获取到this.state的值,是因为在setState的时候,他只会把操作放到队列里.\n3. 和渲染无关的状态尽量不要放在 state 中来管理。\n","source":"_posts/setState.md","raw":"---\ntitle: setState\ndate: 2018-11-27 13:10:53\ntags:\n- react\ncategories:\n- react\t\n---\n\n\n## setState\n\nreact中的状态state通过 setState() 方法来改变促进页面的重新渲染，但是在使用的时候每个人都会遇到各种不同的问题，我在网上看到很多人说setState的坑，吐槽的人也比较多，类似于下面这种问题，在我刚开始的时候也遇到过：\n\n <!-- more -->\n \n### 1. setState不会立即改变数据\n\n```\n// name is ''\nthis.setState({\n     name: 'myName'\n})\nconsole.log('name is', this.state.name) // 输出 ？？？\n```\n\n这里当然是期望打印出改变后的state值，但是却并不能得到期望的值，为什么会这样呢？因为 setState 是一个异步执行的函数，所以这里输出的依然是改变之前的 state 值，其实 setState 提供给我们两个参数，第二个参数是一个回调函数，所以我们可以通过回调函数来获取到正确的值。\n\n```\nthis.setState({\n    name: 'myName'\n}, () => {\n    console.log(`name is ${this.state.name}`)\n})\n```\n### 2. setState多次，Re-render 一次\n以前刚接触react的时候，我一度认为每次 setState 都会造成一次 re-render ，其实并不是这样：\n```\ncomponentDidMount() {\n    this.setState((prevState, props) => ({count: this.state.count + 1})) // 1\n    this.setState((prevState, props) => ({count: this.state.count + 1})) // 2\n    this.setState((prevState, props) => ({count: this.state.count + 1})) // 3\n    this.setState({name: \"xiaohesong\"}) // 4\n}\nrender() {\n    console.log('render')\n    return(\n\t// ...\n    )\n}\n```\n可以发现，这里打印出 ‘render’ 仅为两次，并不是 4+1 次，为什么？\n我们之前说 `setState` 是一个异步执行的方法，其实是说当我们调用 `setState` 的时候，`setState` 是放在一个队列中异步处理的，也就是说他会把我们这四个 `setState`操作放到一个队列中，然后batch处理。\n```\n  this.setState((prevState, props) => ({count: this.state.count + 1})) // 1\n  this.setState((prevState, props) => ({count: this.state.count + 1})) // 2\n  this.setState((prevState, props) => ({count: this.state.count + 1})) // 3\n  this.setState({name: \"xiaohesong\"}) // 4\n```\n如何批量操作的？？？setState方法是将传入的参数对象或函数返回的对象与现有的state对象进行合并，非常类似于使用Object.assign(prevState, newState)的效果\n```\nObject.assign(state,{count: this.state.count + 1},{count: this.state.count + 1}...{name: \"xiaohesong\"})\n```\n### 3. setState 造成没必要的渲染\n第二点也告诉我们 setState 每次都会造成页面的重新渲染，但是很多时候，有些渲染不是必要的，不必要的渲染有以下几个原因：\n\n+ 新的 state 其实和之前的是一样的。这个问题通常可以通过 shouldComponentUpdate 来解决。\n+ 通常发生改变的 state 是和渲染有关的，但是也有例外。比如，有些数据是根据某些状态来显示的。\n+ 第三，有些 state 和渲染一点关系都没有。有一些 state 可能是和事件、 timer ID 有关的。\n\n#### 总结 ：\n1. setState操作,默认情况下是每次调用, 都会re-render一次,除非你手动shouldComponentUpdate为false. react为了减少rerender的次数,会进行一个浅合并.将多次re-render减少到一次re-render.\n\n2. setState之后,无法立即获取到this.state的值,是因为在setState的时候,他只会把操作放到队列里.\n3. 和渲染无关的状态尽量不要放在 state 中来管理。\n","slug":"setState","published":1,"updated":"2022-03-17T12:21:16.713Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl11zacpm0009rodqco1174qt","content":"<h2 id=\"setState\"><a href=\"#setState\" class=\"headerlink\" title=\"setState\"></a>setState</h2><p>react中的状态state通过 setState() 方法来改变促进页面的重新渲染，但是在使用的时候每个人都会遇到各种不同的问题，我在网上看到很多人说setState的坑，吐槽的人也比较多，类似于下面这种问题，在我刚开始的时候也遇到过：</p>\n <a id=\"more\"></a>\n<h3 id=\"1-setState不会立即改变数据\"><a href=\"#1-setState不会立即改变数据\" class=\"headerlink\" title=\"1. setState不会立即改变数据\"></a>1. setState不会立即改变数据</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// name is &#x27;&#x27;</span><br><span class=\"line\">this.setState(&#123;</span><br><span class=\"line\">     name: &#x27;myName&#x27;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">console.log(&#x27;name is&#x27;, this.state.name) // 输出 ？？？</span><br></pre></td></tr></table></figure>\n\n<p>这里当然是期望打印出改变后的state值，但是却并不能得到期望的值，为什么会这样呢？因为 setState 是一个异步执行的函数，所以这里输出的依然是改变之前的 state 值，其实 setState 提供给我们两个参数，第二个参数是一个回调函数，所以我们可以通过回调函数来获取到正确的值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.setState(&#123;</span><br><span class=\"line\">    name: &#x27;myName&#x27;</span><br><span class=\"line\">&#125;, () =&gt; &#123;</span><br><span class=\"line\">    console.log(`name is $&#123;this.state.name&#125;`)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-setState多次，Re-render-一次\"><a href=\"#2-setState多次，Re-render-一次\" class=\"headerlink\" title=\"2. setState多次，Re-render 一次\"></a>2. setState多次，Re-render 一次</h3><p>以前刚接触react的时候，我一度认为每次 setState 都会造成一次 re-render ，其实并不是这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">componentDidMount() &#123;</span><br><span class=\"line\">    this.setState((prevState, props) =&gt; (&#123;count: this.state.count + 1&#125;)) // 1</span><br><span class=\"line\">    this.setState((prevState, props) =&gt; (&#123;count: this.state.count + 1&#125;)) // 2</span><br><span class=\"line\">    this.setState((prevState, props) =&gt; (&#123;count: this.state.count + 1&#125;)) // 3</span><br><span class=\"line\">    this.setState(&#123;name: &quot;xiaohesong&quot;&#125;) // 4</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">render() &#123;</span><br><span class=\"line\">    console.log(&#x27;render&#x27;)</span><br><span class=\"line\">    return(</span><br><span class=\"line\">\t// ...</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以发现，这里打印出 ‘render’ 仅为两次，并不是 4+1 次，为什么？<br>我们之前说 <code>setState</code> 是一个异步执行的方法，其实是说当我们调用 <code>setState</code> 的时候，<code>setState</code> 是放在一个队列中异步处理的，也就是说他会把我们这四个 <code>setState</code>操作放到一个队列中，然后batch处理。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.setState((prevState, props) =&gt; (&#123;count: this.state.count + 1&#125;)) // 1</span><br><span class=\"line\">this.setState((prevState, props) =&gt; (&#123;count: this.state.count + 1&#125;)) // 2</span><br><span class=\"line\">this.setState((prevState, props) =&gt; (&#123;count: this.state.count + 1&#125;)) // 3</span><br><span class=\"line\">this.setState(&#123;name: &quot;xiaohesong&quot;&#125;) // 4</span><br></pre></td></tr></table></figure>\n<p>如何批量操作的？？？setState方法是将传入的参数对象或函数返回的对象与现有的state对象进行合并，非常类似于使用Object.assign(prevState, newState)的效果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.assign(state,&#123;count: this.state.count + 1&#125;,&#123;count: this.state.count + 1&#125;...&#123;name: &quot;xiaohesong&quot;&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-setState-造成没必要的渲染\"><a href=\"#3-setState-造成没必要的渲染\" class=\"headerlink\" title=\"3. setState 造成没必要的渲染\"></a>3. setState 造成没必要的渲染</h3><p>第二点也告诉我们 setState 每次都会造成页面的重新渲染，但是很多时候，有些渲染不是必要的，不必要的渲染有以下几个原因：</p>\n<ul>\n<li>新的 state 其实和之前的是一样的。这个问题通常可以通过 shouldComponentUpdate 来解决。</li>\n<li>通常发生改变的 state 是和渲染有关的，但是也有例外。比如，有些数据是根据某些状态来显示的。</li>\n<li>第三，有些 state 和渲染一点关系都没有。有一些 state 可能是和事件、 timer ID 有关的。</li>\n</ul>\n<h4 id=\"总结-：\"><a href=\"#总结-：\" class=\"headerlink\" title=\"总结 ：\"></a>总结 ：</h4><ol>\n<li><p>setState操作,默认情况下是每次调用, 都会re-render一次,除非你手动shouldComponentUpdate为false. react为了减少rerender的次数,会进行一个浅合并.将多次re-render减少到一次re-render.</p>\n</li>\n<li><p>setState之后,无法立即获取到this.state的值,是因为在setState的时候,他只会把操作放到队列里.</p>\n</li>\n<li><p>和渲染无关的状态尽量不要放在 state 中来管理。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"setState\"><a href=\"#setState\" class=\"headerlink\" title=\"setState\"></a>setState</h2><p>react中的状态state通过 setState() 方法来改变促进页面的重新渲染，但是在使用的时候每个人都会遇到各种不同的问题，我在网上看到很多人说setState的坑，吐槽的人也比较多，类似于下面这种问题，在我刚开始的时候也遇到过：</p>","more":"<h3 id=\"1-setState不会立即改变数据\"><a href=\"#1-setState不会立即改变数据\" class=\"headerlink\" title=\"1. setState不会立即改变数据\"></a>1. setState不会立即改变数据</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// name is &#x27;&#x27;</span><br><span class=\"line\">this.setState(&#123;</span><br><span class=\"line\">     name: &#x27;myName&#x27;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">console.log(&#x27;name is&#x27;, this.state.name) // 输出 ？？？</span><br></pre></td></tr></table></figure>\n\n<p>这里当然是期望打印出改变后的state值，但是却并不能得到期望的值，为什么会这样呢？因为 setState 是一个异步执行的函数，所以这里输出的依然是改变之前的 state 值，其实 setState 提供给我们两个参数，第二个参数是一个回调函数，所以我们可以通过回调函数来获取到正确的值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.setState(&#123;</span><br><span class=\"line\">    name: &#x27;myName&#x27;</span><br><span class=\"line\">&#125;, () =&gt; &#123;</span><br><span class=\"line\">    console.log(`name is $&#123;this.state.name&#125;`)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-setState多次，Re-render-一次\"><a href=\"#2-setState多次，Re-render-一次\" class=\"headerlink\" title=\"2. setState多次，Re-render 一次\"></a>2. setState多次，Re-render 一次</h3><p>以前刚接触react的时候，我一度认为每次 setState 都会造成一次 re-render ，其实并不是这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">componentDidMount() &#123;</span><br><span class=\"line\">    this.setState((prevState, props) =&gt; (&#123;count: this.state.count + 1&#125;)) // 1</span><br><span class=\"line\">    this.setState((prevState, props) =&gt; (&#123;count: this.state.count + 1&#125;)) // 2</span><br><span class=\"line\">    this.setState((prevState, props) =&gt; (&#123;count: this.state.count + 1&#125;)) // 3</span><br><span class=\"line\">    this.setState(&#123;name: &quot;xiaohesong&quot;&#125;) // 4</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">render() &#123;</span><br><span class=\"line\">    console.log(&#x27;render&#x27;)</span><br><span class=\"line\">    return(</span><br><span class=\"line\">\t// ...</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以发现，这里打印出 ‘render’ 仅为两次，并不是 4+1 次，为什么？<br>我们之前说 <code>setState</code> 是一个异步执行的方法，其实是说当我们调用 <code>setState</code> 的时候，<code>setState</code> 是放在一个队列中异步处理的，也就是说他会把我们这四个 <code>setState</code>操作放到一个队列中，然后batch处理。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.setState((prevState, props) =&gt; (&#123;count: this.state.count + 1&#125;)) // 1</span><br><span class=\"line\">this.setState((prevState, props) =&gt; (&#123;count: this.state.count + 1&#125;)) // 2</span><br><span class=\"line\">this.setState((prevState, props) =&gt; (&#123;count: this.state.count + 1&#125;)) // 3</span><br><span class=\"line\">this.setState(&#123;name: &quot;xiaohesong&quot;&#125;) // 4</span><br></pre></td></tr></table></figure>\n<p>如何批量操作的？？？setState方法是将传入的参数对象或函数返回的对象与现有的state对象进行合并，非常类似于使用Object.assign(prevState, newState)的效果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object.assign(state,&#123;count: this.state.count + 1&#125;,&#123;count: this.state.count + 1&#125;...&#123;name: &quot;xiaohesong&quot;&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-setState-造成没必要的渲染\"><a href=\"#3-setState-造成没必要的渲染\" class=\"headerlink\" title=\"3. setState 造成没必要的渲染\"></a>3. setState 造成没必要的渲染</h3><p>第二点也告诉我们 setState 每次都会造成页面的重新渲染，但是很多时候，有些渲染不是必要的，不必要的渲染有以下几个原因：</p>\n<ul>\n<li>新的 state 其实和之前的是一样的。这个问题通常可以通过 shouldComponentUpdate 来解决。</li>\n<li>通常发生改变的 state 是和渲染有关的，但是也有例外。比如，有些数据是根据某些状态来显示的。</li>\n<li>第三，有些 state 和渲染一点关系都没有。有一些 state 可能是和事件、 timer ID 有关的。</li>\n</ul>\n<h4 id=\"总结-：\"><a href=\"#总结-：\" class=\"headerlink\" title=\"总结 ：\"></a>总结 ：</h4><ol>\n<li><p>setState操作,默认情况下是每次调用, 都会re-render一次,除非你手动shouldComponentUpdate为false. react为了减少rerender的次数,会进行一个浅合并.将多次re-render减少到一次re-render.</p>\n</li>\n<li><p>setState之后,无法立即获取到this.state的值,是因为在setState的时候,他只会把操作放到队列里.</p>\n</li>\n<li><p>和渲染无关的状态尽量不要放在 state 中来管理。</p>\n</li>\n</ol>"},{"title":"react-native组件的生命周期","date":"2018-11-08T09:47:23.000Z","type":"tags","_content":"\n## 概述\n所谓生命周期，就是一个对象从开始生成到最后消亡所经历的状态，理解生命周期，是合理开发的关键。RN 组件的生命周期整理如下图：\n\n<!--more-->\n\n![生命周期](https://img.race604.com/3-3-component-lifecycle.jpg)\n\n如图，可以把组件生命周期大致分为三个阶段：\n\n* 第一阶段：是组件第一次绘制阶段，如图中的上面虚线框内，在这里完成了组件的加载和初始化；\n* 第二阶段：是组件在运行和交互阶段，如图中左下角虚线框，这个阶段组件可以处理用户交互，或者接收事件更新界面；\n* 第三阶段：是组件卸载消亡的阶段，如图中右下角的虚线框中，这里做一些组件的清理工作。\n\n## 生命周期回调函数\n\n下面来详细介绍生命周期中的各回调函数。\n\n##### *getDefaultProps*\n在组件创建之前，会先调用 getDefaultProps()，这是全局调用一次，严格地来说，这不是组件的生命周期的一部分。在组件被创建并加载候，首先调用 getInitialState()，来初始化组件的状态。\n\n##### *componentWillMount*\n然后，准备加载组件，会调用 componentWillMount(), 这个函数调用时机是在组件创建，并初始化了状态之后，在第一次绘制 render() 之前。可以在这里做一些业务初始化操作，也可以设置组件状态。这个函数在整个生命周期中只被调用一次。\n\n##### *componentDidMount*\n在组件第一次绘制之后，会调用 componentDidMount()，通知组件已经加载完成。这个函数调用的时候，其虚拟 DOM 已经构建完成，你可以在这个函数开始获取其中的元素或者子组件了。需要注意的是，RN 框架是先调用子组件的 componentDidMount()，然后调用父组件的函数。从这个函数开始，就可以和 JS 其他框架交互了，例如设置计时 setTimeout 或者 setInterval，或者发起网络请求。这个函数也是只被调用一次。这个函数之后，就进入了稳定运行状态，等待事件触发.\n\n##### *componentWillReceiveProps*\n如果组件收到新的属性（props），就会调用 componentWillReceiveProps(),输入参数 nextProps 是即将被设置的属性，旧的属性还是可以通过 this.props 来获取。在这个回调函数里面，你可以根据属性的变化，通过调用 this.setState() 来更新你的组件状态，这里调用更新状态是安全的，并不会触发额外的 render() 调用。如下：\n```\ncomponentWillReceiveProps(nextProps) {  \n  this.setState({\n    oldProps: nextProps\n  });\n}\n```\n\n##### *shouldComponentUpdate*\n当组件接收到新的属性和状态改变的话，都会触发调用 shouldComponentUpdate(…)，输入参数 nextProps 和上面的 componentWillReceiveProps 函数一样，nextState 表示组件即将更新的状态值。这个函数的返回值决定是否需要更新组件，如果 true 表示需要更新，继续走后面的更新流程。否者，则不更新，直接进入等待状态。\n\n默认情况下，这个函数永远返回 true 用来保证数据变化的时候 UI 能够同步更新。在大型项目中，你可以自己重载这个函数，通过检查变化前后属性和状态，来决定 UI 是否需要更新，能有效提高应用性能。\n\n##### *componentWillUpdate*\n如果组件状态或者属性改变，并且上面的 shouldComponentUpdate(…) 返回为 true，就会开始准更新组件，并调用 componentWillUpdate()，输入参数与 shouldComponentUpdate 一样，在这个回调中，可以做一些在更新界面之前要做的事情。需要特别注意的是，在这个函数里面，你就不能使用 this.setState 来修改状态。这个函数调用之后，就会把 nextProps 和 nextState 分别设置到 this.props 和 this.state 中。紧接着这个函数，就会调用 render() 来更新界面了。\n\n##### *componentDidUpdate*\n调用了 render() 更新完成界面之后，会调用 componentDidUpdate() 来得到通知，因为到这里已经完成了属性和状态的更新了，此函数的输入参数变成了 prevProps 和 prevState。\n\n##### *componentWillUnmount*\n当组件要被从界面上移除的时候，就会调用 componentWillUnmount(),在这个函数中，可以做一些组件相关的清理工作，例如取消计时器、网络请求等.\n\n## 总结\n到这里，RN 的组件的完整的生命都介绍完了，在回头来看一下前面的图，就比较清晰了，把生命周期的回调函数总结成如下表格：\n\n|生命周期|\t调用次数\t|能否使用 setSate()|\n|-------|-----|-----|\n|getDefaultProps|\t1(全局调用一次)\t|否|\n|getInitialState\t|1\t|否|\n|componentWillMount|\t1\t|是|\n|render\t|>=1|\t否|\n|componentDidMount\t|1\t|是|\n|componentWillReceiveProps|\t>=0\t|是|\n|shouldComponentUpdate|\t>=0\t|否|\n|componentWillUpdate\t|>=0\t|否|\n|componentDidUpdate\t|>=0|\t否|\n|componentWillUnmount|\t1| 否|","source":"_posts/react-native组件的生命周期.md","raw":"---\ntitle: react-native组件的生命周期\ndate: 2018-11-08 17:47:23\ntype: 'tags'\ntags:                 \n- react-native\n- react\ncategories:\n- react-native\n---\n\n## 概述\n所谓生命周期，就是一个对象从开始生成到最后消亡所经历的状态，理解生命周期，是合理开发的关键。RN 组件的生命周期整理如下图：\n\n<!--more-->\n\n![生命周期](https://img.race604.com/3-3-component-lifecycle.jpg)\n\n如图，可以把组件生命周期大致分为三个阶段：\n\n* 第一阶段：是组件第一次绘制阶段，如图中的上面虚线框内，在这里完成了组件的加载和初始化；\n* 第二阶段：是组件在运行和交互阶段，如图中左下角虚线框，这个阶段组件可以处理用户交互，或者接收事件更新界面；\n* 第三阶段：是组件卸载消亡的阶段，如图中右下角的虚线框中，这里做一些组件的清理工作。\n\n## 生命周期回调函数\n\n下面来详细介绍生命周期中的各回调函数。\n\n##### *getDefaultProps*\n在组件创建之前，会先调用 getDefaultProps()，这是全局调用一次，严格地来说，这不是组件的生命周期的一部分。在组件被创建并加载候，首先调用 getInitialState()，来初始化组件的状态。\n\n##### *componentWillMount*\n然后，准备加载组件，会调用 componentWillMount(), 这个函数调用时机是在组件创建，并初始化了状态之后，在第一次绘制 render() 之前。可以在这里做一些业务初始化操作，也可以设置组件状态。这个函数在整个生命周期中只被调用一次。\n\n##### *componentDidMount*\n在组件第一次绘制之后，会调用 componentDidMount()，通知组件已经加载完成。这个函数调用的时候，其虚拟 DOM 已经构建完成，你可以在这个函数开始获取其中的元素或者子组件了。需要注意的是，RN 框架是先调用子组件的 componentDidMount()，然后调用父组件的函数。从这个函数开始，就可以和 JS 其他框架交互了，例如设置计时 setTimeout 或者 setInterval，或者发起网络请求。这个函数也是只被调用一次。这个函数之后，就进入了稳定运行状态，等待事件触发.\n\n##### *componentWillReceiveProps*\n如果组件收到新的属性（props），就会调用 componentWillReceiveProps(),输入参数 nextProps 是即将被设置的属性，旧的属性还是可以通过 this.props 来获取。在这个回调函数里面，你可以根据属性的变化，通过调用 this.setState() 来更新你的组件状态，这里调用更新状态是安全的，并不会触发额外的 render() 调用。如下：\n```\ncomponentWillReceiveProps(nextProps) {  \n  this.setState({\n    oldProps: nextProps\n  });\n}\n```\n\n##### *shouldComponentUpdate*\n当组件接收到新的属性和状态改变的话，都会触发调用 shouldComponentUpdate(…)，输入参数 nextProps 和上面的 componentWillReceiveProps 函数一样，nextState 表示组件即将更新的状态值。这个函数的返回值决定是否需要更新组件，如果 true 表示需要更新，继续走后面的更新流程。否者，则不更新，直接进入等待状态。\n\n默认情况下，这个函数永远返回 true 用来保证数据变化的时候 UI 能够同步更新。在大型项目中，你可以自己重载这个函数，通过检查变化前后属性和状态，来决定 UI 是否需要更新，能有效提高应用性能。\n\n##### *componentWillUpdate*\n如果组件状态或者属性改变，并且上面的 shouldComponentUpdate(…) 返回为 true，就会开始准更新组件，并调用 componentWillUpdate()，输入参数与 shouldComponentUpdate 一样，在这个回调中，可以做一些在更新界面之前要做的事情。需要特别注意的是，在这个函数里面，你就不能使用 this.setState 来修改状态。这个函数调用之后，就会把 nextProps 和 nextState 分别设置到 this.props 和 this.state 中。紧接着这个函数，就会调用 render() 来更新界面了。\n\n##### *componentDidUpdate*\n调用了 render() 更新完成界面之后，会调用 componentDidUpdate() 来得到通知，因为到这里已经完成了属性和状态的更新了，此函数的输入参数变成了 prevProps 和 prevState。\n\n##### *componentWillUnmount*\n当组件要被从界面上移除的时候，就会调用 componentWillUnmount(),在这个函数中，可以做一些组件相关的清理工作，例如取消计时器、网络请求等.\n\n## 总结\n到这里，RN 的组件的完整的生命都介绍完了，在回头来看一下前面的图，就比较清晰了，把生命周期的回调函数总结成如下表格：\n\n|生命周期|\t调用次数\t|能否使用 setSate()|\n|-------|-----|-----|\n|getDefaultProps|\t1(全局调用一次)\t|否|\n|getInitialState\t|1\t|否|\n|componentWillMount|\t1\t|是|\n|render\t|>=1|\t否|\n|componentDidMount\t|1\t|是|\n|componentWillReceiveProps|\t>=0\t|是|\n|shouldComponentUpdate|\t>=0\t|否|\n|componentWillUpdate\t|>=0\t|否|\n|componentDidUpdate\t|>=0|\t否|\n|componentWillUnmount|\t1| 否|","slug":"react-native组件的生命周期","published":1,"updated":"2022-03-17T12:21:16.712Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl11zacpn000drodqdjwsgxh8","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>所谓生命周期，就是一个对象从开始生成到最后消亡所经历的状态，理解生命周期，是合理开发的关键。RN 组件的生命周期整理如下图：</p>\n<a id=\"more\"></a>\n\n<p><img src=\"https://img.race604.com/3-3-component-lifecycle.jpg\" alt=\"生命周期\"></p>\n<p>如图，可以把组件生命周期大致分为三个阶段：</p>\n<ul>\n<li>第一阶段：是组件第一次绘制阶段，如图中的上面虚线框内，在这里完成了组件的加载和初始化；</li>\n<li>第二阶段：是组件在运行和交互阶段，如图中左下角虚线框，这个阶段组件可以处理用户交互，或者接收事件更新界面；</li>\n<li>第三阶段：是组件卸载消亡的阶段，如图中右下角的虚线框中，这里做一些组件的清理工作。</li>\n</ul>\n<h2 id=\"生命周期回调函数\"><a href=\"#生命周期回调函数\" class=\"headerlink\" title=\"生命周期回调函数\"></a>生命周期回调函数</h2><p>下面来详细介绍生命周期中的各回调函数。</p>\n<h5 id=\"getDefaultProps\"><a href=\"#getDefaultProps\" class=\"headerlink\" title=\"getDefaultProps\"></a><em>getDefaultProps</em></h5><p>在组件创建之前，会先调用 getDefaultProps()，这是全局调用一次，严格地来说，这不是组件的生命周期的一部分。在组件被创建并加载候，首先调用 getInitialState()，来初始化组件的状态。</p>\n<h5 id=\"componentWillMount\"><a href=\"#componentWillMount\" class=\"headerlink\" title=\"componentWillMount\"></a><em>componentWillMount</em></h5><p>然后，准备加载组件，会调用 componentWillMount(), 这个函数调用时机是在组件创建，并初始化了状态之后，在第一次绘制 render() 之前。可以在这里做一些业务初始化操作，也可以设置组件状态。这个函数在整个生命周期中只被调用一次。</p>\n<h5 id=\"componentDidMount\"><a href=\"#componentDidMount\" class=\"headerlink\" title=\"componentDidMount\"></a><em>componentDidMount</em></h5><p>在组件第一次绘制之后，会调用 componentDidMount()，通知组件已经加载完成。这个函数调用的时候，其虚拟 DOM 已经构建完成，你可以在这个函数开始获取其中的元素或者子组件了。需要注意的是，RN 框架是先调用子组件的 componentDidMount()，然后调用父组件的函数。从这个函数开始，就可以和 JS 其他框架交互了，例如设置计时 setTimeout 或者 setInterval，或者发起网络请求。这个函数也是只被调用一次。这个函数之后，就进入了稳定运行状态，等待事件触发.</p>\n<h5 id=\"componentWillReceiveProps\"><a href=\"#componentWillReceiveProps\" class=\"headerlink\" title=\"componentWillReceiveProps\"></a><em>componentWillReceiveProps</em></h5><p>如果组件收到新的属性（props），就会调用 componentWillReceiveProps(),输入参数 nextProps 是即将被设置的属性，旧的属性还是可以通过 this.props 来获取。在这个回调函数里面，你可以根据属性的变化，通过调用 this.setState() 来更新你的组件状态，这里调用更新状态是安全的，并不会触发额外的 render() 调用。如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">componentWillReceiveProps(nextProps) &#123;  </span><br><span class=\"line\">  this.setState(&#123;</span><br><span class=\"line\">    oldProps: nextProps</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"shouldComponentUpdate\"><a href=\"#shouldComponentUpdate\" class=\"headerlink\" title=\"shouldComponentUpdate\"></a><em>shouldComponentUpdate</em></h5><p>当组件接收到新的属性和状态改变的话，都会触发调用 shouldComponentUpdate(…)，输入参数 nextProps 和上面的 componentWillReceiveProps 函数一样，nextState 表示组件即将更新的状态值。这个函数的返回值决定是否需要更新组件，如果 true 表示需要更新，继续走后面的更新流程。否者，则不更新，直接进入等待状态。</p>\n<p>默认情况下，这个函数永远返回 true 用来保证数据变化的时候 UI 能够同步更新。在大型项目中，你可以自己重载这个函数，通过检查变化前后属性和状态，来决定 UI 是否需要更新，能有效提高应用性能。</p>\n<h5 id=\"componentWillUpdate\"><a href=\"#componentWillUpdate\" class=\"headerlink\" title=\"componentWillUpdate\"></a><em>componentWillUpdate</em></h5><p>如果组件状态或者属性改变，并且上面的 shouldComponentUpdate(…) 返回为 true，就会开始准更新组件，并调用 componentWillUpdate()，输入参数与 shouldComponentUpdate 一样，在这个回调中，可以做一些在更新界面之前要做的事情。需要特别注意的是，在这个函数里面，你就不能使用 this.setState 来修改状态。这个函数调用之后，就会把 nextProps 和 nextState 分别设置到 this.props 和 this.state 中。紧接着这个函数，就会调用 render() 来更新界面了。</p>\n<h5 id=\"componentDidUpdate\"><a href=\"#componentDidUpdate\" class=\"headerlink\" title=\"componentDidUpdate\"></a><em>componentDidUpdate</em></h5><p>调用了 render() 更新完成界面之后，会调用 componentDidUpdate() 来得到通知，因为到这里已经完成了属性和状态的更新了，此函数的输入参数变成了 prevProps 和 prevState。</p>\n<h5 id=\"componentWillUnmount\"><a href=\"#componentWillUnmount\" class=\"headerlink\" title=\"componentWillUnmount\"></a><em>componentWillUnmount</em></h5><p>当组件要被从界面上移除的时候，就会调用 componentWillUnmount(),在这个函数中，可以做一些组件相关的清理工作，例如取消计时器、网络请求等.</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>到这里，RN 的组件的完整的生命都介绍完了，在回头来看一下前面的图，就比较清晰了，把生命周期的回调函数总结成如下表格：</p>\n<table>\n<thead>\n<tr>\n<th>生命周期</th>\n<th>调用次数</th>\n<th>能否使用 setSate()</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>getDefaultProps</td>\n<td>1(全局调用一次)</td>\n<td>否</td>\n</tr>\n<tr>\n<td>getInitialState</td>\n<td>1</td>\n<td>否</td>\n</tr>\n<tr>\n<td>componentWillMount</td>\n<td>1</td>\n<td>是</td>\n</tr>\n<tr>\n<td>render</td>\n<td>&gt;=1</td>\n<td>否</td>\n</tr>\n<tr>\n<td>componentDidMount</td>\n<td>1</td>\n<td>是</td>\n</tr>\n<tr>\n<td>componentWillReceiveProps</td>\n<td>&gt;=0</td>\n<td>是</td>\n</tr>\n<tr>\n<td>shouldComponentUpdate</td>\n<td>&gt;=0</td>\n<td>否</td>\n</tr>\n<tr>\n<td>componentWillUpdate</td>\n<td>&gt;=0</td>\n<td>否</td>\n</tr>\n<tr>\n<td>componentDidUpdate</td>\n<td>&gt;=0</td>\n<td>否</td>\n</tr>\n<tr>\n<td>componentWillUnmount</td>\n<td>1</td>\n<td>否</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>所谓生命周期，就是一个对象从开始生成到最后消亡所经历的状态，理解生命周期，是合理开发的关键。RN 组件的生命周期整理如下图：</p>","more":"<p><img src=\"https://img.race604.com/3-3-component-lifecycle.jpg\" alt=\"生命周期\"></p>\n<p>如图，可以把组件生命周期大致分为三个阶段：</p>\n<ul>\n<li>第一阶段：是组件第一次绘制阶段，如图中的上面虚线框内，在这里完成了组件的加载和初始化；</li>\n<li>第二阶段：是组件在运行和交互阶段，如图中左下角虚线框，这个阶段组件可以处理用户交互，或者接收事件更新界面；</li>\n<li>第三阶段：是组件卸载消亡的阶段，如图中右下角的虚线框中，这里做一些组件的清理工作。</li>\n</ul>\n<h2 id=\"生命周期回调函数\"><a href=\"#生命周期回调函数\" class=\"headerlink\" title=\"生命周期回调函数\"></a>生命周期回调函数</h2><p>下面来详细介绍生命周期中的各回调函数。</p>\n<h5 id=\"getDefaultProps\"><a href=\"#getDefaultProps\" class=\"headerlink\" title=\"getDefaultProps\"></a><em>getDefaultProps</em></h5><p>在组件创建之前，会先调用 getDefaultProps()，这是全局调用一次，严格地来说，这不是组件的生命周期的一部分。在组件被创建并加载候，首先调用 getInitialState()，来初始化组件的状态。</p>\n<h5 id=\"componentWillMount\"><a href=\"#componentWillMount\" class=\"headerlink\" title=\"componentWillMount\"></a><em>componentWillMount</em></h5><p>然后，准备加载组件，会调用 componentWillMount(), 这个函数调用时机是在组件创建，并初始化了状态之后，在第一次绘制 render() 之前。可以在这里做一些业务初始化操作，也可以设置组件状态。这个函数在整个生命周期中只被调用一次。</p>\n<h5 id=\"componentDidMount\"><a href=\"#componentDidMount\" class=\"headerlink\" title=\"componentDidMount\"></a><em>componentDidMount</em></h5><p>在组件第一次绘制之后，会调用 componentDidMount()，通知组件已经加载完成。这个函数调用的时候，其虚拟 DOM 已经构建完成，你可以在这个函数开始获取其中的元素或者子组件了。需要注意的是，RN 框架是先调用子组件的 componentDidMount()，然后调用父组件的函数。从这个函数开始，就可以和 JS 其他框架交互了，例如设置计时 setTimeout 或者 setInterval，或者发起网络请求。这个函数也是只被调用一次。这个函数之后，就进入了稳定运行状态，等待事件触发.</p>\n<h5 id=\"componentWillReceiveProps\"><a href=\"#componentWillReceiveProps\" class=\"headerlink\" title=\"componentWillReceiveProps\"></a><em>componentWillReceiveProps</em></h5><p>如果组件收到新的属性（props），就会调用 componentWillReceiveProps(),输入参数 nextProps 是即将被设置的属性，旧的属性还是可以通过 this.props 来获取。在这个回调函数里面，你可以根据属性的变化，通过调用 this.setState() 来更新你的组件状态，这里调用更新状态是安全的，并不会触发额外的 render() 调用。如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">componentWillReceiveProps(nextProps) &#123;  </span><br><span class=\"line\">  this.setState(&#123;</span><br><span class=\"line\">    oldProps: nextProps</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"shouldComponentUpdate\"><a href=\"#shouldComponentUpdate\" class=\"headerlink\" title=\"shouldComponentUpdate\"></a><em>shouldComponentUpdate</em></h5><p>当组件接收到新的属性和状态改变的话，都会触发调用 shouldComponentUpdate(…)，输入参数 nextProps 和上面的 componentWillReceiveProps 函数一样，nextState 表示组件即将更新的状态值。这个函数的返回值决定是否需要更新组件，如果 true 表示需要更新，继续走后面的更新流程。否者，则不更新，直接进入等待状态。</p>\n<p>默认情况下，这个函数永远返回 true 用来保证数据变化的时候 UI 能够同步更新。在大型项目中，你可以自己重载这个函数，通过检查变化前后属性和状态，来决定 UI 是否需要更新，能有效提高应用性能。</p>\n<h5 id=\"componentWillUpdate\"><a href=\"#componentWillUpdate\" class=\"headerlink\" title=\"componentWillUpdate\"></a><em>componentWillUpdate</em></h5><p>如果组件状态或者属性改变，并且上面的 shouldComponentUpdate(…) 返回为 true，就会开始准更新组件，并调用 componentWillUpdate()，输入参数与 shouldComponentUpdate 一样，在这个回调中，可以做一些在更新界面之前要做的事情。需要特别注意的是，在这个函数里面，你就不能使用 this.setState 来修改状态。这个函数调用之后，就会把 nextProps 和 nextState 分别设置到 this.props 和 this.state 中。紧接着这个函数，就会调用 render() 来更新界面了。</p>\n<h5 id=\"componentDidUpdate\"><a href=\"#componentDidUpdate\" class=\"headerlink\" title=\"componentDidUpdate\"></a><em>componentDidUpdate</em></h5><p>调用了 render() 更新完成界面之后，会调用 componentDidUpdate() 来得到通知，因为到这里已经完成了属性和状态的更新了，此函数的输入参数变成了 prevProps 和 prevState。</p>\n<h5 id=\"componentWillUnmount\"><a href=\"#componentWillUnmount\" class=\"headerlink\" title=\"componentWillUnmount\"></a><em>componentWillUnmount</em></h5><p>当组件要被从界面上移除的时候，就会调用 componentWillUnmount(),在这个函数中，可以做一些组件相关的清理工作，例如取消计时器、网络请求等.</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>到这里，RN 的组件的完整的生命都介绍完了，在回头来看一下前面的图，就比较清晰了，把生命周期的回调函数总结成如下表格：</p>\n<table>\n<thead>\n<tr>\n<th>生命周期</th>\n<th>调用次数</th>\n<th>能否使用 setSate()</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>getDefaultProps</td>\n<td>1(全局调用一次)</td>\n<td>否</td>\n</tr>\n<tr>\n<td>getInitialState</td>\n<td>1</td>\n<td>否</td>\n</tr>\n<tr>\n<td>componentWillMount</td>\n<td>1</td>\n<td>是</td>\n</tr>\n<tr>\n<td>render</td>\n<td>&gt;=1</td>\n<td>否</td>\n</tr>\n<tr>\n<td>componentDidMount</td>\n<td>1</td>\n<td>是</td>\n</tr>\n<tr>\n<td>componentWillReceiveProps</td>\n<td>&gt;=0</td>\n<td>是</td>\n</tr>\n<tr>\n<td>shouldComponentUpdate</td>\n<td>&gt;=0</td>\n<td>否</td>\n</tr>\n<tr>\n<td>componentWillUpdate</td>\n<td>&gt;=0</td>\n<td>否</td>\n</tr>\n<tr>\n<td>componentDidUpdate</td>\n<td>&gt;=0</td>\n<td>否</td>\n</tr>\n<tr>\n<td>componentWillUnmount</td>\n<td>1</td>\n<td>否</td>\n</tr>\n</tbody></table>"},{"title":"Effect-Hook","date":"2018-11-27T05:22:17.000Z","type":"tags","_content":"## effect-hook\n\n`Effect Hook` 可以使得你在函数组件中执行一些带有副作用的方法。\n\n <!-- more -->\n```\nimport {useState, useEffect} from 'react';\nfunction Example (){\n  const [count, setCount] = useState(0);\n  useEffect(()=>{\n    document.title = `You click ${count} times`\n  });\n  \n  return(\n    <div>\n        <p> you click {count} times </p>\n        <button onClick={() => setCount(count + 1)}>点击我</button>\n    </div>\n  )\n}\n```\n上面这段代码是基于上个 [state hook计数器的例子](http://www.baidu.com) 的例子，但是我们现在添加了新的功能，我么讲文档的标题设置为自定义消息，包含了点击次数。\n\n数据获取，设置订阅及先手动更改 `React` 组件中的 `DOM` 都是副作用的示例。无论你是否习惯与将这些操作成为“副作用”或者仅仅是“效果”，但之前你可能已经在组件中执行了这些操作。\n>  **提示：** 如果你熟悉`React`类组件生命周期方法，你就可以将`useEffect Hook`视为`componentDidMount`,`componentDidUpdate`和`componentWillUnmount`的组合。\n\nReact组件中有两种常见的副作用：那些需要清理的副作用和不需要清理的副作用。让我们详细的看一下两者的区别。\n\n----\n## 无需清理的副作用\n有时，我们希望在`React`更新`DOM`之后运行一些额外的代码。网络请求， 手动改变`DOM`和日志记录是不需要清理的效果（副作用，简称“效果”）的常见示例。我们这样说是因为我们可以运行他们并立即忘记他们。让我们比较一下`class`和`hooks`是如何让我们表达这样的副作用。\n\n### 使用class的例子\n在`react`类组件中，`render`方法本身不应该导致副作用。这太早了，我们通常希望`React`更新`DOM`之后执行我们的效果。这就是为啥在`React`类中，我们将副作用放到`componentDidMount`和`componentDidUpdate`中。看我们的例子，这是一个`React`计数器类的组件，它在react对DOM进行更改后立即更新文档的标题。\n\n```\nimport React,{Component} from 'react';\n\nexport default class Example extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            count: 0\n        };\n    }\n    \n    componentDidMount() {\n        document.title = `You click ${this.state.count} times`\n    }\n    \n    componentDidUpdate() {\n        document.title = `You clicked ${this.state.count} times`;\n    }\n    \n    render() {\n        return (\n          <div>\n            <p>You clicked {this.state.count} times</p>\n            <button onClick={() => this.setState({ count: this.state.count + 1 })}>\n              Click me\n            </button>\n          </div>\n        );\n  }\n}\n```\n请注意**我们如何在类中复制这两个生命周期方法之间的代码**\n这是因为在许多的情况下，我们希望执行相同的副作用，无论组件是刚安装还是已经更新。从概念上讲，我们希望它在每次渲染之后发生，但是在React类组件中没有这样的方法（render方法应该避免更重要）。我们可以提取一个单独的方法，但是我们仍然需要在这两个地方调用它。\n\n现在让我们回头再看看我们如何使用`useEffect Hook`做同样的事情。\n\n`useEffect`**有什么作用？**\n通过使用这个Hook，你告诉React你的组件需要在渲染后执行某些操作。React将记住你传递的函数（我们将其称为“效果”），并在执行DOM更新后稍后调用它。在这个效果中，我们设置文档标题，但我们也可以执行数据提取或调用其他命令式API。\n\n**为什么在组件内调用`useEffect`？** \n在组件中使用`useEffect`让我们可以直接从效果中访问状态变量（如count或任何道具）。我们不需要特殊的API来读取它 - 它已经在函数范围内了。Hooks拥抱`JavaScript`**闭包**，并避免在JavaScript已经提供解决方案的情况下引入特定于React的API。\n\n**每次渲染后useEffect都会运行吗？**\n是的。默认情况下，它在第一次渲染之后和每次更新之后运行。 （我们稍后会讨论如何自定义它。）你可能会发现更容易认为效果发生在“渲染之后”，而不是考虑“挂载”和“更新”。React保证DOM在运行‘效果’时已更新。\n\n### 详细说明\n现在我们对这个`hook`更加的了解了，那再看看下面这个例子：\n```\nfunction Example() {\n    const[count, setCount] = useState(0);\n    \n    useEffect(() => {\n        document.title = `You clicked ${count} times`;\n    });\n}    \n```\n我们声明了`count`状态变量，然后告诉`React`我们需要使用效果。我们将一个函数传递给`useEffect Hook`，这个函数式就是效果（副作用）。在我们的效果中，我们使用`document.title`浏览器`API`设置文档标题。我们可以读取效果中的最新`count`，因为它在我们的函数范围内。当`React`渲染我们的组件时，它会记住我们是用的效果，然后在更新`DOM`后运行我们的效果。每次渲染都会发生这种情况，包括第一次渲染。\n\n> **注意：** 与`componentDidMount`或`componentDidUpdate`不同，使用`useEffect`的效果不会阻止浏览器更新屏幕。这使应用感觉更具响应性。大多数效果不需要同步发生。在他们这样做的不常见情况下（例如测量布局），有一个单独的`useLayoutEffect Hook`，其`API`与`useEffect`相同。\n\n## 需要清理的副作用\n之前，我们研究了如何表达不需要任何清理的副作用。但是，有些效果需要清理。例如，我们可能希望设置对某些外部数据源的订阅。在这种情况下，清理是非常重要的，这样我们就不会引入内存泄漏！让我们比较一下我们如何使用类和`Hooks`来实现它。\n### 使用 **`class`**的例子\n在`React`类中，通常会在`componentDidMount`中设置订阅，并在`componentWillUnmount`中清除它。例如，假设我们有一个ChatAPI`模块，可以让我们订阅朋友的在线状态。以下是我们如何使用类订阅和显示该状态：\n```\nclass FriendStatus extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n        isOnline: null \n    };\n    this.handleStatusChange = this.handleStatusChange.bind(this);\n  }\n​\n  componentDidMount() {\n    ChatAPI.subscribeToFriendStatus(\n      this.props.friend.id,\n      this.handleStatusChange\n    );\n  }\n​\n  componentWillUnmount() {\n    ChatAPI.unsubscribeFromFriendStatus(\n      this.props.friend.id,\n      this.handleStatusChange\n    );\n  }\n​\n  handleStatusChange(status) {\n    this.setState({\n      isOnline: status.isOnline\n    });\n  }\n​\n  render() {\n    if (this.state.isOnline === null) {\n      return 'Loading...';\n    }\n    return this.state.isOnline ? 'Online' : 'Offline';\n  }\n}\n```\n请注意`componentDidMount`和`componentWillUnmount`如何相互作用。生命周期方法迫使我们拆分这个逻辑，即使它们中的概念代码都与相同的效果有关。\n\n> **注意：** 眼尖的你可能会注意到这个例子还需要一个`componentDidUpdate`方法才能完全正确。我们暂时忽略这一点，但会在本页的后面部分再回过头来讨论它。\n\n### 使用**`hooks`**的例子\n你可能认为我们需要单独的效果来执行清理。但是添加和删除订阅的代码是如此紧密相关，以至于`useEffect`旨在将它保持在一起。如果你的效果返回一个函数，`React`将在清理时运行它：\n```\nimport { useState, useEffect } from 'react';\n​\nfunction FriendStatus(props) {\n  const [isOnline, setIsOnline] = useState(null);\n​\n  function handleStatusChange(status) {\n    setIsOnline(status.isOnline);\n  }\n​\n  useEffect(() => {\n    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n    // 指定如何在这种效果之后清理\n    return function cleanup() {\n      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n    };\n  });\n​\n  if (isOnline === null) {\n    return 'Loading...';\n  }\n  return isOnline ? 'Online' : 'Offline';\n}\n```\n\n**为什么我们从效果中返回一个函数？** 这是效果的可选清理机制。每个效果都可能返回一个在它之后清理的函数。这使我们可以保持添加和删除彼此接近的订阅的逻辑。\n\n**React什么时候清理效果？** 当组件卸载时，React执行清理。但是，正如我们之前所了解的那样，效果会针对每个渲染运行而不仅仅是一次。这就是React在下次运行效果之前还清除前一渲染效果的原因。我们将讨论为什么这有助于避免错误以及如何在以后发生性能问题时选择退出此行为。\n> **注意:** 我们不必从效果中返回命名函数。我们在这里只是为了说明才加的命名，但你可以返回箭头函数。\n\n## 概述\n我们已经了解到useEffect让我们在组件渲染后表达不同类型的副作用。某些效果可能需要清理，因此它们返回一个函数：\n```\nuseEffect(() => {\n    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n    return () => {\n      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n    };\n});\n```\n其他效果可能没有清理阶段，也不会返回任何内容。比如：\n```\nuseEffect(() => {\n    document.title = `You clicked ${count} times`;\n});\n```\n如果你觉得你对Effect Hook的工作方式有了很好的把握，或者你感到不知所措，那么现在就可以跳转到关于Hooks规则。\n\n---\n## 使用效果的提示\n我们将继续深入了解使用`React`用户可能会产生好奇心的`useEffect`的某些方面。\n> **提示：使用多重效果分离问题**\n\n这是一个组合了前面示例中的计数器和朋友状态指示器逻辑的组件:\n```\nclass FriendStatusWithCounter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0, isOnline: null };\n    this.handleStatusChange = this.handleStatusChange.bind(this);\n  }\n​\n  componentDidMount() {\n    document.title = `You clicked ${this.state.count} times`;\n    ChatAPI.subscribeToFriendStatus(\n      this.props.friend.id,\n      this.handleStatusChange\n    );\n  }\n​\n  componentDidUpdate() {\n    document.title = `You clicked ${this.state.count} times`;\n  }\n​\n  componentWillUnmount() {\n    ChatAPI.unsubscribeFromFriendStatus(\n      this.props.friend.id,\n      this.handleStatusChange\n    );\n  }\n​\n  handleStatusChange(status) {\n    this.setState({\n      isOnline: status.isOnline\n    });\n  }\n  // ...\n```\n请注意设置 `document.title` 的逻辑如何在`componentDidMount` 和`componentDidUpdate` 之间拆分。订阅逻辑也在`componentDidMount` 和 `componentWillUnmount`之间传播。`componentDidMount` 包含两个任务的代码。\n\n那么，`Hooks`如何解决这个问题呢？就像你可以多次使用状态挂钩一样，你也可以使用多种效果。这让我们将不相关的逻辑分成不同的效果：\n```\nfunction FriendStatusWithCounter(props) {\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    document.title = `You clicked ${count} times`;\n  });\n​\n  const [isOnline, setIsOnline] = useState(null);\n  useEffect(() => {\n    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n    return () => {\n      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n    };\n  });\n​\n  function handleStatusChange(status) {\n    setIsOnline(status.isOnline);\n  }\n  // ...\n}\n```\n**`Hooks`**允许我们根据它正在做的事情而不是生命周期方法名称来拆分代码。 React将按照指定的顺序应用组件使用的每个效果。\n\n**说明：为什么效果在每个更新上运行**\n如果你习惯了类，你可能想知道为什么每次重新渲染后效果的清理阶段都会发生，而不是在卸载过程中只发生一次。让我们看一个实际的例子，看看为什么这个设计可以帮助我们创建更少bug的组件。\n\n在上面介绍了一个示例FriendStatus组件，该组件显示朋友是否在线。我们的类从this.props读取friend.id，在组件挂载后订阅朋友状态，并在卸载期间取消订阅：\n```\ncomponentDidMount() {\n    ChatAPI.subscribeToFriendStatus(\n      this.props.friend.id,\n      this.handleStatusChange\n    );\n  }\n​\n  componentWillUnmount() {\n    ChatAPI.unsubscribeFromFriendStatus(\n      this.props.friend.id,\n      this.handleStatusChange\n    );\n  }\n```\n**但是如果friend prop在组件出现在屏幕上时发生了变化，会发生什么？** 我们的组件将继续显示不同朋友的在线状态。这是一个错误。卸载时我们还会导致内存泄漏或崩溃，因为取消订阅会使用错误的朋友ID。\n\n在类组件中，我们需要添加componentDidUpdate来处理这种情况:\n\n```\ncomponentDidMount() {\n    ChatAPI.subscribeToFriendStatus(\n      this.props.friend.id,\n      this.handleStatusChange\n    );\n  }\n​\n  componentDidUpdate(prevProps) {\n    // 取消之前订阅的朋友\n    ChatAPI.unsubscribeFromFriendStatus(\n      prevProps.friend.id,\n      this.handleStatusChange\n    );\n    // 订阅下一个朋友\n    ChatAPI.subscribeToFriendStatus(\n      this.props.friend.id,\n      this.handleStatusChange\n    );\n  }\n​\n  componentWillUnmount() {\n    ChatAPI.unsubscribeFromFriendStatus(\n      this.props.friend.id,\n      this.handleStatusChange\n    );\n  }\n  \n```  \n\t\t\n忘记正确处理`componentDidUpdate`是`React`应用程序中常见的`bug`漏洞。\n现在考虑使用Hooks的这个组件的版本：\n\n\t\n\tfunction FriendStatus(props) {\n\t  // ...\n\t  useEffect(() => {\n\t\tChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n\t\treturn () => {\n\t\t  ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n\t\t};\n\t  });\n\n它不会受到这个bug的影响。 （但我们也没有对它做任何改动。）\n\n没有用于处理更新的特殊代码，因为默认情况下useEffect会处理它们。它会在应用下一个效果之前清除之前的效果。为了说明这一点，这里是一个订阅和取消订阅调用的序列，该组件可以随着时间的推移产生：\n\n\t// Mount with { friend: { id: 100 } } props\n\tChatAPI.subscribeToFriendStatus(100, handleStatusChange);     // Run first effect\n\t​\n\t// Update with { friend: { id: 200 } } props\n\tChatAPI.unsubscribeFromFriendStatus(100, handleStatusChange); // Clean up previous effect\n\tChatAPI.subscribeToFriendStatus(200, handleStatusChange);     // Run next effect\n\t​\n\t// Update with { friend: { id: 300 } } props\n\tChatAPI.unsubscribeFromFriendStatus(200, handleStatusChange); // Clean up previous effect\n\tChatAPI.subscribeToFriendStatus(300, handleStatusChange);     // Run next effect\n\t​\n\t// Unmount\n\tChatAPI.unsubscribeFromFriendStatus(300, handleStatusChange); // Clean up last effect\n\t\n此行为默认确保一致性，并防止由于缺少更新逻辑而导致类组件中常见的错误。\n\n**提示：通过跳过效果优化性能**\n\n在某些情况下，在每次渲染后清理或应用效果可能会产生性能问题。在类组件中，我们可以通过在`componentDidUpdate`中编写与`prevProps`或`prevState`的额外比较来解决这个问题：\n\n\tcomponentDidUpdate(prevProps, prevState) {\n\t  if (prevState.count !== this.state.count) {\n\t\tdocument.title = `You clicked ${this.state.count} times`;\n\t  }\n\t}\n\n这个要求很常见，它被内置到`useEffect Hook` API中。如果在重新渲染之间没有更改某些值，则可以告诉`React`跳过应用效果。为此，将数组作为可选的第二个参数传递给useEffect：\n\t\n\tuseEffect(() => {\n\t  document.title = `You clicked ${count} times`;\n\t}, [count]); // 当count改变的时候回再次运行这个效果\n\t\n在上面的例子中，我们传递`[count]`作为第二个参数。这是什么意思？如果 `count` 为5，然后我们的组件重新渲染，`count`仍然等于5，则`React`将比较前一个渲染的[5]和下一个渲染的[5]。因为数组中的所有项都是相同的（`5 === 5`），所以`React`会跳过这个效果。这是我们的优化。\n\n当我们使用`count`更新为6渲染时，React会将前一渲染中[5]数组中的项目与下一渲染中[6]数组中的项目进行比较。这次，`React`将重新运行效果，因为`5！== 6`。**如果数组中有多个项目，`React`将重新运行效果，即使其中只有一个不同。**\n\n这也适用于具有清理阶段的效果：\n\n\tuseEffect(() => {\n\t  ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n\t  return () => {\n\t\tChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n\t  };\n\t}, [props.friend.id]); // 只有朋友id改变重新订阅\n\n将来， 第二个参数可能会通过构建时转换自动添加。\n\n> **注意:** 如果使用此优化，请确保该数组包含外部作用域中随时间变化且效果使用的任何值，换句话说就是要在这个效果函数里有意义。 否则，代码将引用先前渲染中的旧值。我们还将讨论`Hooks API`参考中的其他优化选项。 \n\n> 如果要**运行效果并仅将其清理一次（在装载和卸载时），则可以将空数组（[]）作为第二个参数传递。** 这告诉React你的效果不依赖于来自props或 state的任何值，所以它永远不需要重新运行。这不作为特殊情况处理 - 它直接遵循输入数组的工作方式。虽然传递[]更接近熟悉的`componentDidMount`和 `componentWillUnmount`生命周期，但我们建议不要将它作为一种习惯，因为它经常会导致错误，除非你明确你自己在做什么， 如上所述。 不要忘记`React`推迟运行`useEffect`直到浏览器绘制完成后，所以做额外的工作不是问题。  \n","source":"_posts/Effect-Hook.md","raw":"---\ntitle: Effect-Hook\ndate: 2018-11-27 13:22:17\ntype: 'tags'\ntags:\n- react\n- react-hooks\ncategories:\n- react\t\n- react-hooks\n---\n## effect-hook\n\n`Effect Hook` 可以使得你在函数组件中执行一些带有副作用的方法。\n\n <!-- more -->\n```\nimport {useState, useEffect} from 'react';\nfunction Example (){\n  const [count, setCount] = useState(0);\n  useEffect(()=>{\n    document.title = `You click ${count} times`\n  });\n  \n  return(\n    <div>\n        <p> you click {count} times </p>\n        <button onClick={() => setCount(count + 1)}>点击我</button>\n    </div>\n  )\n}\n```\n上面这段代码是基于上个 [state hook计数器的例子](http://www.baidu.com) 的例子，但是我们现在添加了新的功能，我么讲文档的标题设置为自定义消息，包含了点击次数。\n\n数据获取，设置订阅及先手动更改 `React` 组件中的 `DOM` 都是副作用的示例。无论你是否习惯与将这些操作成为“副作用”或者仅仅是“效果”，但之前你可能已经在组件中执行了这些操作。\n>  **提示：** 如果你熟悉`React`类组件生命周期方法，你就可以将`useEffect Hook`视为`componentDidMount`,`componentDidUpdate`和`componentWillUnmount`的组合。\n\nReact组件中有两种常见的副作用：那些需要清理的副作用和不需要清理的副作用。让我们详细的看一下两者的区别。\n\n----\n## 无需清理的副作用\n有时，我们希望在`React`更新`DOM`之后运行一些额外的代码。网络请求， 手动改变`DOM`和日志记录是不需要清理的效果（副作用，简称“效果”）的常见示例。我们这样说是因为我们可以运行他们并立即忘记他们。让我们比较一下`class`和`hooks`是如何让我们表达这样的副作用。\n\n### 使用class的例子\n在`react`类组件中，`render`方法本身不应该导致副作用。这太早了，我们通常希望`React`更新`DOM`之后执行我们的效果。这就是为啥在`React`类中，我们将副作用放到`componentDidMount`和`componentDidUpdate`中。看我们的例子，这是一个`React`计数器类的组件，它在react对DOM进行更改后立即更新文档的标题。\n\n```\nimport React,{Component} from 'react';\n\nexport default class Example extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            count: 0\n        };\n    }\n    \n    componentDidMount() {\n        document.title = `You click ${this.state.count} times`\n    }\n    \n    componentDidUpdate() {\n        document.title = `You clicked ${this.state.count} times`;\n    }\n    \n    render() {\n        return (\n          <div>\n            <p>You clicked {this.state.count} times</p>\n            <button onClick={() => this.setState({ count: this.state.count + 1 })}>\n              Click me\n            </button>\n          </div>\n        );\n  }\n}\n```\n请注意**我们如何在类中复制这两个生命周期方法之间的代码**\n这是因为在许多的情况下，我们希望执行相同的副作用，无论组件是刚安装还是已经更新。从概念上讲，我们希望它在每次渲染之后发生，但是在React类组件中没有这样的方法（render方法应该避免更重要）。我们可以提取一个单独的方法，但是我们仍然需要在这两个地方调用它。\n\n现在让我们回头再看看我们如何使用`useEffect Hook`做同样的事情。\n\n`useEffect`**有什么作用？**\n通过使用这个Hook，你告诉React你的组件需要在渲染后执行某些操作。React将记住你传递的函数（我们将其称为“效果”），并在执行DOM更新后稍后调用它。在这个效果中，我们设置文档标题，但我们也可以执行数据提取或调用其他命令式API。\n\n**为什么在组件内调用`useEffect`？** \n在组件中使用`useEffect`让我们可以直接从效果中访问状态变量（如count或任何道具）。我们不需要特殊的API来读取它 - 它已经在函数范围内了。Hooks拥抱`JavaScript`**闭包**，并避免在JavaScript已经提供解决方案的情况下引入特定于React的API。\n\n**每次渲染后useEffect都会运行吗？**\n是的。默认情况下，它在第一次渲染之后和每次更新之后运行。 （我们稍后会讨论如何自定义它。）你可能会发现更容易认为效果发生在“渲染之后”，而不是考虑“挂载”和“更新”。React保证DOM在运行‘效果’时已更新。\n\n### 详细说明\n现在我们对这个`hook`更加的了解了，那再看看下面这个例子：\n```\nfunction Example() {\n    const[count, setCount] = useState(0);\n    \n    useEffect(() => {\n        document.title = `You clicked ${count} times`;\n    });\n}    \n```\n我们声明了`count`状态变量，然后告诉`React`我们需要使用效果。我们将一个函数传递给`useEffect Hook`，这个函数式就是效果（副作用）。在我们的效果中，我们使用`document.title`浏览器`API`设置文档标题。我们可以读取效果中的最新`count`，因为它在我们的函数范围内。当`React`渲染我们的组件时，它会记住我们是用的效果，然后在更新`DOM`后运行我们的效果。每次渲染都会发生这种情况，包括第一次渲染。\n\n> **注意：** 与`componentDidMount`或`componentDidUpdate`不同，使用`useEffect`的效果不会阻止浏览器更新屏幕。这使应用感觉更具响应性。大多数效果不需要同步发生。在他们这样做的不常见情况下（例如测量布局），有一个单独的`useLayoutEffect Hook`，其`API`与`useEffect`相同。\n\n## 需要清理的副作用\n之前，我们研究了如何表达不需要任何清理的副作用。但是，有些效果需要清理。例如，我们可能希望设置对某些外部数据源的订阅。在这种情况下，清理是非常重要的，这样我们就不会引入内存泄漏！让我们比较一下我们如何使用类和`Hooks`来实现它。\n### 使用 **`class`**的例子\n在`React`类中，通常会在`componentDidMount`中设置订阅，并在`componentWillUnmount`中清除它。例如，假设我们有一个ChatAPI`模块，可以让我们订阅朋友的在线状态。以下是我们如何使用类订阅和显示该状态：\n```\nclass FriendStatus extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n        isOnline: null \n    };\n    this.handleStatusChange = this.handleStatusChange.bind(this);\n  }\n​\n  componentDidMount() {\n    ChatAPI.subscribeToFriendStatus(\n      this.props.friend.id,\n      this.handleStatusChange\n    );\n  }\n​\n  componentWillUnmount() {\n    ChatAPI.unsubscribeFromFriendStatus(\n      this.props.friend.id,\n      this.handleStatusChange\n    );\n  }\n​\n  handleStatusChange(status) {\n    this.setState({\n      isOnline: status.isOnline\n    });\n  }\n​\n  render() {\n    if (this.state.isOnline === null) {\n      return 'Loading...';\n    }\n    return this.state.isOnline ? 'Online' : 'Offline';\n  }\n}\n```\n请注意`componentDidMount`和`componentWillUnmount`如何相互作用。生命周期方法迫使我们拆分这个逻辑，即使它们中的概念代码都与相同的效果有关。\n\n> **注意：** 眼尖的你可能会注意到这个例子还需要一个`componentDidUpdate`方法才能完全正确。我们暂时忽略这一点，但会在本页的后面部分再回过头来讨论它。\n\n### 使用**`hooks`**的例子\n你可能认为我们需要单独的效果来执行清理。但是添加和删除订阅的代码是如此紧密相关，以至于`useEffect`旨在将它保持在一起。如果你的效果返回一个函数，`React`将在清理时运行它：\n```\nimport { useState, useEffect } from 'react';\n​\nfunction FriendStatus(props) {\n  const [isOnline, setIsOnline] = useState(null);\n​\n  function handleStatusChange(status) {\n    setIsOnline(status.isOnline);\n  }\n​\n  useEffect(() => {\n    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n    // 指定如何在这种效果之后清理\n    return function cleanup() {\n      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n    };\n  });\n​\n  if (isOnline === null) {\n    return 'Loading...';\n  }\n  return isOnline ? 'Online' : 'Offline';\n}\n```\n\n**为什么我们从效果中返回一个函数？** 这是效果的可选清理机制。每个效果都可能返回一个在它之后清理的函数。这使我们可以保持添加和删除彼此接近的订阅的逻辑。\n\n**React什么时候清理效果？** 当组件卸载时，React执行清理。但是，正如我们之前所了解的那样，效果会针对每个渲染运行而不仅仅是一次。这就是React在下次运行效果之前还清除前一渲染效果的原因。我们将讨论为什么这有助于避免错误以及如何在以后发生性能问题时选择退出此行为。\n> **注意:** 我们不必从效果中返回命名函数。我们在这里只是为了说明才加的命名，但你可以返回箭头函数。\n\n## 概述\n我们已经了解到useEffect让我们在组件渲染后表达不同类型的副作用。某些效果可能需要清理，因此它们返回一个函数：\n```\nuseEffect(() => {\n    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n    return () => {\n      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n    };\n});\n```\n其他效果可能没有清理阶段，也不会返回任何内容。比如：\n```\nuseEffect(() => {\n    document.title = `You clicked ${count} times`;\n});\n```\n如果你觉得你对Effect Hook的工作方式有了很好的把握，或者你感到不知所措，那么现在就可以跳转到关于Hooks规则。\n\n---\n## 使用效果的提示\n我们将继续深入了解使用`React`用户可能会产生好奇心的`useEffect`的某些方面。\n> **提示：使用多重效果分离问题**\n\n这是一个组合了前面示例中的计数器和朋友状态指示器逻辑的组件:\n```\nclass FriendStatusWithCounter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { count: 0, isOnline: null };\n    this.handleStatusChange = this.handleStatusChange.bind(this);\n  }\n​\n  componentDidMount() {\n    document.title = `You clicked ${this.state.count} times`;\n    ChatAPI.subscribeToFriendStatus(\n      this.props.friend.id,\n      this.handleStatusChange\n    );\n  }\n​\n  componentDidUpdate() {\n    document.title = `You clicked ${this.state.count} times`;\n  }\n​\n  componentWillUnmount() {\n    ChatAPI.unsubscribeFromFriendStatus(\n      this.props.friend.id,\n      this.handleStatusChange\n    );\n  }\n​\n  handleStatusChange(status) {\n    this.setState({\n      isOnline: status.isOnline\n    });\n  }\n  // ...\n```\n请注意设置 `document.title` 的逻辑如何在`componentDidMount` 和`componentDidUpdate` 之间拆分。订阅逻辑也在`componentDidMount` 和 `componentWillUnmount`之间传播。`componentDidMount` 包含两个任务的代码。\n\n那么，`Hooks`如何解决这个问题呢？就像你可以多次使用状态挂钩一样，你也可以使用多种效果。这让我们将不相关的逻辑分成不同的效果：\n```\nfunction FriendStatusWithCounter(props) {\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    document.title = `You clicked ${count} times`;\n  });\n​\n  const [isOnline, setIsOnline] = useState(null);\n  useEffect(() => {\n    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n    return () => {\n      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n    };\n  });\n​\n  function handleStatusChange(status) {\n    setIsOnline(status.isOnline);\n  }\n  // ...\n}\n```\n**`Hooks`**允许我们根据它正在做的事情而不是生命周期方法名称来拆分代码。 React将按照指定的顺序应用组件使用的每个效果。\n\n**说明：为什么效果在每个更新上运行**\n如果你习惯了类，你可能想知道为什么每次重新渲染后效果的清理阶段都会发生，而不是在卸载过程中只发生一次。让我们看一个实际的例子，看看为什么这个设计可以帮助我们创建更少bug的组件。\n\n在上面介绍了一个示例FriendStatus组件，该组件显示朋友是否在线。我们的类从this.props读取friend.id，在组件挂载后订阅朋友状态，并在卸载期间取消订阅：\n```\ncomponentDidMount() {\n    ChatAPI.subscribeToFriendStatus(\n      this.props.friend.id,\n      this.handleStatusChange\n    );\n  }\n​\n  componentWillUnmount() {\n    ChatAPI.unsubscribeFromFriendStatus(\n      this.props.friend.id,\n      this.handleStatusChange\n    );\n  }\n```\n**但是如果friend prop在组件出现在屏幕上时发生了变化，会发生什么？** 我们的组件将继续显示不同朋友的在线状态。这是一个错误。卸载时我们还会导致内存泄漏或崩溃，因为取消订阅会使用错误的朋友ID。\n\n在类组件中，我们需要添加componentDidUpdate来处理这种情况:\n\n```\ncomponentDidMount() {\n    ChatAPI.subscribeToFriendStatus(\n      this.props.friend.id,\n      this.handleStatusChange\n    );\n  }\n​\n  componentDidUpdate(prevProps) {\n    // 取消之前订阅的朋友\n    ChatAPI.unsubscribeFromFriendStatus(\n      prevProps.friend.id,\n      this.handleStatusChange\n    );\n    // 订阅下一个朋友\n    ChatAPI.subscribeToFriendStatus(\n      this.props.friend.id,\n      this.handleStatusChange\n    );\n  }\n​\n  componentWillUnmount() {\n    ChatAPI.unsubscribeFromFriendStatus(\n      this.props.friend.id,\n      this.handleStatusChange\n    );\n  }\n  \n```  \n\t\t\n忘记正确处理`componentDidUpdate`是`React`应用程序中常见的`bug`漏洞。\n现在考虑使用Hooks的这个组件的版本：\n\n\t\n\tfunction FriendStatus(props) {\n\t  // ...\n\t  useEffect(() => {\n\t\tChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n\t\treturn () => {\n\t\t  ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n\t\t};\n\t  });\n\n它不会受到这个bug的影响。 （但我们也没有对它做任何改动。）\n\n没有用于处理更新的特殊代码，因为默认情况下useEffect会处理它们。它会在应用下一个效果之前清除之前的效果。为了说明这一点，这里是一个订阅和取消订阅调用的序列，该组件可以随着时间的推移产生：\n\n\t// Mount with { friend: { id: 100 } } props\n\tChatAPI.subscribeToFriendStatus(100, handleStatusChange);     // Run first effect\n\t​\n\t// Update with { friend: { id: 200 } } props\n\tChatAPI.unsubscribeFromFriendStatus(100, handleStatusChange); // Clean up previous effect\n\tChatAPI.subscribeToFriendStatus(200, handleStatusChange);     // Run next effect\n\t​\n\t// Update with { friend: { id: 300 } } props\n\tChatAPI.unsubscribeFromFriendStatus(200, handleStatusChange); // Clean up previous effect\n\tChatAPI.subscribeToFriendStatus(300, handleStatusChange);     // Run next effect\n\t​\n\t// Unmount\n\tChatAPI.unsubscribeFromFriendStatus(300, handleStatusChange); // Clean up last effect\n\t\n此行为默认确保一致性，并防止由于缺少更新逻辑而导致类组件中常见的错误。\n\n**提示：通过跳过效果优化性能**\n\n在某些情况下，在每次渲染后清理或应用效果可能会产生性能问题。在类组件中，我们可以通过在`componentDidUpdate`中编写与`prevProps`或`prevState`的额外比较来解决这个问题：\n\n\tcomponentDidUpdate(prevProps, prevState) {\n\t  if (prevState.count !== this.state.count) {\n\t\tdocument.title = `You clicked ${this.state.count} times`;\n\t  }\n\t}\n\n这个要求很常见，它被内置到`useEffect Hook` API中。如果在重新渲染之间没有更改某些值，则可以告诉`React`跳过应用效果。为此，将数组作为可选的第二个参数传递给useEffect：\n\t\n\tuseEffect(() => {\n\t  document.title = `You clicked ${count} times`;\n\t}, [count]); // 当count改变的时候回再次运行这个效果\n\t\n在上面的例子中，我们传递`[count]`作为第二个参数。这是什么意思？如果 `count` 为5，然后我们的组件重新渲染，`count`仍然等于5，则`React`将比较前一个渲染的[5]和下一个渲染的[5]。因为数组中的所有项都是相同的（`5 === 5`），所以`React`会跳过这个效果。这是我们的优化。\n\n当我们使用`count`更新为6渲染时，React会将前一渲染中[5]数组中的项目与下一渲染中[6]数组中的项目进行比较。这次，`React`将重新运行效果，因为`5！== 6`。**如果数组中有多个项目，`React`将重新运行效果，即使其中只有一个不同。**\n\n这也适用于具有清理阶段的效果：\n\n\tuseEffect(() => {\n\t  ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n\t  return () => {\n\t\tChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n\t  };\n\t}, [props.friend.id]); // 只有朋友id改变重新订阅\n\n将来， 第二个参数可能会通过构建时转换自动添加。\n\n> **注意:** 如果使用此优化，请确保该数组包含外部作用域中随时间变化且效果使用的任何值，换句话说就是要在这个效果函数里有意义。 否则，代码将引用先前渲染中的旧值。我们还将讨论`Hooks API`参考中的其他优化选项。 \n\n> 如果要**运行效果并仅将其清理一次（在装载和卸载时），则可以将空数组（[]）作为第二个参数传递。** 这告诉React你的效果不依赖于来自props或 state的任何值，所以它永远不需要重新运行。这不作为特殊情况处理 - 它直接遵循输入数组的工作方式。虽然传递[]更接近熟悉的`componentDidMount`和 `componentWillUnmount`生命周期，但我们建议不要将它作为一种习惯，因为它经常会导致错误，除非你明确你自己在做什么， 如上所述。 不要忘记`React`推迟运行`useEffect`直到浏览器绘制完成后，所以做额外的工作不是问题。  \n","slug":"Effect-Hook","published":1,"updated":"2022-03-17T12:21:16.708Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl11zacpv0011rodq1udnb4h3","content":"<h2 id=\"effect-hook\"><a href=\"#effect-hook\" class=\"headerlink\" title=\"effect-hook\"></a>effect-hook</h2><p><code>Effect Hook</code> 可以使得你在函数组件中执行一些带有副作用的方法。</p>\n <a id=\"more\"></a>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;useState, useEffect&#125; from &#x27;react&#x27;;</span><br><span class=\"line\">function Example ()&#123;</span><br><span class=\"line\">  const [count, setCount] = useState(0);</span><br><span class=\"line\">  useEffect(()=&gt;&#123;</span><br><span class=\"line\">    document.title = `You click $&#123;count&#125; times`</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">  return(</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;p&gt; you click &#123;count&#125; times &lt;/p&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;点击我&lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面这段代码是基于上个 <a href=\"http://www.baidu.com/\">state hook计数器的例子</a> 的例子，但是我们现在添加了新的功能，我么讲文档的标题设置为自定义消息，包含了点击次数。</p>\n<p>数据获取，设置订阅及先手动更改 <code>React</code> 组件中的 <code>DOM</code> 都是副作用的示例。无论你是否习惯与将这些操作成为“副作用”或者仅仅是“效果”，但之前你可能已经在组件中执行了这些操作。</p>\n<blockquote>\n<p> <strong>提示：</strong> 如果你熟悉<code>React</code>类组件生命周期方法，你就可以将<code>useEffect Hook</code>视为<code>componentDidMount</code>,<code>componentDidUpdate</code>和<code>componentWillUnmount</code>的组合。</p>\n</blockquote>\n<p>React组件中有两种常见的副作用：那些需要清理的副作用和不需要清理的副作用。让我们详细的看一下两者的区别。</p>\n<hr>\n<h2 id=\"无需清理的副作用\"><a href=\"#无需清理的副作用\" class=\"headerlink\" title=\"无需清理的副作用\"></a>无需清理的副作用</h2><p>有时，我们希望在<code>React</code>更新<code>DOM</code>之后运行一些额外的代码。网络请求， 手动改变<code>DOM</code>和日志记录是不需要清理的效果（副作用，简称“效果”）的常见示例。我们这样说是因为我们可以运行他们并立即忘记他们。让我们比较一下<code>class</code>和<code>hooks</code>是如何让我们表达这样的副作用。</p>\n<h3 id=\"使用class的例子\"><a href=\"#使用class的例子\" class=\"headerlink\" title=\"使用class的例子\"></a>使用class的例子</h3><p>在<code>react</code>类组件中，<code>render</code>方法本身不应该导致副作用。这太早了，我们通常希望<code>React</code>更新<code>DOM</code>之后执行我们的效果。这就是为啥在<code>React</code>类中，我们将副作用放到<code>componentDidMount</code>和<code>componentDidUpdate</code>中。看我们的例子，这是一个<code>React</code>计数器类的组件，它在react对DOM进行更改后立即更新文档的标题。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React,&#123;Component&#125; from &#x27;react&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default class Example extends Component &#123;</span><br><span class=\"line\">    constructor(props)&#123;</span><br><span class=\"line\">        super(props);</span><br><span class=\"line\">        this.state = &#123;</span><br><span class=\"line\">            count: 0</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    componentDidMount() &#123;</span><br><span class=\"line\">        document.title = `You click $&#123;this.state.count&#125; times`</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    componentDidUpdate() &#123;</span><br><span class=\"line\">        document.title = `You clicked $&#123;this.state.count&#125; times`;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">          &lt;div&gt;</span><br><span class=\"line\">            &lt;p&gt;You clicked &#123;this.state.count&#125; times&lt;/p&gt;</span><br><span class=\"line\">            &lt;button onClick=&#123;() =&gt; this.setState(&#123; count: this.state.count + 1 &#125;)&#125;&gt;</span><br><span class=\"line\">              Click me</span><br><span class=\"line\">            &lt;/button&gt;</span><br><span class=\"line\">          &lt;/div&gt;</span><br><span class=\"line\">        );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>请注意<strong>我们如何在类中复制这两个生命周期方法之间的代码</strong><br>这是因为在许多的情况下，我们希望执行相同的副作用，无论组件是刚安装还是已经更新。从概念上讲，我们希望它在每次渲染之后发生，但是在React类组件中没有这样的方法（render方法应该避免更重要）。我们可以提取一个单独的方法，但是我们仍然需要在这两个地方调用它。</p>\n<p>现在让我们回头再看看我们如何使用<code>useEffect Hook</code>做同样的事情。</p>\n<p><code>useEffect</code><strong>有什么作用？</strong><br>通过使用这个Hook，你告诉React你的组件需要在渲染后执行某些操作。React将记住你传递的函数（我们将其称为“效果”），并在执行DOM更新后稍后调用它。在这个效果中，我们设置文档标题，但我们也可以执行数据提取或调用其他命令式API。</p>\n<p><strong>为什么在组件内调用<code>useEffect</code>？</strong><br>在组件中使用<code>useEffect</code>让我们可以直接从效果中访问状态变量（如count或任何道具）。我们不需要特殊的API来读取它 - 它已经在函数范围内了。Hooks拥抱<code>JavaScript</code><strong>闭包</strong>，并避免在JavaScript已经提供解决方案的情况下引入特定于React的API。</p>\n<p><strong>每次渲染后useEffect都会运行吗？</strong><br>是的。默认情况下，它在第一次渲染之后和每次更新之后运行。 （我们稍后会讨论如何自定义它。）你可能会发现更容易认为效果发生在“渲染之后”，而不是考虑“挂载”和“更新”。React保证DOM在运行‘效果’时已更新。</p>\n<h3 id=\"详细说明\"><a href=\"#详细说明\" class=\"headerlink\" title=\"详细说明\"></a>详细说明</h3><p>现在我们对这个<code>hook</code>更加的了解了，那再看看下面这个例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Example() &#123;</span><br><span class=\"line\">    const[count, setCount] = useState(0);</span><br><span class=\"line\">    </span><br><span class=\"line\">    useEffect(() =&gt; &#123;</span><br><span class=\"line\">        document.title = `You clicked $&#123;count&#125; times`;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;    </span><br></pre></td></tr></table></figure>\n<p>我们声明了<code>count</code>状态变量，然后告诉<code>React</code>我们需要使用效果。我们将一个函数传递给<code>useEffect Hook</code>，这个函数式就是效果（副作用）。在我们的效果中，我们使用<code>document.title</code>浏览器<code>API</code>设置文档标题。我们可以读取效果中的最新<code>count</code>，因为它在我们的函数范围内。当<code>React</code>渲染我们的组件时，它会记住我们是用的效果，然后在更新<code>DOM</code>后运行我们的效果。每次渲染都会发生这种情况，包括第一次渲染。</p>\n<blockquote>\n<p><strong>注意：</strong> 与<code>componentDidMount</code>或<code>componentDidUpdate</code>不同，使用<code>useEffect</code>的效果不会阻止浏览器更新屏幕。这使应用感觉更具响应性。大多数效果不需要同步发生。在他们这样做的不常见情况下（例如测量布局），有一个单独的<code>useLayoutEffect Hook</code>，其<code>API</code>与<code>useEffect</code>相同。</p>\n</blockquote>\n<h2 id=\"需要清理的副作用\"><a href=\"#需要清理的副作用\" class=\"headerlink\" title=\"需要清理的副作用\"></a>需要清理的副作用</h2><p>之前，我们研究了如何表达不需要任何清理的副作用。但是，有些效果需要清理。例如，我们可能希望设置对某些外部数据源的订阅。在这种情况下，清理是非常重要的，这样我们就不会引入内存泄漏！让我们比较一下我们如何使用类和<code>Hooks</code>来实现它。</p>\n<h3 id=\"使用-class-的例子\"><a href=\"#使用-class-的例子\" class=\"headerlink\" title=\"使用 **class**的例子\"></a>使用 **<code>class</code>**的例子</h3><p>在<code>React</code>类中，通常会在<code>componentDidMount</code>中设置订阅，并在<code>componentWillUnmount</code>中清除它。例如，假设我们有一个ChatAPI`模块，可以让我们订阅朋友的在线状态。以下是我们如何使用类订阅和显示该状态：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class FriendStatus extends React.Component &#123;</span><br><span class=\"line\">  constructor(props) &#123;</span><br><span class=\"line\">    super(props);</span><br><span class=\"line\">    this.state = &#123; </span><br><span class=\"line\">        isOnline: null </span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    this.handleStatusChange = this.handleStatusChange.bind(this);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">​</span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    ChatAPI.subscribeToFriendStatus(</span><br><span class=\"line\">      this.props.friend.id,</span><br><span class=\"line\">      this.handleStatusChange</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">​</span><br><span class=\"line\">  componentWillUnmount() &#123;</span><br><span class=\"line\">    ChatAPI.unsubscribeFromFriendStatus(</span><br><span class=\"line\">      this.props.friend.id,</span><br><span class=\"line\">      this.handleStatusChange</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">​</span><br><span class=\"line\">  handleStatusChange(status) &#123;</span><br><span class=\"line\">    this.setState(&#123;</span><br><span class=\"line\">      isOnline: status.isOnline</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">​</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    if (this.state.isOnline === null) &#123;</span><br><span class=\"line\">      return &#x27;Loading...&#x27;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return this.state.isOnline ? &#x27;Online&#x27; : &#x27;Offline&#x27;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>请注意<code>componentDidMount</code>和<code>componentWillUnmount</code>如何相互作用。生命周期方法迫使我们拆分这个逻辑，即使它们中的概念代码都与相同的效果有关。</p>\n<blockquote>\n<p><strong>注意：</strong> 眼尖的你可能会注意到这个例子还需要一个<code>componentDidUpdate</code>方法才能完全正确。我们暂时忽略这一点，但会在本页的后面部分再回过头来讨论它。</p>\n</blockquote>\n<h3 id=\"使用-hooks-的例子\"><a href=\"#使用-hooks-的例子\" class=\"headerlink\" title=\"使用**hooks**的例子\"></a>使用**<code>hooks</code>**的例子</h3><p>你可能认为我们需要单独的效果来执行清理。但是添加和删除订阅的代码是如此紧密相关，以至于<code>useEffect</code>旨在将它保持在一起。如果你的效果返回一个函数，<code>React</code>将在清理时运行它：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; useState, useEffect &#125; from &#x27;react&#x27;;</span><br><span class=\"line\">​</span><br><span class=\"line\">function FriendStatus(props) &#123;</span><br><span class=\"line\">  const [isOnline, setIsOnline] = useState(null);</span><br><span class=\"line\">​</span><br><span class=\"line\">  function handleStatusChange(status) &#123;</span><br><span class=\"line\">    setIsOnline(status.isOnline);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">​</span><br><span class=\"line\">  useEffect(() =&gt; &#123;</span><br><span class=\"line\">    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);</span><br><span class=\"line\">    // 指定如何在这种效果之后清理</span><br><span class=\"line\">    return function cleanup() &#123;</span><br><span class=\"line\">      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">​</span><br><span class=\"line\">  if (isOnline === null) &#123;</span><br><span class=\"line\">    return &#x27;Loading...&#x27;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return isOnline ? &#x27;Online&#x27; : &#x27;Offline&#x27;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>为什么我们从效果中返回一个函数？</strong> 这是效果的可选清理机制。每个效果都可能返回一个在它之后清理的函数。这使我们可以保持添加和删除彼此接近的订阅的逻辑。</p>\n<p><strong>React什么时候清理效果？</strong> 当组件卸载时，React执行清理。但是，正如我们之前所了解的那样，效果会针对每个渲染运行而不仅仅是一次。这就是React在下次运行效果之前还清除前一渲染效果的原因。我们将讨论为什么这有助于避免错误以及如何在以后发生性能问题时选择退出此行为。</p>\n<blockquote>\n<p><strong>注意:</strong> 我们不必从效果中返回命名函数。我们在这里只是为了说明才加的命名，但你可以返回箭头函数。</p>\n</blockquote>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>我们已经了解到useEffect让我们在组件渲染后表达不同类型的副作用。某些效果可能需要清理，因此它们返回一个函数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(() =&gt; &#123;</span><br><span class=\"line\">    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);</span><br><span class=\"line\">    return () =&gt; &#123;</span><br><span class=\"line\">      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>其他效果可能没有清理阶段，也不会返回任何内容。比如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(() =&gt; &#123;</span><br><span class=\"line\">    document.title = `You clicked $&#123;count&#125; times`;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>如果你觉得你对Effect Hook的工作方式有了很好的把握，或者你感到不知所措，那么现在就可以跳转到关于Hooks规则。</p>\n<hr>\n<h2 id=\"使用效果的提示\"><a href=\"#使用效果的提示\" class=\"headerlink\" title=\"使用效果的提示\"></a>使用效果的提示</h2><p>我们将继续深入了解使用<code>React</code>用户可能会产生好奇心的<code>useEffect</code>的某些方面。</p>\n<blockquote>\n<p><strong>提示：使用多重效果分离问题</strong></p>\n</blockquote>\n<p>这是一个组合了前面示例中的计数器和朋友状态指示器逻辑的组件:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class FriendStatusWithCounter extends React.Component &#123;</span><br><span class=\"line\">  constructor(props) &#123;</span><br><span class=\"line\">    super(props);</span><br><span class=\"line\">    this.state = &#123; count: 0, isOnline: null &#125;;</span><br><span class=\"line\">    this.handleStatusChange = this.handleStatusChange.bind(this);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">​</span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    document.title = `You clicked $&#123;this.state.count&#125; times`;</span><br><span class=\"line\">    ChatAPI.subscribeToFriendStatus(</span><br><span class=\"line\">      this.props.friend.id,</span><br><span class=\"line\">      this.handleStatusChange</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">​</span><br><span class=\"line\">  componentDidUpdate() &#123;</span><br><span class=\"line\">    document.title = `You clicked $&#123;this.state.count&#125; times`;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">​</span><br><span class=\"line\">  componentWillUnmount() &#123;</span><br><span class=\"line\">    ChatAPI.unsubscribeFromFriendStatus(</span><br><span class=\"line\">      this.props.friend.id,</span><br><span class=\"line\">      this.handleStatusChange</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">​</span><br><span class=\"line\">  handleStatusChange(status) &#123;</span><br><span class=\"line\">    this.setState(&#123;</span><br><span class=\"line\">      isOnline: status.isOnline</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // ...</span><br></pre></td></tr></table></figure>\n<p>请注意设置 <code>document.title</code> 的逻辑如何在<code>componentDidMount</code> 和<code>componentDidUpdate</code> 之间拆分。订阅逻辑也在<code>componentDidMount</code> 和 <code>componentWillUnmount</code>之间传播。<code>componentDidMount</code> 包含两个任务的代码。</p>\n<p>那么，<code>Hooks</code>如何解决这个问题呢？就像你可以多次使用状态挂钩一样，你也可以使用多种效果。这让我们将不相关的逻辑分成不同的效果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function FriendStatusWithCounter(props) &#123;</span><br><span class=\"line\">  const [count, setCount] = useState(0);</span><br><span class=\"line\">  useEffect(() =&gt; &#123;</span><br><span class=\"line\">    document.title = `You clicked $&#123;count&#125; times`;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">​</span><br><span class=\"line\">  const [isOnline, setIsOnline] = useState(null);</span><br><span class=\"line\">  useEffect(() =&gt; &#123;</span><br><span class=\"line\">    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);</span><br><span class=\"line\">    return () =&gt; &#123;</span><br><span class=\"line\">      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">​</span><br><span class=\"line\">  function handleStatusChange(status) &#123;</span><br><span class=\"line\">    setIsOnline(status.isOnline);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>**<code>Hooks</code>**允许我们根据它正在做的事情而不是生命周期方法名称来拆分代码。 React将按照指定的顺序应用组件使用的每个效果。</p>\n<p><strong>说明：为什么效果在每个更新上运行</strong><br>如果你习惯了类，你可能想知道为什么每次重新渲染后效果的清理阶段都会发生，而不是在卸载过程中只发生一次。让我们看一个实际的例子，看看为什么这个设计可以帮助我们创建更少bug的组件。</p>\n<p>在上面介绍了一个示例FriendStatus组件，该组件显示朋友是否在线。我们的类从this.props读取friend.id，在组件挂载后订阅朋友状态，并在卸载期间取消订阅：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">componentDidMount() &#123;</span><br><span class=\"line\">    ChatAPI.subscribeToFriendStatus(</span><br><span class=\"line\">      this.props.friend.id,</span><br><span class=\"line\">      this.handleStatusChange</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">​</span><br><span class=\"line\">  componentWillUnmount() &#123;</span><br><span class=\"line\">    ChatAPI.unsubscribeFromFriendStatus(</span><br><span class=\"line\">      this.props.friend.id,</span><br><span class=\"line\">      this.handleStatusChange</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>但是如果friend prop在组件出现在屏幕上时发生了变化，会发生什么？</strong> 我们的组件将继续显示不同朋友的在线状态。这是一个错误。卸载时我们还会导致内存泄漏或崩溃，因为取消订阅会使用错误的朋友ID。</p>\n<p>在类组件中，我们需要添加componentDidUpdate来处理这种情况:</p>\n<pre><code>componentDidMount() &#123;\n    ChatAPI.subscribeToFriendStatus(\n      this.props.friend.id,\n      this.handleStatusChange\n    );\n  &#125;\n​\n  componentDidUpdate(prevProps) &#123;\n    // 取消之前订阅的朋友\n    ChatAPI.unsubscribeFromFriendStatus(\n      prevProps.friend.id,\n      this.handleStatusChange\n    );\n    // 订阅下一个朋友\n    ChatAPI.subscribeToFriendStatus(\n      this.props.friend.id,\n      this.handleStatusChange\n    );\n  &#125;\n​\n  componentWillUnmount() &#123;\n    ChatAPI.unsubscribeFromFriendStatus(\n      this.props.friend.id,\n      this.handleStatusChange\n    );\n  &#125;\n  \n</code></pre>\n<p>忘记正确处理<code>componentDidUpdate</code>是<code>React</code>应用程序中常见的<code>bug</code>漏洞。<br>现在考虑使用Hooks的这个组件的版本：</p>\n<pre><code>function FriendStatus(props) &#123;\n  // ...\n  useEffect(() =&gt; &#123;\n    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n    return () =&gt; &#123;\n      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n    &#125;;\n  &#125;);\n</code></pre>\n<p>它不会受到这个bug的影响。 （但我们也没有对它做任何改动。）</p>\n<p>没有用于处理更新的特殊代码，因为默认情况下useEffect会处理它们。它会在应用下一个效果之前清除之前的效果。为了说明这一点，这里是一个订阅和取消订阅调用的序列，该组件可以随着时间的推移产生：</p>\n<pre><code>// Mount with &#123; friend: &#123; id: 100 &#125; &#125; props\nChatAPI.subscribeToFriendStatus(100, handleStatusChange);     // Run first effect\n​\n// Update with &#123; friend: &#123; id: 200 &#125; &#125; props\nChatAPI.unsubscribeFromFriendStatus(100, handleStatusChange); // Clean up previous effect\nChatAPI.subscribeToFriendStatus(200, handleStatusChange);     // Run next effect\n​\n// Update with &#123; friend: &#123; id: 300 &#125; &#125; props\nChatAPI.unsubscribeFromFriendStatus(200, handleStatusChange); // Clean up previous effect\nChatAPI.subscribeToFriendStatus(300, handleStatusChange);     // Run next effect\n​\n// Unmount\nChatAPI.unsubscribeFromFriendStatus(300, handleStatusChange); // Clean up last effect\n</code></pre>\n<p>此行为默认确保一致性，并防止由于缺少更新逻辑而导致类组件中常见的错误。</p>\n<p><strong>提示：通过跳过效果优化性能</strong></p>\n<p>在某些情况下，在每次渲染后清理或应用效果可能会产生性能问题。在类组件中，我们可以通过在<code>componentDidUpdate</code>中编写与<code>prevProps</code>或<code>prevState</code>的额外比较来解决这个问题：</p>\n<pre><code>componentDidUpdate(prevProps, prevState) &#123;\n  if (prevState.count !== this.state.count) &#123;\n    document.title = `You clicked $&#123;this.state.count&#125; times`;\n  &#125;\n&#125;\n</code></pre>\n<p>这个要求很常见，它被内置到<code>useEffect Hook</code> API中。如果在重新渲染之间没有更改某些值，则可以告诉<code>React</code>跳过应用效果。为此，将数组作为可选的第二个参数传递给useEffect：</p>\n<pre><code>useEffect(() =&gt; &#123;\n  document.title = `You clicked $&#123;count&#125; times`;\n&#125;, [count]); // 当count改变的时候回再次运行这个效果\n</code></pre>\n<p>在上面的例子中，我们传递<code>[count]</code>作为第二个参数。这是什么意思？如果 <code>count</code> 为5，然后我们的组件重新渲染，<code>count</code>仍然等于5，则<code>React</code>将比较前一个渲染的[5]和下一个渲染的[5]。因为数组中的所有项都是相同的（<code>5 === 5</code>），所以<code>React</code>会跳过这个效果。这是我们的优化。</p>\n<p>当我们使用<code>count</code>更新为6渲染时，React会将前一渲染中[5]数组中的项目与下一渲染中[6]数组中的项目进行比较。这次，<code>React</code>将重新运行效果，因为<code>5！== 6</code>。<strong>如果数组中有多个项目，<code>React</code>将重新运行效果，即使其中只有一个不同。</strong></p>\n<p>这也适用于具有清理阶段的效果：</p>\n<pre><code>useEffect(() =&gt; &#123;\n  ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n  return () =&gt; &#123;\n    ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n  &#125;;\n&#125;, [props.friend.id]); // 只有朋友id改变重新订阅\n</code></pre>\n<p>将来， 第二个参数可能会通过构建时转换自动添加。</p>\n<blockquote>\n<p><strong>注意:</strong> 如果使用此优化，请确保该数组包含外部作用域中随时间变化且效果使用的任何值，换句话说就是要在这个效果函数里有意义。 否则，代码将引用先前渲染中的旧值。我们还将讨论<code>Hooks API</code>参考中的其他优化选项。 </p>\n</blockquote>\n<blockquote>\n<p>如果要<strong>运行效果并仅将其清理一次（在装载和卸载时），则可以将空数组（[]）作为第二个参数传递。</strong> 这告诉React你的效果不依赖于来自props或 state的任何值，所以它永远不需要重新运行。这不作为特殊情况处理 - 它直接遵循输入数组的工作方式。虽然传递[]更接近熟悉的<code>componentDidMount</code>和 <code>componentWillUnmount</code>生命周期，但我们建议不要将它作为一种习惯，因为它经常会导致错误，除非你明确你自己在做什么， 如上所述。 不要忘记<code>React</code>推迟运行<code>useEffect</code>直到浏览器绘制完成后，所以做额外的工作不是问题。  </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"effect-hook\"><a href=\"#effect-hook\" class=\"headerlink\" title=\"effect-hook\"></a>effect-hook</h2><p><code>Effect Hook</code> 可以使得你在函数组件中执行一些带有副作用的方法。</p>","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;useState, useEffect&#125; from &#x27;react&#x27;;</span><br><span class=\"line\">function Example ()&#123;</span><br><span class=\"line\">  const [count, setCount] = useState(0);</span><br><span class=\"line\">  useEffect(()=&gt;&#123;</span><br><span class=\"line\">    document.title = `You click $&#123;count&#125; times`</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">  return(</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">        &lt;p&gt; you click &#123;count&#125; times &lt;/p&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;点击我&lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面这段代码是基于上个 <a href=\"http://www.baidu.com/\">state hook计数器的例子</a> 的例子，但是我们现在添加了新的功能，我么讲文档的标题设置为自定义消息，包含了点击次数。</p>\n<p>数据获取，设置订阅及先手动更改 <code>React</code> 组件中的 <code>DOM</code> 都是副作用的示例。无论你是否习惯与将这些操作成为“副作用”或者仅仅是“效果”，但之前你可能已经在组件中执行了这些操作。</p>\n<blockquote>\n<p> <strong>提示：</strong> 如果你熟悉<code>React</code>类组件生命周期方法，你就可以将<code>useEffect Hook</code>视为<code>componentDidMount</code>,<code>componentDidUpdate</code>和<code>componentWillUnmount</code>的组合。</p>\n</blockquote>\n<p>React组件中有两种常见的副作用：那些需要清理的副作用和不需要清理的副作用。让我们详细的看一下两者的区别。</p>\n<hr>\n<h2 id=\"无需清理的副作用\"><a href=\"#无需清理的副作用\" class=\"headerlink\" title=\"无需清理的副作用\"></a>无需清理的副作用</h2><p>有时，我们希望在<code>React</code>更新<code>DOM</code>之后运行一些额外的代码。网络请求， 手动改变<code>DOM</code>和日志记录是不需要清理的效果（副作用，简称“效果”）的常见示例。我们这样说是因为我们可以运行他们并立即忘记他们。让我们比较一下<code>class</code>和<code>hooks</code>是如何让我们表达这样的副作用。</p>\n<h3 id=\"使用class的例子\"><a href=\"#使用class的例子\" class=\"headerlink\" title=\"使用class的例子\"></a>使用class的例子</h3><p>在<code>react</code>类组件中，<code>render</code>方法本身不应该导致副作用。这太早了，我们通常希望<code>React</code>更新<code>DOM</code>之后执行我们的效果。这就是为啥在<code>React</code>类中，我们将副作用放到<code>componentDidMount</code>和<code>componentDidUpdate</code>中。看我们的例子，这是一个<code>React</code>计数器类的组件，它在react对DOM进行更改后立即更新文档的标题。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React,&#123;Component&#125; from &#x27;react&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default class Example extends Component &#123;</span><br><span class=\"line\">    constructor(props)&#123;</span><br><span class=\"line\">        super(props);</span><br><span class=\"line\">        this.state = &#123;</span><br><span class=\"line\">            count: 0</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    componentDidMount() &#123;</span><br><span class=\"line\">        document.title = `You click $&#123;this.state.count&#125; times`</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    componentDidUpdate() &#123;</span><br><span class=\"line\">        document.title = `You clicked $&#123;this.state.count&#125; times`;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        return (</span><br><span class=\"line\">          &lt;div&gt;</span><br><span class=\"line\">            &lt;p&gt;You clicked &#123;this.state.count&#125; times&lt;/p&gt;</span><br><span class=\"line\">            &lt;button onClick=&#123;() =&gt; this.setState(&#123; count: this.state.count + 1 &#125;)&#125;&gt;</span><br><span class=\"line\">              Click me</span><br><span class=\"line\">            &lt;/button&gt;</span><br><span class=\"line\">          &lt;/div&gt;</span><br><span class=\"line\">        );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>请注意<strong>我们如何在类中复制这两个生命周期方法之间的代码</strong><br>这是因为在许多的情况下，我们希望执行相同的副作用，无论组件是刚安装还是已经更新。从概念上讲，我们希望它在每次渲染之后发生，但是在React类组件中没有这样的方法（render方法应该避免更重要）。我们可以提取一个单独的方法，但是我们仍然需要在这两个地方调用它。</p>\n<p>现在让我们回头再看看我们如何使用<code>useEffect Hook</code>做同样的事情。</p>\n<p><code>useEffect</code><strong>有什么作用？</strong><br>通过使用这个Hook，你告诉React你的组件需要在渲染后执行某些操作。React将记住你传递的函数（我们将其称为“效果”），并在执行DOM更新后稍后调用它。在这个效果中，我们设置文档标题，但我们也可以执行数据提取或调用其他命令式API。</p>\n<p><strong>为什么在组件内调用<code>useEffect</code>？</strong><br>在组件中使用<code>useEffect</code>让我们可以直接从效果中访问状态变量（如count或任何道具）。我们不需要特殊的API来读取它 - 它已经在函数范围内了。Hooks拥抱<code>JavaScript</code><strong>闭包</strong>，并避免在JavaScript已经提供解决方案的情况下引入特定于React的API。</p>\n<p><strong>每次渲染后useEffect都会运行吗？</strong><br>是的。默认情况下，它在第一次渲染之后和每次更新之后运行。 （我们稍后会讨论如何自定义它。）你可能会发现更容易认为效果发生在“渲染之后”，而不是考虑“挂载”和“更新”。React保证DOM在运行‘效果’时已更新。</p>\n<h3 id=\"详细说明\"><a href=\"#详细说明\" class=\"headerlink\" title=\"详细说明\"></a>详细说明</h3><p>现在我们对这个<code>hook</code>更加的了解了，那再看看下面这个例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Example() &#123;</span><br><span class=\"line\">    const[count, setCount] = useState(0);</span><br><span class=\"line\">    </span><br><span class=\"line\">    useEffect(() =&gt; &#123;</span><br><span class=\"line\">        document.title = `You clicked $&#123;count&#125; times`;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;    </span><br></pre></td></tr></table></figure>\n<p>我们声明了<code>count</code>状态变量，然后告诉<code>React</code>我们需要使用效果。我们将一个函数传递给<code>useEffect Hook</code>，这个函数式就是效果（副作用）。在我们的效果中，我们使用<code>document.title</code>浏览器<code>API</code>设置文档标题。我们可以读取效果中的最新<code>count</code>，因为它在我们的函数范围内。当<code>React</code>渲染我们的组件时，它会记住我们是用的效果，然后在更新<code>DOM</code>后运行我们的效果。每次渲染都会发生这种情况，包括第一次渲染。</p>\n<blockquote>\n<p><strong>注意：</strong> 与<code>componentDidMount</code>或<code>componentDidUpdate</code>不同，使用<code>useEffect</code>的效果不会阻止浏览器更新屏幕。这使应用感觉更具响应性。大多数效果不需要同步发生。在他们这样做的不常见情况下（例如测量布局），有一个单独的<code>useLayoutEffect Hook</code>，其<code>API</code>与<code>useEffect</code>相同。</p>\n</blockquote>\n<h2 id=\"需要清理的副作用\"><a href=\"#需要清理的副作用\" class=\"headerlink\" title=\"需要清理的副作用\"></a>需要清理的副作用</h2><p>之前，我们研究了如何表达不需要任何清理的副作用。但是，有些效果需要清理。例如，我们可能希望设置对某些外部数据源的订阅。在这种情况下，清理是非常重要的，这样我们就不会引入内存泄漏！让我们比较一下我们如何使用类和<code>Hooks</code>来实现它。</p>\n<h3 id=\"使用-class-的例子\"><a href=\"#使用-class-的例子\" class=\"headerlink\" title=\"使用 **class**的例子\"></a>使用 **<code>class</code>**的例子</h3><p>在<code>React</code>类中，通常会在<code>componentDidMount</code>中设置订阅，并在<code>componentWillUnmount</code>中清除它。例如，假设我们有一个ChatAPI`模块，可以让我们订阅朋友的在线状态。以下是我们如何使用类订阅和显示该状态：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class FriendStatus extends React.Component &#123;</span><br><span class=\"line\">  constructor(props) &#123;</span><br><span class=\"line\">    super(props);</span><br><span class=\"line\">    this.state = &#123; </span><br><span class=\"line\">        isOnline: null </span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    this.handleStatusChange = this.handleStatusChange.bind(this);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">​</span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    ChatAPI.subscribeToFriendStatus(</span><br><span class=\"line\">      this.props.friend.id,</span><br><span class=\"line\">      this.handleStatusChange</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">​</span><br><span class=\"line\">  componentWillUnmount() &#123;</span><br><span class=\"line\">    ChatAPI.unsubscribeFromFriendStatus(</span><br><span class=\"line\">      this.props.friend.id,</span><br><span class=\"line\">      this.handleStatusChange</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">​</span><br><span class=\"line\">  handleStatusChange(status) &#123;</span><br><span class=\"line\">    this.setState(&#123;</span><br><span class=\"line\">      isOnline: status.isOnline</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">​</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    if (this.state.isOnline === null) &#123;</span><br><span class=\"line\">      return &#x27;Loading...&#x27;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return this.state.isOnline ? &#x27;Online&#x27; : &#x27;Offline&#x27;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>请注意<code>componentDidMount</code>和<code>componentWillUnmount</code>如何相互作用。生命周期方法迫使我们拆分这个逻辑，即使它们中的概念代码都与相同的效果有关。</p>\n<blockquote>\n<p><strong>注意：</strong> 眼尖的你可能会注意到这个例子还需要一个<code>componentDidUpdate</code>方法才能完全正确。我们暂时忽略这一点，但会在本页的后面部分再回过头来讨论它。</p>\n</blockquote>\n<h3 id=\"使用-hooks-的例子\"><a href=\"#使用-hooks-的例子\" class=\"headerlink\" title=\"使用**hooks**的例子\"></a>使用**<code>hooks</code>**的例子</h3><p>你可能认为我们需要单独的效果来执行清理。但是添加和删除订阅的代码是如此紧密相关，以至于<code>useEffect</code>旨在将它保持在一起。如果你的效果返回一个函数，<code>React</code>将在清理时运行它：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; useState, useEffect &#125; from &#x27;react&#x27;;</span><br><span class=\"line\">​</span><br><span class=\"line\">function FriendStatus(props) &#123;</span><br><span class=\"line\">  const [isOnline, setIsOnline] = useState(null);</span><br><span class=\"line\">​</span><br><span class=\"line\">  function handleStatusChange(status) &#123;</span><br><span class=\"line\">    setIsOnline(status.isOnline);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">​</span><br><span class=\"line\">  useEffect(() =&gt; &#123;</span><br><span class=\"line\">    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);</span><br><span class=\"line\">    // 指定如何在这种效果之后清理</span><br><span class=\"line\">    return function cleanup() &#123;</span><br><span class=\"line\">      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">​</span><br><span class=\"line\">  if (isOnline === null) &#123;</span><br><span class=\"line\">    return &#x27;Loading...&#x27;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return isOnline ? &#x27;Online&#x27; : &#x27;Offline&#x27;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>为什么我们从效果中返回一个函数？</strong> 这是效果的可选清理机制。每个效果都可能返回一个在它之后清理的函数。这使我们可以保持添加和删除彼此接近的订阅的逻辑。</p>\n<p><strong>React什么时候清理效果？</strong> 当组件卸载时，React执行清理。但是，正如我们之前所了解的那样，效果会针对每个渲染运行而不仅仅是一次。这就是React在下次运行效果之前还清除前一渲染效果的原因。我们将讨论为什么这有助于避免错误以及如何在以后发生性能问题时选择退出此行为。</p>\n<blockquote>\n<p><strong>注意:</strong> 我们不必从效果中返回命名函数。我们在这里只是为了说明才加的命名，但你可以返回箭头函数。</p>\n</blockquote>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>我们已经了解到useEffect让我们在组件渲染后表达不同类型的副作用。某些效果可能需要清理，因此它们返回一个函数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(() =&gt; &#123;</span><br><span class=\"line\">    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);</span><br><span class=\"line\">    return () =&gt; &#123;</span><br><span class=\"line\">      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>其他效果可能没有清理阶段，也不会返回任何内容。比如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(() =&gt; &#123;</span><br><span class=\"line\">    document.title = `You clicked $&#123;count&#125; times`;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>如果你觉得你对Effect Hook的工作方式有了很好的把握，或者你感到不知所措，那么现在就可以跳转到关于Hooks规则。</p>\n<hr>\n<h2 id=\"使用效果的提示\"><a href=\"#使用效果的提示\" class=\"headerlink\" title=\"使用效果的提示\"></a>使用效果的提示</h2><p>我们将继续深入了解使用<code>React</code>用户可能会产生好奇心的<code>useEffect</code>的某些方面。</p>\n<blockquote>\n<p><strong>提示：使用多重效果分离问题</strong></p>\n</blockquote>\n<p>这是一个组合了前面示例中的计数器和朋友状态指示器逻辑的组件:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class FriendStatusWithCounter extends React.Component &#123;</span><br><span class=\"line\">  constructor(props) &#123;</span><br><span class=\"line\">    super(props);</span><br><span class=\"line\">    this.state = &#123; count: 0, isOnline: null &#125;;</span><br><span class=\"line\">    this.handleStatusChange = this.handleStatusChange.bind(this);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">​</span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    document.title = `You clicked $&#123;this.state.count&#125; times`;</span><br><span class=\"line\">    ChatAPI.subscribeToFriendStatus(</span><br><span class=\"line\">      this.props.friend.id,</span><br><span class=\"line\">      this.handleStatusChange</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">​</span><br><span class=\"line\">  componentDidUpdate() &#123;</span><br><span class=\"line\">    document.title = `You clicked $&#123;this.state.count&#125; times`;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">​</span><br><span class=\"line\">  componentWillUnmount() &#123;</span><br><span class=\"line\">    ChatAPI.unsubscribeFromFriendStatus(</span><br><span class=\"line\">      this.props.friend.id,</span><br><span class=\"line\">      this.handleStatusChange</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">​</span><br><span class=\"line\">  handleStatusChange(status) &#123;</span><br><span class=\"line\">    this.setState(&#123;</span><br><span class=\"line\">      isOnline: status.isOnline</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // ...</span><br></pre></td></tr></table></figure>\n<p>请注意设置 <code>document.title</code> 的逻辑如何在<code>componentDidMount</code> 和<code>componentDidUpdate</code> 之间拆分。订阅逻辑也在<code>componentDidMount</code> 和 <code>componentWillUnmount</code>之间传播。<code>componentDidMount</code> 包含两个任务的代码。</p>\n<p>那么，<code>Hooks</code>如何解决这个问题呢？就像你可以多次使用状态挂钩一样，你也可以使用多种效果。这让我们将不相关的逻辑分成不同的效果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function FriendStatusWithCounter(props) &#123;</span><br><span class=\"line\">  const [count, setCount] = useState(0);</span><br><span class=\"line\">  useEffect(() =&gt; &#123;</span><br><span class=\"line\">    document.title = `You clicked $&#123;count&#125; times`;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">​</span><br><span class=\"line\">  const [isOnline, setIsOnline] = useState(null);</span><br><span class=\"line\">  useEffect(() =&gt; &#123;</span><br><span class=\"line\">    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);</span><br><span class=\"line\">    return () =&gt; &#123;</span><br><span class=\"line\">      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">​</span><br><span class=\"line\">  function handleStatusChange(status) &#123;</span><br><span class=\"line\">    setIsOnline(status.isOnline);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>**<code>Hooks</code>**允许我们根据它正在做的事情而不是生命周期方法名称来拆分代码。 React将按照指定的顺序应用组件使用的每个效果。</p>\n<p><strong>说明：为什么效果在每个更新上运行</strong><br>如果你习惯了类，你可能想知道为什么每次重新渲染后效果的清理阶段都会发生，而不是在卸载过程中只发生一次。让我们看一个实际的例子，看看为什么这个设计可以帮助我们创建更少bug的组件。</p>\n<p>在上面介绍了一个示例FriendStatus组件，该组件显示朋友是否在线。我们的类从this.props读取friend.id，在组件挂载后订阅朋友状态，并在卸载期间取消订阅：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">componentDidMount() &#123;</span><br><span class=\"line\">    ChatAPI.subscribeToFriendStatus(</span><br><span class=\"line\">      this.props.friend.id,</span><br><span class=\"line\">      this.handleStatusChange</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">​</span><br><span class=\"line\">  componentWillUnmount() &#123;</span><br><span class=\"line\">    ChatAPI.unsubscribeFromFriendStatus(</span><br><span class=\"line\">      this.props.friend.id,</span><br><span class=\"line\">      this.handleStatusChange</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>但是如果friend prop在组件出现在屏幕上时发生了变化，会发生什么？</strong> 我们的组件将继续显示不同朋友的在线状态。这是一个错误。卸载时我们还会导致内存泄漏或崩溃，因为取消订阅会使用错误的朋友ID。</p>\n<p>在类组件中，我们需要添加componentDidUpdate来处理这种情况:</p>\n<pre><code>componentDidMount() &#123;\n    ChatAPI.subscribeToFriendStatus(\n      this.props.friend.id,\n      this.handleStatusChange\n    );\n  &#125;\n​\n  componentDidUpdate(prevProps) &#123;\n    // 取消之前订阅的朋友\n    ChatAPI.unsubscribeFromFriendStatus(\n      prevProps.friend.id,\n      this.handleStatusChange\n    );\n    // 订阅下一个朋友\n    ChatAPI.subscribeToFriendStatus(\n      this.props.friend.id,\n      this.handleStatusChange\n    );\n  &#125;\n​\n  componentWillUnmount() &#123;\n    ChatAPI.unsubscribeFromFriendStatus(\n      this.props.friend.id,\n      this.handleStatusChange\n    );\n  &#125;\n  \n</code></pre>\n<p>忘记正确处理<code>componentDidUpdate</code>是<code>React</code>应用程序中常见的<code>bug</code>漏洞。<br>现在考虑使用Hooks的这个组件的版本：</p>\n<pre><code>function FriendStatus(props) &#123;\n  // ...\n  useEffect(() =&gt; &#123;\n    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n    return () =&gt; &#123;\n      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n    &#125;;\n  &#125;);\n</code></pre>\n<p>它不会受到这个bug的影响。 （但我们也没有对它做任何改动。）</p>\n<p>没有用于处理更新的特殊代码，因为默认情况下useEffect会处理它们。它会在应用下一个效果之前清除之前的效果。为了说明这一点，这里是一个订阅和取消订阅调用的序列，该组件可以随着时间的推移产生：</p>\n<pre><code>// Mount with &#123; friend: &#123; id: 100 &#125; &#125; props\nChatAPI.subscribeToFriendStatus(100, handleStatusChange);     // Run first effect\n​\n// Update with &#123; friend: &#123; id: 200 &#125; &#125; props\nChatAPI.unsubscribeFromFriendStatus(100, handleStatusChange); // Clean up previous effect\nChatAPI.subscribeToFriendStatus(200, handleStatusChange);     // Run next effect\n​\n// Update with &#123; friend: &#123; id: 300 &#125; &#125; props\nChatAPI.unsubscribeFromFriendStatus(200, handleStatusChange); // Clean up previous effect\nChatAPI.subscribeToFriendStatus(300, handleStatusChange);     // Run next effect\n​\n// Unmount\nChatAPI.unsubscribeFromFriendStatus(300, handleStatusChange); // Clean up last effect\n</code></pre>\n<p>此行为默认确保一致性，并防止由于缺少更新逻辑而导致类组件中常见的错误。</p>\n<p><strong>提示：通过跳过效果优化性能</strong></p>\n<p>在某些情况下，在每次渲染后清理或应用效果可能会产生性能问题。在类组件中，我们可以通过在<code>componentDidUpdate</code>中编写与<code>prevProps</code>或<code>prevState</code>的额外比较来解决这个问题：</p>\n<pre><code>componentDidUpdate(prevProps, prevState) &#123;\n  if (prevState.count !== this.state.count) &#123;\n    document.title = `You clicked $&#123;this.state.count&#125; times`;\n  &#125;\n&#125;\n</code></pre>\n<p>这个要求很常见，它被内置到<code>useEffect Hook</code> API中。如果在重新渲染之间没有更改某些值，则可以告诉<code>React</code>跳过应用效果。为此，将数组作为可选的第二个参数传递给useEffect：</p>\n<pre><code>useEffect(() =&gt; &#123;\n  document.title = `You clicked $&#123;count&#125; times`;\n&#125;, [count]); // 当count改变的时候回再次运行这个效果\n</code></pre>\n<p>在上面的例子中，我们传递<code>[count]</code>作为第二个参数。这是什么意思？如果 <code>count</code> 为5，然后我们的组件重新渲染，<code>count</code>仍然等于5，则<code>React</code>将比较前一个渲染的[5]和下一个渲染的[5]。因为数组中的所有项都是相同的（<code>5 === 5</code>），所以<code>React</code>会跳过这个效果。这是我们的优化。</p>\n<p>当我们使用<code>count</code>更新为6渲染时，React会将前一渲染中[5]数组中的项目与下一渲染中[6]数组中的项目进行比较。这次，<code>React</code>将重新运行效果，因为<code>5！== 6</code>。<strong>如果数组中有多个项目，<code>React</code>将重新运行效果，即使其中只有一个不同。</strong></p>\n<p>这也适用于具有清理阶段的效果：</p>\n<pre><code>useEffect(() =&gt; &#123;\n  ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n  return () =&gt; &#123;\n    ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n  &#125;;\n&#125;, [props.friend.id]); // 只有朋友id改变重新订阅\n</code></pre>\n<p>将来， 第二个参数可能会通过构建时转换自动添加。</p>\n<blockquote>\n<p><strong>注意:</strong> 如果使用此优化，请确保该数组包含外部作用域中随时间变化且效果使用的任何值，换句话说就是要在这个效果函数里有意义。 否则，代码将引用先前渲染中的旧值。我们还将讨论<code>Hooks API</code>参考中的其他优化选项。 </p>\n</blockquote>\n<blockquote>\n<p>如果要<strong>运行效果并仅将其清理一次（在装载和卸载时），则可以将空数组（[]）作为第二个参数传递。</strong> 这告诉React你的效果不依赖于来自props或 state的任何值，所以它永远不需要重新运行。这不作为特殊情况处理 - 它直接遵循输入数组的工作方式。虽然传递[]更接近熟悉的<code>componentDidMount</code>和 <code>componentWillUnmount</code>生命周期，但我们建议不要将它作为一种习惯，因为它经常会导致错误，除非你明确你自己在做什么， 如上所述。 不要忘记<code>React</code>推迟运行<code>useEffect</code>直到浏览器绘制完成后，所以做额外的工作不是问题。  </p>\n</blockquote>"}],"PostAsset":[],"PostCategory":[{"post_id":"cl11zacpc0001rodq7en12eb1","category_id":"cl11zacpg0004rodqcvzu4104","_id":"cl11zacpo000erodqa9br8dz2"},{"post_id":"cl11zacpn000drodqdjwsgxh8","category_id":"cl11zacpm000arodqaulbb7zv","_id":"cl11zacpq000irodq97c28zfp"},{"post_id":"cl11zacpf0003rodqg7at9peb","category_id":"cl11zacpm000arodqaulbb7zv","_id":"cl11zacpr000lrodqag57cbox"},{"post_id":"cl11zacpj0007rodqevhb1vuq","category_id":"cl11zacpm000arodqaulbb7zv","_id":"cl11zacpr000nrodqgcjy5z6b"},{"post_id":"cl11zacpm0009rodqco1174qt","category_id":"cl11zacpq000jrodqe0pp9y1e","_id":"cl11zacpt000trodq3s9hbwbj"},{"post_id":"cl11zacpk0008rodq1pvnghnf","category_id":"cl11zacpq000jrodqe0pp9y1e","_id":"cl11zacpt000xrodqd9ruaz14"},{"post_id":"cl11zacpk0008rodq1pvnghnf","category_id":"cl11zacps000qrodq4gqzb4jq","_id":"cl11zacpu000zrodqhpqn6h89"},{"post_id":"cl11zacpv0011rodq1udnb4h3","category_id":"cl11zacpq000jrodqe0pp9y1e","_id":"cl11zacpw0014rodq4nqlc3gv"},{"post_id":"cl11zacpv0011rodq1udnb4h3","category_id":"cl11zacps000qrodq4gqzb4jq","_id":"cl11zacpw0015rodq9b9d2klr"}],"PostTag":[{"post_id":"cl11zacpc0001rodq7en12eb1","tag_id":"cl11zacpi0005rodq9qpj8xhp","_id":"cl11zacpn000crodq89w097xv"},{"post_id":"cl11zacpf0003rodqg7at9peb","tag_id":"cl11zacpm000brodq92qw9las","_id":"cl11zacpq000hrodqa9ule3h8"},{"post_id":"cl11zacpj0007rodqevhb1vuq","tag_id":"cl11zacpm000brodq92qw9las","_id":"cl11zacpr000mrodq2zq1b4s6"},{"post_id":"cl11zacpk0008rodq1pvnghnf","tag_id":"cl11zacpr000krodqbfephl4k","_id":"cl11zacpt000srodqhhsj6coj"},{"post_id":"cl11zacpk0008rodq1pvnghnf","tag_id":"cl11zacpr000prodqhbxq14x8","_id":"cl11zacpt000urodq65w36wa0"},{"post_id":"cl11zacpm0009rodqco1174qt","tag_id":"cl11zacpr000krodqbfephl4k","_id":"cl11zacpt000wrodqgr6wdisv"},{"post_id":"cl11zacpn000drodqdjwsgxh8","tag_id":"cl11zacpm000brodq92qw9las","_id":"cl11zacpu000yrodq7b2u0oga"},{"post_id":"cl11zacpn000drodqdjwsgxh8","tag_id":"cl11zacpr000krodqbfephl4k","_id":"cl11zacpu0010rodqfj3bgxce"},{"post_id":"cl11zacpv0011rodq1udnb4h3","tag_id":"cl11zacpr000krodqbfephl4k","_id":"cl11zacpv0012rodq2w6e16tc"},{"post_id":"cl11zacpv0011rodq1udnb4h3","tag_id":"cl11zacpr000prodqhbxq14x8","_id":"cl11zacpw0013rodq9e8san3k"}],"Tag":[{"name":"markdown","_id":"cl11zacpi0005rodq9qpj8xhp"},{"name":"react-native","_id":"cl11zacpm000brodq92qw9las"},{"name":"react","_id":"cl11zacpr000krodqbfephl4k"},{"name":"react-hooks","_id":"cl11zacpr000prodqhbxq14x8"}]}}